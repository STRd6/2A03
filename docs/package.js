(function(pkg) {
  (function() {
  var annotateSourceURL, cacheFor, circularGuard, defaultEntryPoint, fileSeparator, generateRequireFn, global, isPackage, loadModule, loadPackage, loadPath, normalizePath, publicAPI, rootModule, startsWith,
    __slice = [].slice;

  fileSeparator = '/';

  global = self;

  defaultEntryPoint = "main";

  circularGuard = {};

  rootModule = {
    path: ""
  };

  loadPath = function(parentModule, pkg, path) {
    var cache, localPath, module, normalizedPath;
    if (startsWith(path, '/')) {
      localPath = [];
    } else {
      localPath = parentModule.path.split(fileSeparator);
    }
    normalizedPath = normalizePath(path, localPath);
    cache = cacheFor(pkg);
    if (module = cache[normalizedPath]) {
      if (module === circularGuard) {
        throw "Circular dependency detected when requiring " + normalizedPath;
      }
    } else {
      cache[normalizedPath] = circularGuard;
      try {
        cache[normalizedPath] = module = loadModule(pkg, normalizedPath);
      } finally {
        if (cache[normalizedPath] === circularGuard) {
          delete cache[normalizedPath];
        }
      }
    }
    return module.exports;
  };

  normalizePath = function(path, base) {
    var piece, result;
    if (base == null) {
      base = [];
    }
    base = base.concat(path.split(fileSeparator));
    result = [];
    while (base.length) {
      switch (piece = base.shift()) {
        case "..":
          result.pop();
          break;
        case "":
        case ".":
          break;
        default:
          result.push(piece);
      }
    }
    return result.join(fileSeparator);
  };

  loadPackage = function(pkg) {
    var path;
    path = pkg.entryPoint || defaultEntryPoint;
    return loadPath(rootModule, pkg, path);
  };

  loadModule = function(pkg, path) {
    var args, content, context, dirname, file, module, program, values;
    if (!(file = pkg.distribution[path])) {
      throw "Could not find file at " + path + " in " + pkg.name;
    }
    if ((content = file.content) == null) {
      throw "Malformed package. No content for file at " + path + " in " + pkg.name;
    }
    program = annotateSourceURL(content, pkg, path);
    dirname = path.split(fileSeparator).slice(0, -1).join(fileSeparator);
    module = {
      path: dirname,
      exports: {}
    };
    context = {
      require: generateRequireFn(pkg, module),
      global: global,
      module: module,
      exports: module.exports,
      PACKAGE: pkg,
      __filename: path,
      __dirname: dirname
    };
    args = Object.keys(context);
    values = args.map(function(name) {
      return context[name];
    });
    Function.apply(null, __slice.call(args).concat([program])).apply(module, values);
    return module;
  };

  isPackage = function(path) {
    if (!(startsWith(path, fileSeparator) || startsWith(path, "." + fileSeparator) || startsWith(path, ".." + fileSeparator))) {
      return path.split(fileSeparator)[0];
    } else {
      return false;
    }
  };

  generateRequireFn = function(pkg, module) {
    var fn;
    if (module == null) {
      module = rootModule;
    }
    if (pkg.name == null) {
      pkg.name = "ROOT";
    }
    if (pkg.scopedName == null) {
      pkg.scopedName = "ROOT";
    }
    fn = function(path) {
      var otherPackage;
      if (typeof path === "object") {
        return loadPackage(path);
      } else if (isPackage(path)) {
        if (!(otherPackage = pkg.dependencies[path])) {
          throw "Package: " + path + " not found.";
        }
        if (otherPackage.name == null) {
          otherPackage.name = path;
        }
        if (otherPackage.scopedName == null) {
          otherPackage.scopedName = "" + pkg.scopedName + ":" + path;
        }
        return loadPackage(otherPackage);
      } else {
        return loadPath(module, pkg, path);
      }
    };
    fn.packageWrapper = publicAPI.packageWrapper;
    fn.executePackageWrapper = publicAPI.executePackageWrapper;
    return fn;
  };

  publicAPI = {
    generateFor: generateRequireFn,
    packageWrapper: function(pkg, code) {
      return ";(function(PACKAGE) {\n  var src = " + (JSON.stringify(PACKAGE.distribution.main.content)) + ";\n  var Require = new Function(\"PACKAGE\", \"return \" + src)({distribution: {main: {content: src}}});\n  var require = Require.generateFor(PACKAGE);\n  " + code + ";\n})(" + (JSON.stringify(pkg, null, 2)) + ");";
    },
    executePackageWrapper: function(pkg) {
      return publicAPI.packageWrapper(pkg, "require('./" + pkg.entryPoint + "')");
    },
    loadPackage: loadPackage
  };

  if (typeof exports !== "undefined" && exports !== null) {
    module.exports = publicAPI;
  } else {
    global.Require = publicAPI;
  }

  startsWith = function(string, prefix) {
    return string.lastIndexOf(prefix, 0) === 0;
  };

  cacheFor = function(pkg) {
    if (pkg.cache) {
      return pkg.cache;
    }
    Object.defineProperty(pkg, "cache", {
      value: {}
    });
    return pkg.cache;
  };

  annotateSourceURL = function(program, pkg, path) {
    return "" + program + "\n//# sourceURL=" + pkg.scopedName + "/" + path;
  };

  return publicAPI;

}).call(this);

  window.require = Require.generateFor(pkg);
})({
  "source": {
    "LICENSE": {
      "path": "LICENSE",
      "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
      "mode": "100644",
      "type": "blob"
    },
    "README.md": {
      "path": "README.md",
      "content": "# 2A03\nExperimenting with NES soundz\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/drop.coffee": {
      "path": "lib/drop.coffee",
      "content": "module.exports = (element, handler) ->\n  cancel = (e) ->\n    e.preventDefault()\n    return false\n\n  element.addEventListener \"dragover\", cancel\n  element.addEventListener \"dragenter\", cancel\n  element.addEventListener \"drop\", (e) ->\n    e.preventDefault()\n    handler(e)\n    return false\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/filesaver.js": {
      "path": "lib/filesaver.js",
      "content": "/* FileSaver.js\n * A saveAs() FileSaver implementation.\n * 1.1.20151003\n *\n * By Eli Grey, http://eligrey.com\n * License: MIT\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n */\n\n/*global self */\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\nvar saveAs = saveAs || (function(view) {\n\t\"use strict\";\n\t// IE <10 is explicitly unsupported\n\tif (typeof navigator !== \"undefined\" && /MSIE [1-9]\\./.test(navigator.userAgent)) {\n\t\treturn;\n\t}\n\tvar\n\t\t  doc = view.document\n\t\t  // only get URL when necessary in case Blob.js hasn't overridden it yet\n\t\t, get_URL = function() {\n\t\t\treturn view.URL || view.webkitURL || view;\n\t\t}\n\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n\t\t, can_use_save_link = \"download\" in save_link\n\t\t, click = function(node) {\n\t\t\tvar event = new MouseEvent(\"click\");\n\t\t\tnode.dispatchEvent(event);\n\t\t}\n\t\t, is_safari = /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent)\n\t\t, webkit_req_fs = view.webkitRequestFileSystem\n\t\t, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem\n\t\t, throw_outside = function(ex) {\n\t\t\t(view.setImmediate || view.setTimeout)(function() {\n\t\t\t\tthrow ex;\n\t\t\t}, 0);\n\t\t}\n\t\t, force_saveable_type = \"application/octet-stream\"\n\t\t, fs_min_size = 0\n\t\t// See https://code.google.com/p/chromium/issues/detail?id=375297#c7 and\n\t\t// https://github.com/eligrey/FileSaver.js/commit/485930a#commitcomment-8768047\n\t\t// for the reasoning behind the timeout and revocation flow\n\t\t, arbitrary_revoke_timeout = 500 // in ms\n\t\t, revoke = function(file) {\n\t\t\tvar revoker = function() {\n\t\t\t\tif (typeof file === \"string\") { // file is an object URL\n\t\t\t\t\tget_URL().revokeObjectURL(file);\n\t\t\t\t} else { // file is a File\n\t\t\t\t\tfile.remove();\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (view.chrome) {\n\t\t\t\trevoker();\n\t\t\t} else {\n\t\t\t\tsetTimeout(revoker, arbitrary_revoke_timeout);\n\t\t\t}\n\t\t}\n\t\t, dispatch = function(filesaver, event_types, event) {\n\t\t\tevent_types = [].concat(event_types);\n\t\t\tvar i = event_types.length;\n\t\t\twhile (i--) {\n\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];\n\t\t\t\tif (typeof listener === \"function\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tthrow_outside(ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t, auto_bom = function(blob) {\n\t\t\t// prepend BOM for UTF-8 XML and text/* types (including HTML)\n\t\t\tif (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n\t\t\t\treturn new Blob([\"\\ufeff\", blob], {type: blob.type});\n\t\t\t}\n\t\t\treturn blob;\n\t\t}\n\t\t, FileSaver = function(blob, name, no_auto_bom) {\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\t// First try a.download, then web filesystem, then object URLs\n\t\t\tvar\n\t\t\t\t  filesaver = this\n\t\t\t\t, type = blob.type\n\t\t\t\t, blob_changed = false\n\t\t\t\t, object_url\n\t\t\t\t, target_view\n\t\t\t\t, dispatch_all = function() {\n\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n\t\t\t\t}\n\t\t\t\t// on any filesys errors revert to saving with object URLs\n\t\t\t\t, fs_error = function() {\n\t\t\t\t\tif (target_view && is_safari && typeof FileReader !== \"undefined\") {\n\t\t\t\t\t\t// Safari doesn't allow downloading of blob urls\n\t\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\t\treader.onloadend = function() {\n\t\t\t\t\t\t\tvar base64Data = reader.result;\n\t\t\t\t\t\t\ttarget_view.location.href = \"data:attachment/file\" + base64Data.slice(base64Data.search(/[,;]/));\n\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\tdispatch_all();\n\t\t\t\t\t\t};\n\t\t\t\t\t\treader.readAsDataURL(blob);\n\t\t\t\t\t\tfilesaver.readyState = filesaver.INIT;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// don't create more object URLs than needed\n\t\t\t\t\tif (blob_changed || !object_url) {\n\t\t\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\t\t}\n\t\t\t\t\tif (target_view) {\n\t\t\t\t\t\ttarget_view.location.href = object_url;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar new_tab = view.open(object_url, \"_blank\");\n\t\t\t\t\t\tif (new_tab == undefined && is_safari) {\n\t\t\t\t\t\t\t//Apple do not allow window.open, see http://bit.ly/1kZffRI\n\t\t\t\t\t\t\tview.location.href = object_url\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t}\n\t\t\t\t, abortable = function(func) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif (filesaver.readyState !== filesaver.DONE) {\n\t\t\t\t\t\t\treturn func.apply(this, arguments);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t, create_if_not_found = {create: true, exclusive: false}\n\t\t\t\t, slice\n\t\t\t;\n\t\t\tfilesaver.readyState = filesaver.INIT;\n\t\t\tif (!name) {\n\t\t\t\tname = \"download\";\n\t\t\t}\n\t\t\tif (can_use_save_link) {\n\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tsave_link.href = object_url;\n\t\t\t\t\tsave_link.download = name;\n\t\t\t\t\tclick(save_link);\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Object and web filesystem URLs have a problem saving in Google Chrome when\n\t\t\t// viewed in a tab, so I force save with application/octet-stream\n\t\t\t// http://code.google.com/p/chromium/issues/detail?id=91158\n\t\t\t// Update: Google errantly closed 91158, I submitted it again:\n\t\t\t// https://code.google.com/p/chromium/issues/detail?id=389642\n\t\t\tif (view.chrome && type && type !== force_saveable_type) {\n\t\t\t\tslice = blob.slice || blob.webkitSlice;\n\t\t\t\tblob = slice.call(blob, 0, blob.size, force_saveable_type);\n\t\t\t\tblob_changed = true;\n\t\t\t}\n\t\t\t// Since I can't be sure that the guessed media type will trigger a download\n\t\t\t// in WebKit, I append .download to the filename.\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=65440\n\t\t\tif (webkit_req_fs && name !== \"download\") {\n\t\t\t\tname += \".download\";\n\t\t\t}\n\t\t\tif (type === force_saveable_type || webkit_req_fs) {\n\t\t\t\ttarget_view = view;\n\t\t\t}\n\t\t\tif (!req_fs) {\n\t\t\t\tfs_error();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfs_min_size += blob.size;\n\t\t\treq_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {\n\t\t\t\tfs.root.getDirectory(\"saved\", create_if_not_found, abortable(function(dir) {\n\t\t\t\t\tvar save = function() {\n\t\t\t\t\t\tdir.getFile(name, create_if_not_found, abortable(function(file) {\n\t\t\t\t\t\t\tfile.createWriter(abortable(function(writer) {\n\t\t\t\t\t\t\t\twriter.onwriteend = function(event) {\n\t\t\t\t\t\t\t\t\ttarget_view.location.href = file.toURL();\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\t\tdispatch(filesaver, \"writeend\", event);\n\t\t\t\t\t\t\t\t\trevoke(file);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\twriter.onerror = function() {\n\t\t\t\t\t\t\t\t\tvar error = writer.error;\n\t\t\t\t\t\t\t\t\tif (error.code !== error.ABORT_ERR) {\n\t\t\t\t\t\t\t\t\t\tfs_error();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\"writestart progress write abort\".split(\" \").forEach(function(event) {\n\t\t\t\t\t\t\t\t\twriter[\"on\" + event] = filesaver[\"on\" + event];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\twriter.write(blob);\n\t\t\t\t\t\t\t\tfilesaver.abort = function() {\n\t\t\t\t\t\t\t\t\twriter.abort();\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.WRITING;\n\t\t\t\t\t\t\t}), fs_error);\n\t\t\t\t\t\t}), fs_error);\n\t\t\t\t\t};\n\t\t\t\t\tdir.getFile(name, {create: false}, abortable(function(file) {\n\t\t\t\t\t\t// delete file if it already exists\n\t\t\t\t\t\tfile.remove();\n\t\t\t\t\t\tsave();\n\t\t\t\t\t}), abortable(function(ex) {\n\t\t\t\t\t\tif (ex.code === ex.NOT_FOUND_ERR) {\n\t\t\t\t\t\t\tsave();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfs_error();\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}), fs_error);\n\t\t\t}), fs_error);\n\t\t}\n\t\t, FS_proto = FileSaver.prototype\n\t\t, saveAs = function(blob, name, no_auto_bom) {\n\t\t\treturn new FileSaver(blob, name, no_auto_bom);\n\t\t}\n\t;\n\t// IE 10+ (native saveAs)\n\tif (typeof navigator !== \"undefined\" && navigator.msSaveOrOpenBlob) {\n\t\treturn function(blob, name, no_auto_bom) {\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\treturn navigator.msSaveOrOpenBlob(blob, name || \"download\");\n\t\t};\n\t}\n\n\tFS_proto.abort = function() {\n\t\tvar filesaver = this;\n\t\tfilesaver.readyState = filesaver.DONE;\n\t\tdispatch(filesaver, \"abort\");\n\t};\n\tFS_proto.readyState = FS_proto.INIT = 0;\n\tFS_proto.WRITING = 1;\n\tFS_proto.DONE = 2;\n\n\tFS_proto.error =\n\tFS_proto.onwritestart =\n\tFS_proto.onprogress =\n\tFS_proto.onwrite =\n\tFS_proto.onabort =\n\tFS_proto.onerror =\n\tFS_proto.onwriteend =\n\t\tnull;\n\n\treturn saveAs;\n}(\n\t   typeof self !== \"undefined\" && self\n\t|| typeof window !== \"undefined\" && window\n\t|| this.content\n));\n// `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports.saveAs = saveAs;\n} else if ((typeof define !== \"undefined\" && define !== null) && (define.amd != null)) {\n  define([], function() {\n    return saveAs;\n  });\n}",
      "mode": "100644",
      "type": "blob"
    },
    "lib/midifile.js": {
      "path": "lib/midifile.js",
      "content": "// https://github.com/gasman/jasmid/blob/master/midifile.js\nvar Stream = require('./stream')\n\n/*\nclass to parse the .mid file format\n(depends on stream.js)\n*/\nmodule.exports = function MidiFile (data) {\n  function readChunk (stream) {\n    var id = stream.read(4)\n    var length = stream.readInt32()\n    return {\n      'id': id,\n      'length': length,\n      'data': stream.subarray(length)\n    }\n  }\n\n  var lastEventTypeByte\n\n  stream = Stream(data)\n  var headerChunk = readChunk(stream)\n  if (headerChunk.id != 'MThd' || headerChunk.length != 6) {\n    throw 'Bad .mid file - header not found'\n  }\n  var headerStream = Stream(headerChunk.data)\n  var formatType = headerStream.readInt16()\n  var trackCount = headerStream.readInt16()\n  var timeDivision = headerStream.readInt16()\n\n  if (timeDivision & 0x8000) {\n    throw 'Expressing time division in SMTPE frames is not supported yet'\n  } else {\n    ticksPerBeat = timeDivision\n  }\n\n  var header = {\n    'formatType': formatType,\n    'trackCount': trackCount,\n    'ticksPerBeat': ticksPerBeat\n  }\n  var tracks = []\n  for (var i = 0; i < header.trackCount; i++) {\n    tracks[i] = []\n    var trackChunk = readChunk(stream)\n    if (trackChunk.id != 'MTrk') {\n      throw 'Unexpected chunk - expected MTrk, got ' + trackChunk.id\n    }\n    var trackStream = Stream(trackChunk.data)\n    while (!trackStream.eof()) {\n      var event = readEvent(trackStream)\n      tracks[i].push(event)\n    // console.log(event)\n    }\n  }\n\n  return {\n    'header': header,\n    'tracks': tracks\n  }\n}\n\nfunction readEvent (stream, skipTime) {\n  var event = {}\n  if (!skipTime) {\n    event.deltaTime = stream.readVarInt()\n  }\n\n  var eventTypeByte = stream.readInt8()\n  if ((eventTypeByte & 0xf0) == 0xf0) {\n    /* system / meta event */\n    if (eventTypeByte == 0xff) {\n      /* meta event */\n      event.type = 'meta'\n      var subtypeByte = stream.readInt8()\n      var length = stream.readVarInt()\n      switch (subtypeByte) {\n        case 0x00:\n          event.subtype = 'sequenceNumber'\n          if (length != 2) throw 'Expected length for sequenceNumber event is 2, got ' + length\n          event.number = stream.readInt16()\n          return event\n        case 0x01:\n          event.subtype = 'text'\n          event.text = stream.read(length)\n          return event\n        case 0x02:\n          event.subtype = 'copyrightNotice'\n          event.text = stream.read(length)\n          return event\n        case 0x03:\n          event.subtype = 'trackName'\n          event.text = stream.read(length)\n          return event\n        case 0x04:\n          event.subtype = 'instrumentName'\n          event.text = stream.read(length)\n          return event\n        case 0x05:\n          event.subtype = 'lyrics'\n          event.text = stream.read(length)\n          return event\n        case 0x06:\n          event.subtype = 'marker'\n          event.text = stream.read(length)\n          return event\n        case 0x07:\n          event.subtype = 'cuePoint'\n          event.text = stream.read(length)\n          return event\n        case 0x20:\n          event.subtype = 'midiChannelPrefix'\n          if (length != 1) throw 'Expected length for midiChannelPrefix event is 1, got ' + length\n          event.channel = stream.readInt8()\n          return event\n        case 0x2f:\n          event.subtype = 'endOfTrack'\n          if (length !== 0) throw 'Expected length for endOfTrack event is 0, got ' + length\n          return event\n        case 0x51:\n          event.subtype = 'setTempo'\n          if (length != 3) throw 'Expected length for setTempo event is 3, got ' + length\n          event.microsecondsPerBeat = (\n            (stream.readInt8() << 16)\n            + (stream.readInt8() << 8)\n            + stream.readInt8()\n          )\n          return event\n        case 0x54:\n          event.subtype = 'smpteOffset'\n          if (length != 5) throw 'Expected length for smpteOffset event is 5, got ' + length\n          var hourByte = stream.readInt8()\n          event.frameRate = {\n            0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\n          }[hourByte & 0x60]\n          event.hour = hourByte & 0x1f\n          event.min = stream.readInt8()\n          event.sec = stream.readInt8()\n          event.frame = stream.readInt8()\n          event.subframe = stream.readInt8()\n          return event\n        case 0x58:\n          event.subtype = 'timeSignature'\n          if (length != 4) throw 'Expected length for timeSignature event is 4, got ' + length\n          event.numerator = stream.readInt8()\n          event.denominator = Math.pow(2, stream.readInt8())\n          event.metronome = stream.readInt8()\n          event.thirtyseconds = stream.readInt8()\n          return event\n        case 0x59:\n          event.subtype = 'keySignature'\n          if (length != 2) throw 'Expected length for keySignature event is 2, got ' + length\n          event.key = stream.readInt8(true)\n          event.scale = stream.readInt8()\n          return event\n        case 0x7f:\n          event.subtype = 'sequencerSpecific'\n          event.data = stream.subarray(length)\n          return event\n        default:\n          // console.log(\"Unrecognised meta event subtype: \" + subtypeByte)\n          event.subtype = 'unknown'\n          event.data = stream.subarray(length)\n          return event\n      }\n      event.data = stream.subarray(length)\n      return event\n    } else if (eventTypeByte == 0xf0) {\n      event.type = 'sysEx'\n      var length = stream.readVarInt()\n      event.data = stream.subarray(length)\n      return event\n    } else if (eventTypeByte == 0xf7) {\n      event.type = 'dividedSysEx'\n      var length = stream.readVarInt()\n      event.data = stream.subarray(length)\n      return event\n    } else {\n      throw 'Unrecognised MIDI event type byte: ' + eventTypeByte\n    }\n  } else {\n    /* channel event */\n    var param1\n    if ((eventTypeByte & 0x80) == 0) {\n      /* running status - reuse lastEventTypeByte as the event type.\n      \teventTypeByte is actually the first parameter\n      */\n      param1 = eventTypeByte\n      eventTypeByte = lastEventTypeByte\n    } else {\n      param1 = stream.readInt8()\n      lastEventTypeByte = eventTypeByte\n    }\n    var eventType = eventTypeByte >> 4\n    event.channel = eventTypeByte & 0x0f\n    event.type = 'channel'\n    switch (eventType) {\n      case 0x08:\n        event.subtype = 'noteOff'\n        event.noteNumber = param1\n        event.velocity = stream.readInt8()\n        return event\n      case 0x09:\n        event.noteNumber = param1\n        event.velocity = stream.readInt8()\n        if (event.velocity == 0) {\n          event.subtype = 'noteOff'\n        } else {\n          event.subtype = 'noteOn'\n        }\n        return event\n      case 0x0a:\n        event.subtype = 'noteAftertouch'\n        event.noteNumber = param1\n        event.amount = stream.readInt8()\n        return event\n      case 0x0b:\n        event.subtype = 'controller'\n        event.controllerType = param1\n        event.value = stream.readInt8()\n        return event\n      case 0x0c:\n        event.subtype = 'programChange'\n        event.programNumber = param1\n        return event\n      case 0x0d:\n        event.subtype = 'channelAftertouch'\n        event.amount = param1\n        return event\n      case 0x0e:\n        event.subtype = 'pitchBend'\n        event.value = param1 + (stream.readInt8() << 7)\n        return event\n      default:\n        throw 'Unrecognised MIDI event type: ' + eventType\n    /*\n    console.log(\"Unrecognised MIDI event type: \" + eventType)\n    stream.readInt8()\n    event.subtype = 'unknown'\n    return event\n    */\n    }\n  }\n}\n\nmodule.exports.readEvent = readEvent\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/read_file.coffee": {
      "path": "lib/read_file.coffee",
      "content": "module.exports = (file, method=\"readAsText\") ->\n  return new Promise (resolve, reject) ->\n    reader = new FileReader()\n\n    reader.onloadend = ->\n      resolve(reader.result)\n    reader.onerror = reject\n    reader[method](file)\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/recorder.js": {
      "path": "lib/recorder.js",
      "content": "(function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n        module.exports = f()\n    } else if (typeof define === \"function\" && define.amd) {\n        define([], f)\n    } else {\n        var g;\n        if (typeof window !== \"undefined\") {\n            g = window\n        } else if (typeof global !== \"undefined\") {\n            g = global\n        } else if (typeof self !== \"undefined\") {\n            g = self\n        } else {\n            g = this\n        }\n        g.Recorder = f()\n    }\n})(function () {\n    var define, module, exports;\n    return (function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;\n                    if (!u && a)return a(o, !0);\n                    if (i)return i(o, !0);\n                    var f = new Error(\"Cannot find module '\" + o + \"'\");\n                    throw f.code = \"MODULE_NOT_FOUND\", f\n                }\n                var l = n[o] = {exports: {}};\n                t[o][0].call(l.exports, function (e) {\n                    var n = t[o][1][e];\n                    return s(n ? n : e)\n                }, l, l.exports, e, t, n, r)\n            }\n            return n[o].exports\n        }\n\n        var i = typeof require == \"function\" && require;\n        for (var o = 0; o < r.length; o++)s(r[o]);\n        return s\n    })({\n        1: [function (require, module, exports) {\n            \"use strict\";\n\n            module.exports = require(\"./recorder\").Recorder;\n\n        }, {\"./recorder\": 2}], 2: [function (require, module, exports) {\n            'use strict';\n\n            var _createClass = (function () {\n                function defineProperties(target, props) {\n                    for (var i = 0; i < props.length; i++) {\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n\n                return function (Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            })();\n\n            Object.defineProperty(exports, \"__esModule\", {\n                value: true\n            });\n            exports.Recorder = undefined;\n\n            var _inlineWorker = require('inline-worker');\n\n            var _inlineWorker2 = _interopRequireDefault(_inlineWorker);\n\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {default: obj};\n            }\n\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n\n            var Recorder = exports.Recorder = (function () {\n                function Recorder(source, cfg) {\n                    var _this = this;\n\n                    _classCallCheck(this, Recorder);\n\n                    this.config = {\n                        bufferLen: 4096,\n                        numChannels: 2,\n                        mimeType: 'audio/wav'\n                    };\n                    this.recording = false;\n                    this.callbacks = {\n                        getBuffer: [],\n                        exportWAV: []\n                    };\n\n                    Object.assign(this.config, cfg);\n                    this.context = source.context;\n                    this.node = (this.context.createScriptProcessor || this.context.createJavaScriptNode).call(this.context, this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n\n                    this.node.onaudioprocess = function (e) {\n                        if (!_this.recording) return;\n\n                        var buffer = [];\n                        for (var channel = 0; channel < _this.config.numChannels; channel++) {\n                            buffer.push(e.inputBuffer.getChannelData(channel));\n                        }\n                        _this.worker.postMessage({\n                            command: 'record',\n                            buffer: buffer\n                        });\n                    };\n\n                    source.connect(this.node);\n                    this.node.connect(this.context.destination); //this should not be necessary\n\n                    var self = {};\n                    this.worker = new _inlineWorker2.default(function () {\n                        var recLength = 0,\n                            recBuffers = [],\n                            sampleRate = undefined,\n                            numChannels = undefined;\n\n                        self.onmessage = function (e) {\n                            switch (e.data.command) {\n                                case 'init':\n                                    init(e.data.config);\n                                    break;\n                                case 'record':\n                                    record(e.data.buffer);\n                                    break;\n                                case 'exportWAV':\n                                    exportWAV(e.data.type);\n                                    break;\n                                case 'getBuffer':\n                                    getBuffer();\n                                    break;\n                                case 'clear':\n                                    clear();\n                                    break;\n                            }\n                        };\n\n                        function init(config) {\n                            sampleRate = config.sampleRate;\n                            numChannels = config.numChannels;\n                            initBuffers();\n                        }\n\n                        function record(inputBuffer) {\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                recBuffers[channel].push(inputBuffer[channel]);\n                            }\n                            recLength += inputBuffer[0].length;\n                        }\n\n                        function exportWAV(type) {\n                            var buffers = [];\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                buffers.push(mergeBuffers(recBuffers[channel], recLength));\n                            }\n                            var interleaved = undefined;\n                            if (numChannels === 2) {\n                                interleaved = interleave(buffers[0], buffers[1]);\n                            } else {\n                                interleaved = buffers[0];\n                            }\n                            var dataview = encodeWAV(interleaved);\n                            var audioBlob = new Blob([dataview], {type: type});\n\n                            self.postMessage({command: 'exportWAV', data: audioBlob});\n                        }\n\n                        function getBuffer() {\n                            var buffers = [];\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                buffers.push(mergeBuffers(recBuffers[channel], recLength));\n                            }\n                            self.postMessage({command: 'getBuffer', data: buffers});\n                        }\n\n                        function clear() {\n                            recLength = 0;\n                            recBuffers = [];\n                            initBuffers();\n                        }\n\n                        function initBuffers() {\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                recBuffers[channel] = [];\n                            }\n                        }\n\n                        function mergeBuffers(recBuffers, recLength) {\n                            var result = new Float32Array(recLength);\n                            var offset = 0;\n                            for (var i = 0; i < recBuffers.length; i++) {\n                                result.set(recBuffers[i], offset);\n                                offset += recBuffers[i].length;\n                            }\n                            return result;\n                        }\n\n                        function interleave(inputL, inputR) {\n                            var length = inputL.length + inputR.length;\n                            var result = new Float32Array(length);\n\n                            var index = 0,\n                                inputIndex = 0;\n\n                            while (index < length) {\n                                result[index++] = inputL[inputIndex];\n                                result[index++] = inputR[inputIndex];\n                                inputIndex++;\n                            }\n                            return result;\n                        }\n\n                        function floatTo16BitPCM(output, offset, input) {\n                            for (var i = 0; i < input.length; i++, offset += 2) {\n                                var s = Math.max(-1, Math.min(1, input[i]));\n                                output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n                            }\n                        }\n\n                        function writeString(view, offset, string) {\n                            for (var i = 0; i < string.length; i++) {\n                                view.setUint8(offset + i, string.charCodeAt(i));\n                            }\n                        }\n\n                        function encodeWAV(samples) {\n                            var buffer = new ArrayBuffer(44 + samples.length * 2);\n                            var view = new DataView(buffer);\n\n                            /* RIFF identifier */\n                            writeString(view, 0, 'RIFF');\n                            /* RIFF chunk length */\n                            view.setUint32(4, 36 + samples.length * 2, true);\n                            /* RIFF type */\n                            writeString(view, 8, 'WAVE');\n                            /* format chunk identifier */\n                            writeString(view, 12, 'fmt ');\n                            /* format chunk length */\n                            view.setUint32(16, 16, true);\n                            /* sample format (raw) */\n                            view.setUint16(20, 1, true);\n                            /* channel count */\n                            view.setUint16(22, numChannels, true);\n                            /* sample rate */\n                            view.setUint32(24, sampleRate, true);\n                            /* byte rate (sample rate * block align) */\n                            view.setUint32(28, sampleRate * 4, true);\n                            /* block align (channel count * bytes per sample) */\n                            view.setUint16(32, numChannels * 2, true);\n                            /* bits per sample */\n                            view.setUint16(34, 16, true);\n                            /* data chunk identifier */\n                            writeString(view, 36, 'data');\n                            /* data chunk length */\n                            view.setUint32(40, samples.length * 2, true);\n\n                            floatTo16BitPCM(view, 44, samples);\n\n                            return view;\n                        }\n                    }, self);\n\n                    this.worker.postMessage({\n                        command: 'init',\n                        config: {\n                            sampleRate: this.context.sampleRate,\n                            numChannels: this.config.numChannels\n                        }\n                    });\n\n                    this.worker.onmessage = function (e) {\n                        var cb = _this.callbacks[e.data.command].pop();\n                        if (typeof cb == 'function') {\n                            cb(e.data.data);\n                        }\n                    };\n                }\n\n                _createClass(Recorder, [{\n                    key: 'record',\n                    value: function record() {\n                        this.recording = true;\n                    }\n                }, {\n                    key: 'stop',\n                    value: function stop() {\n                        this.recording = false;\n                    }\n                }, {\n                    key: 'clear',\n                    value: function clear() {\n                        this.worker.postMessage({command: 'clear'});\n                    }\n                }, {\n                    key: 'getBuffer',\n                    value: function getBuffer(cb) {\n                        cb = cb || this.config.callback;\n                        if (!cb) throw new Error('Callback not set');\n\n                        this.callbacks.getBuffer.push(cb);\n\n                        this.worker.postMessage({command: 'getBuffer'});\n                    }\n                }, {\n                    key: 'exportWAV',\n                    value: function exportWAV(cb, mimeType) {\n                        mimeType = mimeType || this.config.mimeType;\n                        cb = cb || this.config.callback;\n                        if (!cb) throw new Error('Callback not set');\n\n                        this.callbacks.exportWAV.push(cb);\n\n                        this.worker.postMessage({\n                            command: 'exportWAV',\n                            type: mimeType\n                        });\n                    }\n                }], [{\n                    key: 'forceDownload',\n                    value: function forceDownload() {\n                        var url = (window.URL || window.webkitURL).createObjectURL(blob);\n                        var link = window.document.createElement('a');\n                        link.href = url;\n                        link.download = filename || 'output.wav';\n                        var click = document.createEvent(\"Event\");\n                        click.initEvent(\"click\", true, true);\n                        link.dispatchEvent(click);\n                    }\n                }]);\n\n                return Recorder;\n            })();\n\n            exports.default = Recorder;\n\n        }, {\"inline-worker\": 3}], 3: [function (require, module, exports) {\n            \"use strict\";\n\n            module.exports = require(\"./inline-worker\");\n        }, {\"./inline-worker\": 4}], 4: [function (require, module, exports) {\n            (function (global) {\n                \"use strict\";\n\n                var _createClass = (function () {\n                    function defineProperties(target, props) {\n                        for (var key in props) {\n                            var prop = props[key];\n                            prop.configurable = true;\n                            if (prop.value) prop.writable = true;\n                        }\n                        Object.defineProperties(target, props);\n                    }\n\n                    return function (Constructor, protoProps, staticProps) {\n                        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                        if (staticProps) defineProperties(Constructor, staticProps);\n                        return Constructor;\n                    };\n                })();\n\n                var _classCallCheck = function (instance, Constructor) {\n                    if (!(instance instanceof Constructor)) {\n                        throw new TypeError(\"Cannot call a class as a function\");\n                    }\n                };\n\n                var WORKER_ENABLED = !!(global === global.window && global.URL && global.Blob && global.Worker);\n\n                var InlineWorker = (function () {\n                    function InlineWorker(func, self) {\n                        var _this = this;\n\n                        _classCallCheck(this, InlineWorker);\n\n                        if (WORKER_ENABLED) {\n                            var functionBody = func.toString().trim().match(/^function\\s*\\w*\\s*\\([\\w\\s,]*\\)\\s*{([\\w\\W]*?)}$/)[1];\n                            var url = global.URL.createObjectURL(new global.Blob([functionBody], {type: \"text/javascript\"}));\n\n                            return new global.Worker(url);\n                        }\n\n                        this.self = self;\n                        this.self.postMessage = function (data) {\n                            setTimeout(function () {\n                                _this.onmessage({data: data});\n                            }, 0);\n                        };\n\n                        setTimeout(function () {\n                            func.call(self);\n                        }, 0);\n                    }\n\n                    _createClass(InlineWorker, {\n                        postMessage: {\n                            value: function postMessage(data) {\n                                var _this = this;\n\n                                setTimeout(function () {\n                                    _this.self.onmessage({data: data});\n                                }, 0);\n                            }\n                        }\n                    });\n\n                    return InlineWorker;\n                })();\n\n                module.exports = InlineWorker;\n            }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n        }, {}]\n    }, {}, [1])(1)\n});\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/sf2_parser.js": {
      "path": "lib/sf2_parser.js",
      "content": "/*! JavaScript SoundFont 2 Parser. Copyright 2013-2015 imaya/GREE Inc and Colin Clark. Licensed under the MIT License. */\n// https://github.com/colinbdclark/sf2-parser\n/*\n * JavaScript SoundFont 2 Parser\n *\n * Copyright 2013 imaya/GREE Inc\n * Copyright 2015 Colin Clark\n *\n * Based on code from the \"SoundFont Synthesizer for WebMidiLink\"\n *   https://github.com/gree/sf2synth.js\n *\n * Licensed under the MIT License.\n */\n\n/*global require*/\n\n(function (root, factory) {\n    if (typeof exports === \"object\") {\n        // We're in a CommonJS-style loader.\n        root.sf2 = exports;\n        factory(exports);\n    } else if (typeof define === \"function\" && define.amd) {\n        // We're in an AMD-style loader.\n        define([\"exports\"], function (exports) {\n            root.sf2 = exports;\n            return (root.sf2, factory(exports));\n        });\n    } else {\n        // Plain old browser.\n        root.sf2 = {};\n        factory(root.sf2);\n    }\n}(this, function (exports) {\n    \"use strict\";\n\n    var sf2 = exports;\n\n    sf2.Parser = function (input, options) {\n      options = options || {};\n      /** @type {ByteArray} */\n      this.input = input;\n      /** @type {(Object|undefined)} */\n      this.parserOptions = options.parserOptions;\n\n      /** @type {Array.<Object>} */\n      // this.presetHeader;\n      /** @type {Array.<Object>} */\n      // this.presetZone;\n      /** @type {Array.<Object>} */\n      // this.presetZoneModulator;\n      /** @type {Array.<Object>} */\n      // this.presetZoneGenerator;\n      /** @type {Array.<Object>} */\n      // this.instrument;\n      /** @type {Array.<Object>} */\n      // this.instrumentZone;\n      /** @type {Array.<Object>} */\n      // this.instrumentZoneModulator;\n      /** @type {Array.<Object>} */\n      // this.instrumentZoneGenerator;\n      /** @type {Array.<Object>} */\n      //this.sampleHeader;\n    };\n\n    sf2.Parser.prototype.parse = function () {\n      /** @type {sf2.Riff.Parser} */\n      var parser = new sf2.Riff.Parser(this.input, this.parserOptions);\n      /** @type {?sf2.Riff.Chunk} */\n      var chunk;\n\n      // parse RIFF chunk\n      parser.parse();\n      if (parser.chunkList.length !== 1) {\n        throw new Error('wrong chunk length');\n      }\n\n      chunk = parser.getChunk(0);\n      if (chunk === null) {\n        throw new Error('chunk not found');\n      }\n\n      this.parseRiffChunk(chunk);\n\n      // TODO: Presumably this is here to reduce memory,\n      // but does it really matter? Shouldn't we always be\n      // referencing the underlying ArrayBuffer and thus\n      // it will persist, in which case why delete it?\n      this.input = null;\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseRiffChunk = function (chunk) {\n      /** @type {sf2.Riff.Parser} */\n      var parser;\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {string} */\n      var signature;\n\n      // check parse target\n      if (chunk.type !== 'RIFF') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      // check signature\n      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\n      if (signature !== 'sfbk') {\n        throw new Error('invalid signature:' + signature);\n      }\n\n      // read structure\n      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});\n      parser.parse();\n      if (parser.getNumberOfChunks() !== 3) {\n        throw new Error('invalid sfbk structure');\n      }\n\n      // INFO-list\n      this.parseInfoList(/** @type {!sf2.Riff.Chunk} */(parser.getChunk(0)));\n\n      // sdta-list\n      this.parseSdtaList(/** @type {!sf2.Riff.Chunk} */(parser.getChunk(1)));\n\n      // pdta-list\n      this.parsePdtaList(/** @type {!sf2.Riff.Chunk} */(parser.getChunk(2)));\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseInfoList = function (chunk) {\n      /** @type {sf2.Riff.Parser} */\n      var parser;\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {string} */\n      var signature;\n\n      // check parse target\n      if (chunk.type !== 'LIST') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      // check signature\n      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\n      if (signature !== 'INFO') {\n        throw new Error('invalid signature:' + signature);\n      }\n\n      // read structure\n      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});\n      parser.parse();\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseSdtaList = function (chunk) {\n      /** @type {sf2.Riff.Parser} */\n      var parser;\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {string} */\n      var signature;\n\n      // check parse target\n      if (chunk.type !== 'LIST') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      // check signature\n      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\n      if (signature !== 'sdta') {\n        throw new Error('invalid signature:' + signature);\n      }\n\n      // read structure\n      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});\n      parser.parse();\n      if (parser.chunkList.length !== 1) {\n        throw new Error('TODO');\n      }\n      this.samplingData =\n        /** @type {{type: string, size: number, offset: number}} */\n        (parser.getChunk(0));\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePdtaList = function (chunk) {\n      /** @type {sf2.Riff.Parser} */\n      var parser;\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {string} */\n      var signature;\n\n      // check parse target\n      if (chunk.type !== 'LIST') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      // check signature\n      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\n      if (signature !== 'pdta') {\n        throw new Error('invalid signature:' + signature);\n      }\n\n      // read structure\n      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});\n      parser.parse();\n\n      // check number of chunks\n      if (parser.getNumberOfChunks() !== 9) {\n        throw new Error('invalid pdta chunk');\n      }\n\n      this.parsePhdr(/** @type {sf2.Riff.Chunk} */(parser.getChunk(0)));\n      this.parsePbag(/** @type {sf2.Riff.Chunk} */(parser.getChunk(1)));\n      this.parsePmod(/** @type {sf2.Riff.Chunk} */(parser.getChunk(2)));\n      this.parsePgen(/** @type {sf2.Riff.Chunk} */(parser.getChunk(3)));\n      this.parseInst(/** @type {sf2.Riff.Chunk} */(parser.getChunk(4)));\n      this.parseIbag(/** @type {sf2.Riff.Chunk} */(parser.getChunk(5)));\n      this.parseImod(/** @type {sf2.Riff.Chunk} */(parser.getChunk(6)));\n      this.parseIgen(/** @type {sf2.Riff.Chunk} */(parser.getChunk(7)));\n      this.parseShdr(/** @type {sf2.Riff.Chunk} */(parser.getChunk(8)));\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePhdr = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var presetHeader = this.presetHeader = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n\n      // check parse target\n      if (chunk.type !== 'phdr') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      while (ip < size) {\n        presetHeader.push({\n          presetName: String.fromCharCode.apply(null, data.subarray(ip, ip += 20)),\n          preset: data[ip++] | (data[ip++] << 8),\n          bank: data[ip++] | (data[ip++] << 8),\n          presetBagIndex: data[ip++] | (data[ip++] << 8),\n          library: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0,\n          genre: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0,\n          morphology: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0\n        });\n      }\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePbag = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var presetZone = this.presetZone = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n\n      // check parse target\n      if (chunk.type !== 'pbag') {\n        throw new Error('invalid chunk type:'  + chunk.type);\n      }\n\n      while (ip < size) {\n        presetZone.push({\n          presetGeneratorIndex: data[ip++] | (data[ip++] << 8),\n          presetModulatorIndex: data[ip++] | (data[ip++] << 8)\n        });\n      }\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePmod = function (chunk) {\n      // check parse target\n      if (chunk.type !== 'pmod') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      this.presetZoneModulator = this.parseModulator(chunk);\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePgen = function (chunk) {\n      // check parse target\n      if (chunk.type !== 'pgen') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n      this.presetZoneGenerator = this.parseGenerator(chunk);\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseInst = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var instrument = this.instrument = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n\n      // check parse target\n      if (chunk.type !== 'inst') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      while (ip < size) {\n        instrument.push({\n          instrumentName: String.fromCharCode.apply(null, data.subarray(ip, ip += 20)),\n          instrumentBagIndex: data[ip++] | (data[ip++] << 8)\n        });\n      }\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseIbag = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var instrumentZone = this.instrumentZone = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n\n      // check parse target\n      if (chunk.type !== 'ibag') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n\n      while (ip < size) {\n        instrumentZone.push({\n          instrumentGeneratorIndex: data[ip++] | (data[ip++] << 8),\n          instrumentModulatorIndex: data[ip++] | (data[ip++] << 8)\n        });\n      }\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseImod = function (chunk) {\n      // check parse target\n      if (chunk.type !== 'imod') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      this.instrumentZoneModulator = this.parseModulator(chunk);\n    };\n\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseIgen = function (chunk) {\n      // check parse target\n      if (chunk.type !== 'igen') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      this.instrumentZoneGenerator = this.parseGenerator(chunk);\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseShdr = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var samples = this.sample = [];\n      /** @type {Array.<Object>} */\n      var sampleHeader = this.sampleHeader = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n      /** @type {string} */\n      var sampleName;\n      /** @type {number} */\n      var start;\n      /** @type {number} */\n      var end;\n      /** @type {number} */\n      var startLoop;\n      /** @type {number} */\n      var endLoop;\n      /** @type {number} */\n      var sampleRate;\n      /** @type {number} */\n      var originalPitch;\n      /** @type {number} */\n      var pitchCorrection;\n      /** @type {number} */\n      var sampleLink;\n      /** @type {number} */\n      var sampleType;\n\n      // check parse target\n      if (chunk.type !== 'shdr') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      while (ip < size) {\n        sampleName = String.fromCharCode.apply(null, data.subarray(ip, ip += 20));\n        start = (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        end = (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        startLoop = (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        endLoop =  (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        sampleRate = (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        originalPitch = data[ip++];\n        pitchCorrection = (data[ip++] << 24) >> 24;\n        sampleLink = data[ip++] | (data[ip++] << 8);\n        sampleType = data[ip++] | (data[ip++] << 8);\n\n        var sample = new Int16Array(new Uint8Array(data.subarray(\n          this.samplingData.offset + start * 2,\n          this.samplingData.offset + end   * 2\n        )).buffer);\n\n        startLoop -= start;\n        endLoop -= start;\n\n        // if (sampleRate > 0) {\n        //   var adjust = this.adjustSampleData(sample, sampleRate);\n        //   sample = adjust.sample;\n        //   sampleRate *= adjust.multiply;\n        //   startLoop *= adjust.multiply;\n        //   endLoop *= adjust.multiply;\n        // }\n\n        samples.push(sample);\n\n        sampleHeader.push({\n          sampleName: sampleName,\n          start: start,\n          end: end,\n          startLoop: startLoop,\n          endLoop: endLoop,\n          sampleRate: sampleRate,\n          originalPitch: originalPitch,\n          pitchCorrection: pitchCorrection,\n          sampleLink: sampleLink,\n          sampleType: sampleType\n        });\n      }\n    };\n\n    // TODO: This function is questionable;\n    // it doesn't interpolate the sample data\n    // and always forces a sample rate of 22050 or higher. Why?\n    sf2.Parser.prototype.adjustSampleData = function (sample, sampleRate) {\n      /** @type {Int16Array} */\n      var newSample;\n      /** @type {number} */\n      var i;\n      /** @type {number} */\n      var il;\n      /** @type {number} */\n      var j;\n      /** @type {number} */\n      var multiply = 1;\n\n      // buffer\n      while (sampleRate < 22050) {\n        newSample = new Int16Array(sample.length * 2);\n        for (i = j = 0, il = sample.length; i < il; ++i) {\n          newSample[j++] = sample[i];\n          newSample[j++] = sample[i];\n        }\n        sample = newSample;\n        multiply *= 2;\n        sampleRate *= 2;\n      }\n\n      return {\n        sample: sample,\n        multiply: multiply\n      };\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     * @return {Array.<Object>}\n     */\n    sf2.Parser.prototype.parseModulator = function (chunk) {\n        /** @type {ByteArray} */\n        var data = this.input;\n        /** @type {number} */\n        var ip = chunk.offset;\n        /** @type {number} */\n        var size = chunk.offset + chunk.size;\n        /** @type {number} */\n        var code;\n        /** @type {string} */\n        var key;\n        /** @type {Array.<Object>} */\n        var output = [];\n\n        while (ip < size) {\n          // Src  Oper\n          // TODO\n          ip += 2;\n\n          // Dest Oper\n          code = data[ip++] | (data[ip++] << 8);\n          key = sf2.Parser.GeneratorEnumeratorTable[code];\n          if (key === undefined) {\n            // Amount\n            output.push({\n              type: key,\n              value: {\n                code: code,\n                amount: data[ip] | (data[ip+1] << 8) << 16 >> 16,\n                lo: data[ip++],\n                hi: data[ip++]\n              }\n            });\n          } else {\n            // Amount\n            switch (key) {\n              case 'keyRange': /* FALLTHROUGH */\n              case 'velRange': /* FALLTHROUGH */\n              case 'keynum': /* FALLTHROUGH */\n              case 'velocity':\n                output.push({\n                  type: key,\n                  value: {\n                    lo: data[ip++],\n                    hi: data[ip++]\n                  }\n                });\n                break;\n              default:\n                output.push({\n                  type: key,\n                  value: {\n                    amount: data[ip++] | (data[ip++] << 8) << 16 >> 16\n                  }\n                });\n                break;\n            }\n          }\n\n          // AmtSrcOper\n          // TODO\n          ip += 2;\n\n          // Trans Oper\n          // TODO\n          ip += 2;\n        }\n\n        return output;\n      };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     * @return {Array.<Object>}\n     */\n    sf2.Parser.prototype.parseGenerator = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n      /** @type {number} */\n      var code;\n      /** @type {string} */\n      var key;\n      /** @type {Array.<Object>} */\n      var output = [];\n\n      while (ip < size) {\n        code = data[ip++] | (data[ip++] << 8);\n        key = sf2.Parser.GeneratorEnumeratorTable[code];\n        if (key === undefined) {\n          output.push({\n            type: key,\n            value: {\n              code: code,\n              amount: data[ip] | (data[ip+1] << 8) << 16 >> 16,\n              lo: data[ip++],\n              hi: data[ip++]\n            }\n          });\n          continue;\n        }\n\n        switch (key) {\n          case 'keynum': /* FALLTHROUGH */\n          case 'keyRange': /* FALLTHROUGH */\n          case 'velRange': /* FALLTHROUGH */\n          case 'velocity':\n            output.push({\n              type: key,\n              value: {\n                lo: data[ip++],\n                hi: data[ip++]\n              }\n            });\n            break;\n          default:\n            output.push({\n              type: key,\n              value: {\n                amount: data[ip++] | (data[ip++] << 8) << 16 >> 16\n              }\n            });\n            break;\n        }\n      }\n\n      return output;\n    };\n\n    sf2.Parser.prototype.getInstruments = function () {\n      /** @type {Array.<Object>} */\n      var instrument = this.instrument;\n      /** @type {Array.<Object>} */\n      var zone = this.instrumentZone;\n      /** @type {Array.<Object>} */\n      var output = [];\n      /** @type {number} */\n      var bagIndex;\n      /** @type {number} */\n      var bagIndexEnd;\n      /** @type {Array.<Object>} */\n      var zoneInfo;\n      /** @type {{generator: Object, generatorInfo: Array.<Object>}} */\n      var instrumentGenerator;\n      /** @type {{modulator: Object, modulatorInfo: Array.<Object>}} */\n      var instrumentModulator;\n      /** @type {number} */\n      var i;\n      /** @type {number} */\n      var il;\n      /** @type {number} */\n      var j;\n      /** @type {number} */\n      var jl;\n\n      // instrument -> instrument bag -> generator / modulator\n      for (i = 0, il = instrument.length; i < il; ++i) {\n        bagIndex    = instrument[i].instrumentBagIndex;\n        bagIndexEnd = instrument[i+1] ? instrument[i+1].instrumentBagIndex : zone.length;\n        zoneInfo = [];\n\n        // instrument bag\n        for (j = bagIndex, jl = bagIndexEnd; j < jl; ++j) {\n          instrumentGenerator = this.createInstrumentGenerator_(zone, j);\n          instrumentModulator = this.createInstrumentModulator_(zone, j);\n\n          zoneInfo.push({\n            generator: instrumentGenerator.generator,\n            generatorSequence: instrumentGenerator.generatorInfo,\n            modulator: instrumentModulator.modulator,\n            modulatorSequence: instrumentModulator.modulatorInfo\n          });\n        }\n\n        output.push({\n          name: instrument[i].instrumentName,\n          info: zoneInfo\n        });\n      }\n\n      return output;\n    };\n\n    sf2.Parser.prototype.getPresets = function () {\n      /** @type {Array.<Object>} */\n      var preset   = this.presetHeader;\n      /** @type {Array.<Object>} */\n      var zone = this.presetZone;\n      /** @type {Array.<Object>} */\n      var output = [];\n      /** @type {number} */\n      var bagIndex;\n      /** @type {number} */\n      var bagIndexEnd;\n      /** @type {Array.<Object>} */\n      var zoneInfo;\n      /** @type {number} */\n      var instrument;\n      /** @type {{generator: Object, generatorInfo: Array.<Object>}} */\n      var presetGenerator;\n      /** @type {{modulator: Object, modulatorInfo: Array.<Object>}} */\n      var presetModulator;\n      /** @type {number} */\n      var i;\n      /** @type {number} */\n      var il;\n      /** @type {number} */\n      var j;\n      /** @type {number} */\n      var jl;\n\n      // preset -> preset bag -> generator / modulator\n      for (i = 0, il = preset.length; i < il; ++i) {\n        bagIndex    = preset[i].presetBagIndex;\n        bagIndexEnd = preset[i+1] ? preset[i+1].presetBagIndex : zone.length;\n        zoneInfo = [];\n\n        // preset bag\n        for (j = bagIndex, jl = bagIndexEnd; j < jl; ++j) {\n          presetGenerator = this.createPresetGenerator_(zone, j);\n          presetModulator = this.createPresetModulator_(zone, j);\n\n          zoneInfo.push({\n            generator: presetGenerator.generator,\n            generatorSequence: presetGenerator.generatorInfo,\n            modulator: presetModulator.modulator,\n            modulatorSequence: presetModulator.modulatorInfo\n          });\n\n          instrument =\n            presetGenerator.generator.instrument !== undefined ?\n              presetGenerator.generator.instrument.amount :\n            presetModulator.modulator.instrument !== undefined ?\n              presetModulator.modulator.instrument.amount :\n            null;\n        }\n\n        output.push({\n          name: preset[i].presetName,\n          info: zoneInfo,\n          header: preset[i],\n          instrument: instrument\n        });\n      }\n\n      return output;\n    };\n\n    /**\n     * @param {Array.<Object>} zone\n     * @param {number} index\n     * @returns {{generator: Object, generatorInfo: Array.<Object>}}\n     * @private\n     */\n    sf2.Parser.prototype.createInstrumentGenerator_ = function (zone, index) {\n      var modgen = this.createBagModGen_(\n        zone,\n        zone[index].instrumentGeneratorIndex,\n        zone[index+1] ? zone[index+1].instrumentGeneratorIndex: this.instrumentZoneGenerator.length,\n        this.instrumentZoneGenerator\n      );\n\n      return {\n        generator: modgen.modgen,\n        generatorInfo: modgen.modgenInfo\n      };\n    };\n\n    /**\n     * @param {Array.<Object>} zone\n     * @param {number} index\n     * @returns {{modulator: Object, modulatorInfo: Array.<Object>}}\n     * @private\n     */\n    sf2.Parser.prototype.createInstrumentModulator_ = function (zone, index) {\n      var modgen = this.createBagModGen_(\n        zone,\n        zone[index].presetModulatorIndex,\n        zone[index+1] ? zone[index+1].instrumentModulatorIndex: this.instrumentZoneModulator.length,\n        this.instrumentZoneModulator\n      );\n\n      return {\n        modulator: modgen.modgen,\n        modulatorInfo: modgen.modgenInfo\n      };\n    };\n\n    /**\n     * @param {Array.<Object>} zone\n     * @param {number} index\n     * @returns {{generator: Object, generatorInfo: Array.<Object>}}\n     * @private\n     */\n    sf2.Parser.prototype.createPresetGenerator_ = function (zone, index) {\n      var modgen = this.createBagModGen_(\n        zone,\n        zone[index].presetGeneratorIndex,\n        zone[index+1] ? zone[index+1].presetGeneratorIndex : this.presetZoneGenerator.length,\n        this.presetZoneGenerator\n      );\n\n      return {\n        generator: modgen.modgen,\n        generatorInfo: modgen.modgenInfo\n      };\n    };\n\n      /**\n       * @param {Array.<Object>} zone\n       * @param {number} index\n       * @returns {{modulator: Object, modulatorInfo: Array.<Object>}}\n       * @private\n       */\n    sf2.Parser.prototype.createPresetModulator_ = function (zone, index) {\n      /** @type {{modgen: Object, modgenInfo: Array.<Object>}} */\n      var modgen = this.createBagModGen_(\n        zone,\n        zone[index].presetModulatorIndex,\n        zone[index+1] ? zone[index+1].presetModulatorIndex : this.presetZoneModulator.length,\n        this.presetZoneModulator\n      );\n\n      return {\n        modulator: modgen.modgen,\n        modulatorInfo: modgen.modgenInfo\n      };\n    };\n\n    /**\n     * @param {Array.<Object>} zone\n     * @param {number} indexStart\n     * @param {number} indexEnd\n     * @param zoneModGen\n     * @returns {{modgen: Object, modgenInfo: Array.<Object>}}\n     * @private\n     */\n    sf2.Parser.prototype.createBagModGen_ = function (zone, indexStart, indexEnd, zoneModGen) {\n      /** @type {Array.<Object>} */\n      var modgenInfo = [];\n      /** @type {Object} */\n      var modgen = {\n        unknown: [],\n        'keyRange': {\n          hi: 127,\n          lo: 0\n        }\n      }; // TODO\n      /** @type {Object} */\n      var info;\n      /** @type {number} */\n      var i;\n      /** @type {number} */\n      var il;\n\n      for (i = indexStart, il = indexEnd; i < il; ++i) {\n        info = zoneModGen[i];\n        modgenInfo.push(info);\n\n        if (info.type === 'unknown') {\n          modgen.unknown.push(info.value);\n        } else {\n          modgen[info.type] = info.value;\n        }\n      }\n\n      return {\n        modgen: modgen,\n        modgenInfo: modgenInfo\n      };\n    };\n\n\n    /**\n     * @type {Array.<string>}\n     * @const\n     */\n    sf2.Parser.GeneratorEnumeratorTable = [\n      'startAddrsOffset',\n      'endAddrsOffset',\n      'startloopAddrsOffset',\n      'endloopAddrsOffset',\n      'startAddrsCoarseOffset',\n      'modLfoToPitch',\n      'vibLfoToPitch',\n      'modEnvToPitch',\n      'initialFilterFc',\n      'initialFilterQ',\n      'modLfoToFilterFc',\n      'modEnvToFilterFc',\n      'endAddrsCoarseOffset',\n      'modLfoToVolume',\n      undefined, // 14\n      'chorusEffectsSend',\n      'reverbEffectsSend',\n      'pan',\n      undefined,\n      undefined,\n      undefined, // 18,19,20\n      'delayModLFO',\n      'freqModLFO',\n      'delayVibLFO',\n      'freqVibLFO',\n      'delayModEnv',\n      'attackModEnv',\n      'holdModEnv',\n      'decayModEnv',\n      'sustainModEnv',\n      'releaseModEnv',\n      'keynumToModEnvHold',\n      'keynumToModEnvDecay',\n      'delayVolEnv',\n      'attackVolEnv',\n      'holdVolEnv',\n      'decayVolEnv',\n      'sustainVolEnv',\n      'releaseVolEnv',\n      'keynumToVolEnvHold',\n      'keynumToVolEnvDecay',\n      'instrument',\n      undefined, // 42\n      'keyRange',\n      'velRange',\n      'startloopAddrsCoarseOffset',\n      'keynum',\n      'velocity',\n      'initialAttenuation',\n      undefined, // 49\n      'endloopAddrsCoarseOffset',\n      'coarseTune',\n      'fineTune',\n      'sampleID',\n      'sampleModes',\n      undefined, // 55\n      'scaleTuning',\n      'exclusiveClass',\n      'overridingRootKey'\n    ];\n\n\n    sf2.Riff = {};\n\n    sf2.Riff.Parser = function (input, options) {\n      options = options || {};\n      /** @type {ByteArray} */\n      this.input = input;\n      /** @type {number} */\n      this.ip = options.index || 0;\n      /** @type {number} */\n      this.length = options.length || input.length - this.ip;\n      /** @type {Array.<sf2.Riff.Chunk>} */\n    //   this.chunkList;\n      /** @type {number} */\n      this.offset = this.ip;\n      /** @type {boolean} */\n      this.padding = options.padding !== undefined ? options.padding : true;\n      /** @type {boolean} */\n      this.bigEndian = options.bigEndian !== undefined ? options.bigEndian : false;\n    };\n\n    /**\n     * @param {string} type\n     * @param {number} size\n     * @param {number} offset\n     * @constructor\n     */\n    sf2.Riff.Chunk = function (type, size, offset) {\n      /** @type {string} */\n      this.type = type;\n      /** @type {number} */\n      this.size = size;\n      /** @type {number} */\n      this.offset = offset;\n    };\n\n    sf2.Riff.Parser.prototype.parse = function () {\n      /** @type {number} */\n      var length = this.length + this.offset;\n\n      this.chunkList = [];\n\n      while (this.ip < length) {\n        this.parseChunk();\n      }\n    };\n\n    sf2.Riff.Parser.prototype.parseChunk = function () {\n      /** @type {ByteArray} */\n      var input = this.input;\n      /** @type {number} */\n      var ip = this.ip;\n      /** @type {number} */\n      var size;\n\n      this.chunkList.push(new sf2.Riff.Chunk(\n        String.fromCharCode(input[ip++], input[ip++], input[ip++], input[ip++]),\n        (size = this.bigEndian ?\n           ((input[ip++] << 24) | (input[ip++] << 16) |\n            (input[ip++] <<  8) | (input[ip++]      )) >>> 0 :\n           ((input[ip++]      ) | (input[ip++] <<  8) |\n            (input[ip++] << 16) | (input[ip++] << 24)) >>> 0\n        ),\n        ip\n      ));\n\n      ip += size;\n\n      // padding\n      if (this.padding && ((ip - this.offset) & 1) === 1) {\n        ip++;\n      }\n\n      this.ip = ip;\n    };\n\n    /**\n     * @param {number} index chunk index.\n     * @return {?sf2.Riff.Chunk}\n     */\n    sf2.Riff.Parser.prototype.getChunk = function (index) {\n      /** @type {sf2.Riff.Chunk} */\n      var chunk = this.chunkList[index];\n\n      if (chunk === undefined) {\n        return null;\n      }\n\n      return chunk;\n    };\n\n    /**\n     * @return {number}\n     */\n    sf2.Riff.Parser.prototype.getNumberOfChunks = function () {\n      return this.chunkList.length;\n    };\n\n\n    return sf2;\n}));\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/stream.js": {
      "path": "lib/stream.js",
      "content": "// From https://github.com/gasman/jasmid/blob/master/stream.js\n// Modified to use byte array\n\nmodule.exports = function (array) {\n  var position = 0;\n\n  function read (length) {\n    var result = String.fromCharCode.apply(String, array.slice(position, position + length));\n    position += length;\n\n    return result;\n  }\n\n  function subarray (length) {\n    var result = array.subarray(position, position + length);\n    position += length;\n\n    return result;\n  }\n\n  /* read a big-endian 32-bit integer */\n  function readInt32 () {\n    var result = (\n        (array[position] << 24)\n      + (array[position + 1] << 16)\n      + (array[position + 2] << 8)\n      + array[position + 3]);\n    position += 4;\n\n    return result;\n  }\n\n  /* read a big-endian 16-bit integer */\n  function readInt16 () {\n    var result = (\n        (array[position] << 8)\n      + array[position + 1]);\n    position += 2;\n\n    return result;\n  }\n\n  /* read an 8-bit integer */\n  function readInt8 (signed) {\n    var result = array[position];\n    if (signed && result > 127) {\n      result -= 256;\n    }\n    position += 1;\n\n    return result;\n  }\n\n  function eof () {\n    return position >= array.length;\n  }\n\n  /* read a MIDI-style variable-length integer\n  \t(big-endian value in groups of 7 bits,\n  \twith top bit set to signify that another byte follows)\n  */\n  function readVarInt () {\n    var result = 0;\n    while (true) {\n      var b = readInt8();\n      if (b & 0x80) {\n        result += (b & 0x7f);\n        result <<= 7;\n      } else {\n        /* b is the last byte */\n        return result + b;\n      }\n    }\n  }\n\n  return {\n    'eof': eof,\n    'read': read,\n    'readInt32': readInt32,\n    'readInt16': readInt16,\n    'readInt8': readInt8,\n    'readVarInt': readVarInt,\n    'subarray' : subarray\n  };\n};\n",
      "mode": "100644",
      "type": "blob"
    },
    "lib/viz.coffee": {
      "path": "lib/viz.coffee",
      "content": "module.exports = (analyser) ->\n  bins = analyser.frequencyBinCount\n  frequencyDomain = new Uint8Array(bins)\n  timeDomain = new Uint8Array(bins)\n\n  draw: (canvas) ->\n    analyser.getByteFrequencyData(frequencyDomain)\n    analyser.getByteTimeDomainData(timeDomain)\n\n    canvas.fill \"black\"\n\n    width = canvas.width()\n    height = canvas.height()\n    ctx = canvas.context()\n    ratio = height / 256\n    step = width / bins\n\n    ctx.fillStyle = \"#00F\"\n\n    ctx.beginPath()\n    ctx.moveTo(0, height)\n\n    # Draw waveforms or frequency spectrum\n    Array::forEach.call frequencyDomain, (value, index) ->\n      x = index * step\n      y = ratio * (256 - value)\n\n      ctx.lineTo x, y\n\n    ctx.lineTo(width, height)\n    ctx.fill()\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = \"#F00\"\n\n    Array::forEach.call timeDomain, (value, index) ->\n      x = index * step\n      y = ratio * (256 - value)\n\n      if index is 0\n        ctx.beginPath()\n        ctx.moveTo x, y\n      else\n        ctx.lineTo x, y\n\n    ctx.stroke()\n",
      "mode": "100644",
      "type": "blob"
    },
    "load-n-play-midi.coffee": {
      "path": "load-n-play-midi.coffee",
      "content": "clone = (obj) ->\n  JSON.parse(JSON.stringify(obj))\n\nmodule.exports = (buffer, adapter) ->\n  # Midi loading\n  MidiFile = require \"./lib/midifile\"\n  MidiPlayer = require \"./midi_player\"\n\n  {playNote, releaseNote, programChange, pitchBend} = adapter\n\n  initialState = null\n  currentState = null\n  player = null\n\n  do ->\n    array = new Uint8Array(buffer)\n    midiFile = MidiFile(array)\n    console.log midiFile\n\n    player = MidiPlayer(midiFile)\n\n    initialState = clone(player.initialState)\n\n    currentState = clone(initialState)\n\n  meta = {}\n\n  handleEvent = (event, state) ->\n    {time} = state\n    {channel, deltaTime, noteNumber, subtype, type, velocity} = event\n\n    # TODO: Should we just pass through the raw midi event data buffers directly\n    # rather than switch and dispatch known subsets here?\n    switch \"#{type}:#{subtype}\"\n      when \"channel:controller\"\n        ; # TODO\n      when \"channel:noteOn\"\n        playNote time, channel, noteNumber, velocity\n      when \"channel:noteOff\"\n        releaseNote time, channel, noteNumber\n      when \"channel:pitchBend\"\n        pitchBend time, channel, event.value\n      when \"channel:programChange\"\n        programChange time, channel, event.programNumber\n      when \"meta:copyrightNotice\"\n        if meta.copyrightNotice\n          meta.copyrightNotice += \"/n#{event.text}\"\n        else\n          meta.copyrightNotice = event.text\n      when \"meta:endOfTrack\"\n        ; # TODO\n      when \"meta:keySignature\"\n        meta.keySignature =\n          scale: event.scale\n          key: event.key\n      when \"meta:lyrics\"\n        ; # TODO\n      when \"meta:setTempo\"\n        state.microsecondsPerBeat = event.microsecondsPerBeat\n      when \"meta:text\"\n        if meta.text\n          meta.text += \"/n#{event.text}\"\n        else\n          meta.text = event.text\n      when \"meta:timeSignature\"\n        meta.timeSignature =\n          denominator: event.denominator\n          metronome: event.metronome\n          numerator: event.numerator\n          thirtyseconds: event.thirtySeconds\n      when \"meta:trackName\"\n        # TODO: This needs to be per track\n        meta.trackName = event.text\n      when \"meta:unknown\"\n        ;\n      else\n        console.log \"Unknown\", event\n\n    return state\n\n  consumeEventsUntilTime = (t) ->\n    count = 0\n\n    while currentState.time < t\n      [event, nextState] = player.readEvent(currentState, true)\n      break unless event\n      currentState = handleEvent(event, nextState)\n      count += 1\n\n    return count\n\n\n  self =\n    consumeEventsUntilTime: consumeEventsUntilTime\n\n    reset: ->\n      currentState = clone initialState\n\n    currentState: ->\n      currentState\n\n    handleEvent: handleEvent\n\n    initialState: initialState\n",
      "mode": "100644",
      "type": "blob"
    },
    "main.coffee": {
      "path": "main.coffee",
      "content": "do ->\n  styleNode = document.createElement(\"style\")\n  styleNode.innerHTML = require \"./style\"\n\n  document.head.appendChild(styleNode)\n\nAjax = require \"ajax\"\najax = Ajax().ajax\nObservable = require \"observable\"\n\nTouchCanvas = require \"touch-canvas\"\n\n{width, height} = require \"./pixie\"\n\ncanvas = TouchCanvas\n  width: width\n  height: height\n\nsongs = require \"./song_list\"\nsongChoices = Object.keys(songs)\nselectedSong = Observable songChoices[0]\n\nplayer = null\nplaying = false\ntimeOffset = 0\ndoReplay = ->\ndoStop = ->\n\nTemplate = require \"./templates/main\"\ntemplate = Template\n  canvas: canvas.element()\n  songSelect:\n    class: \"song\"\n    options: songChoices\n    value: selectedSong\n  fontSelect:\n    class: \"font\"\n    options: [\"-\"]\n    value: \"-\"\n  replay: ->\n    if player\n      doReplay()\n  stop: ->\n    if player\n      doStop()\n\ndocument.body.appendChild template\n\nhandleResize =  ->\n  canvas.width(window.innerWidth)\n  canvas.height(window.innerHeight)\n\nhandleResize()\nwindow.addEventListener \"resize\", handleResize, false\n\ncontext = new AudioContext\n\nViz = require \"./lib/viz\"\n\nmasterGain = context.createGain()\nmasterGain.gain.value = 1\nmasterGain.connect(context.destination)\n\nanalyser = context.createAnalyser()\nanalyser.smoothingTimeConstant = 0\n\nmasterGain.connect(analyser)\n\nviz = Viz(analyser)\n\nupdateViz = ->\n  viz.draw(canvas)\n\n  requestAnimationFrame updateViz\n\nrequestAnimationFrame updateViz\n\nStream = require \"./lib/stream\"\nMidiFile = require \"./lib/midifile\"\n\nPlayer = require(\"./load-n-play-midi\")\n\nmgm1 = \"https://s3.amazonaws.com/whimsyspace-databucket-1g3p6d9lcl6x1/danielx/data/3mPhpFf7ZNEfu_yRZKm-R0xWJd62hB98jv_sqik7voQ\" # 1mgm1\nct4mgm = \"https://whimsy.space/danielx/data/bEKepHacjexwXm92b2GU_BTj2EYjaClrAaB2jWaescU\" # CT4MGM\nyamaha = \"https://whimsy.space/danielx/data/VQHGLBy82AW4ZppTgItJm1IpquIF-042W3Ix3u7PQeQ\" # Yamaha XG\nroland = \"https://whimsy.space/danielx/data/2KPRQpAqB3Ghy1bgmuCcYklbUF0mCXs0zSXF6Gn967M\"\n# generalUser = \"https://s3.amazonaws.com/whimsyspace-databucket-1g3p6d9lcl6x1/danielx/data/AHJSlkhvZSukK9vyCYJUdiyoAjk1PQS1WidFT8jtuKg\" # 30+MB\n\nSFSynth = require(\"./sf2_synth\")\n\najax(ct4mgm, responseType: \"arraybuffer\")\n.then SFSynth\n.then ({allNotesOff, noteOn, noteOff, programChange, pitchBend}) ->\n  Adapter = ->\n    adjustTime = (fn) ->\n      (time, rest...) ->\n        fn(time + timeOffset, rest...)\n\n    allNotesOff: adjustTime allNotesOff\n    pitchBend: adjustTime pitchBend\n    programChange: adjustTime programChange\n    playNote: (time, channel, note, velocity) ->\n      noteOn time + timeOffset, channel, note, velocity, masterGain\n    releaseNote: adjustTime noteOff\n\n  selectedSong.observe (value) ->\n    ajax(songs[value], responseType: \"arraybuffer\")\n    .then init\n\n  # How far ahead in seconds to pull events from the midi tracks\n  # NOTE: Needs to be >1s for setInteval to populate enough to run in a background tab\n  # We want it to be really short so that play/pause responsiveness feels quick\n  # We want it to be long enough to cover up irregularities with setTimeout\n  LOOKAHEAD = 0.25\n\n  init = (buffer) ->\n    timeOffset = context.currentTime\n    adapter = Adapter()\n    allNotesOff 0\n\n    player = Player(buffer, adapter)\n    playing = true\n\n  consumeEvents = ->\n    t = context.currentTime - timeOffset\n    player.consumeEventsUntilTime(t + LOOKAHEAD)\n\n  document.addEventListener \"visibilitychange\", (e) ->\n    if document.hidden\n      LOOKAHEAD = 1.25\n\n      if player and playing\n        consumeEvents()\n    else\n      LOOKAHEAD = 0.25\n\n  doReplay = ->\n    timeOffset = context.currentTime\n    allNotesOff 0\n    player.reset()\n    playing = true\n  \n  doStop = ->\n    allNotesOff 0\n    playing = false\n\n  setInterval ->\n    if player and playing\n      consumeEvents()\n  , 4\n\n  ajax(songs[selectedSong()], responseType: \"arraybuffer\")\n  .then init\n\n  readFile = require \"./lib/read_file\"\n  Drop = require \"./lib/drop\"\n\n  Drop document, (e) ->\n    file = e.dataTransfer.files[0]\n\n    if file\n      readFile(file, \"readAsArrayBuffer\")\n      .then init\n\nrequire(\"./midi_access\")().handle ({data}) ->\n  event = MidiFile.readEvent Stream(data), true\n\n  player?.handleEvent event, time: context.currentTime - timeOffset\n\n-> #TODO Offline rendering\n  offlineContext = new OfflineAudioContext(2, 44100*40, 44100)\n\n  Recorder = require \"./lib/recorder\"\n  console.log Recorder\n\n  {saveAs} = require \"./lib/filesaver\"\n\n  # TODO: Render midi to an offline context\n  # Pass offline channel data to web worker from recorder.js\n  # Download wav\n",
      "mode": "100644",
      "type": "blob"
    },
    "midi_access.coffee": {
      "path": "midi_access.coffee",
      "content": "module.exports = ->\n  handler = null\n\n  navigator.requestMIDIAccess()\n  .then (midiAccess) ->\n    midiAccess.inputs.forEach (midi) ->\n      console.log midi\n\n      midi.onmidimessage = (args...) ->\n        handler?(args...)\n\n  handle: (fn) ->\n    handler = fn\n",
      "mode": "100644",
      "type": "blob"
    },
    "midi_player.coffee": {
      "path": "midi_player.coffee",
      "content": "assert = (condition, message=\"Ya' blew it!\") ->\n  throw new Error message unless condition\n\nfindNextEventTrackIndex = (trackData) ->\n  min = Infinity\n  index = undefined\n\n  trackData.forEach ({ticksUntilNextEvent}, i) ->\n    if ticksUntilNextEvent < min\n      min = ticksUntilNextEvent\n      index = i\n\n  return index\n\nfindStuckNotes = (events) ->\n  checkingNotes = {}\n  t = 0\n\n  events.forEach (event, i) ->\n    {deltaTime, noteNumber, subtype, velocity} = event\n\n    t += deltaTime\n\n    if subtype is \"noteOn\"\n      if checkingNotes[noteNumber]\n        console.log \"Double on!\"\n      else\n        checkingNotes[noteNumber] = [event, i, t]\n\n    if subtype is \"noteOff\"\n      [oldEvent, oldIndex, oldT] = checkingNotes[noteNumber]\n      duration = t - oldT\n\n      console.log duration\n\n      if duration < 1000\n      else\n        console.log checkingNotes[noteNumber]\n\n      checkingNotes[noteNumber] = false\n\n  console.log checkingNotes\n\nmodule.exports = (midiFile) ->\n  microsecondsPerSecond = 1000000\n  tracks = midiFile.tracks\n\n  # findStuckNotes(tracks[2])\n\n  # Keep data for each track and overall player\n  playerData =\n    currentTick: 0 # ticks\n    microsecondsPerBeat: 500000 # us/beat\n    nextEventTrackIndex: null\n    ticksPerBeat: midiFile.header.ticksPerBeat # ticks/beat\n    time: 0 # seconds\n    trackData: tracks.map (track, i) ->\n      nextEvent = track[0]\n      ticksUntilNextEvent = nextEvent?.deltaTime\n\n      id: i\n      length: track.length\n      nextEventIndex: 0\n      ticksUntilNextEvent: ticksUntilNextEvent\n\n  playerData.nextEventTrackIndex = findNextEventTrackIndex(playerData.trackData)\n\n  # When we consume an event from a track we need to update the track data\n  advanceTrackData = (trackData, inplace=true) ->\n    nextEventIndex = trackData.nextEventIndex + 1\n    nextEvent = tracks[trackData.id][nextEventIndex]\n\n    if inplace\n      trackData.nextEventIndex = nextEventIndex\n      trackData.ticksUntilNextEvent = nextEvent?.deltaTime\n\n      return trackData\n    else\n      id: trackData.id\n      length: trackData.length\n      nextEventIndex: nextEventIndex\n      ticksUntilNextEvent: nextEvent?.deltaTime\n\n  advanceTrackTicks = (trackData, ticks, inplace=true) ->\n    ticksUntilNextEvent = trackData.ticksUntilNextEvent\n\n    if ticksUntilNextEvent?\n      ticksUntilNextEvent -= ticks\n      assert ticksUntilNextEvent >= 0\n\n    if inplace\n      trackData.ticksUntilNextEvent = ticksUntilNextEvent\n    else\n      id: trackData.id\n      length: trackData.length\n      nextEventIndex: trackData.nextEventIndex\n      ticksUntilNextEvent: ticksUntilNextEvent\n\n  # Read next event and update state\n  readEvent = (playerData, inplace=true) ->\n    # Get earliest next event\n    trackData = playerData.trackData\n    eventTrackIndex = playerData.nextEventTrackIndex\n    eventTrack = trackData[eventTrackIndex]\n    return [undefined, playerData] unless eventTrack\n\n    nextEvent = tracks[eventTrack.id][eventTrack.nextEventIndex]\n    return [undefined, playerData] unless nextEvent\n\n    ticksUntilNextEvent = eventTrack.ticksUntilNextEvent\n    ticksPerBeat = playerData.ticksPerBeat\n    microsecondsPerBeat = playerData.microsecondsPerBeat\n\n    # Update ticksUntil and time\n    currentTick = playerData.currentTick + ticksUntilNextEvent\n    timeAdvance = (ticksUntilNextEvent / ticksPerBeat) * (microsecondsPerBeat / microsecondsPerSecond)\n    time = playerData.time + timeAdvance\n    assert !isNaN(time)\n\n    # Advance other track pointers\n    if inplace\n      trackData.forEach (data, index) ->\n        if index is eventTrackIndex\n          advanceTrackData(data, true)\n        else\n          advanceTrackTicks(data, ticksUntilNextEvent, true)\n      nextEventTrackIndex = findNextEventTrackIndex(trackData)\n    else\n      newTrackData = trackData.map (data, index) ->\n        if index is eventTrackIndex\n          advanceTrackData(data, false)\n        else\n          advanceTrackTicks(data, ticksUntilNextEvent, false)\n\n      # Find next event track\n      nextEventTrackIndex = findNextEventTrackIndex(newTrackData)\n\n    if inplace\n      playerData.currentTick = currentTick\n      playerData.time = time\n      playerData.nextEventTrackIndex = nextEventTrackIndex\n\n      return [nextEvent, playerData]\n    else\n      newState =\n        currentTick: currentTick\n        microsecondsPerBeat: microsecondsPerBeat\n        nextEventTrackIndex: nextEventTrackIndex\n        ticksPerBeat: ticksPerBeat\n        time: time\n        trackData: newTrackData\n\n      return [nextEvent, newState]\n\n  initialState: playerData\n  readEvent: readEvent\n",
      "mode": "100644",
      "type": "blob"
    },
    "note_frequencies.coffee": {
      "path": "note_frequencies.coffee",
      "content": "module.exports = [0..127].map (n) ->\n  semitonesFromA4 = n - 69\n\n  Math.pow(2, semitonesFromA4/12) * 440\n",
      "mode": "100644",
      "type": "blob"
    },
    "piano.coffee": {
      "path": "piano.coffee",
      "content": "TouchCanvas = require \"touch-canvas\"\n\n\nmodule.exports = ->\n  range = 24\n\n  onNotes = []\n  ids = []\n\n  canvas = TouchCanvas()\n\n  canvas.on \"touch\", (p) ->\n    note = Math.floor p.x * range\n\n    self.playNote(note, p.identifier)\n\n  canvas.on \"release\", (p) ->\n    self.releaseNote(p.identifier)\n\n  self =\n    releaseNote: (identifier) ->\n      onNotes[ids[identifier]] = false\n\n    playNote: (note, identifier) ->\n      onNotes[note] = true\n      ids[identifier] = note\n\n    element: ->\n      canvas.element()\n\n    draw: ->\n      n = range\n\n      canvas.clear()\n      width = canvas.width() / n\n      height = canvas.height()\n\n      [0...n].forEach (n) ->\n        hue = (n % 12) * 360 / 12\n        saturation = \"75%\"\n        lightness = \"50%\"\n\n        if onNotes[n]\n          lightness = \"75%\"\n\n        canvas.drawRect\n          x: width * n\n          y: 0\n          width: width\n          height: height\n          color: \"hsl(#{hue}, #{saturation}, #{lightness})\"\n",
      "mode": "100644",
      "type": "blob"
    },
    "pixie.cson": {
      "path": "pixie.cson",
      "content": "width: 800\nheight: 450\ndependencies:\n  ajax: \"distri/ajax:master\"\n  \"touch-canvas\": \"distri/touch-canvas:v0.3.1\"\n  observable: \"distri/observable:v0.3.1\"\n",
      "mode": "100644",
      "type": "blob"
    },
    "song_list.cson": {
      "path": "song_list.cson",
      "content": "\n# Bad Apple 36MB MIDI\n# badApple = \"https://whimsy.space/danielx/data/clOXhtZz4VcunDJZdCM8T5pjBPKQaLCYCzbDod39Vbg\"\n\ncruel: \"https://whimsy.space/danielx/data/FFFIzGGXnhNPBw8MK8-y3Df9nDRxHfwP3upMeXAzg04\"\njordan: \"https://whimsy.space/danielx/data/FhSh0qeVTMu9Xwd4vihF6shaPJsD_rM8t1OSKGl-ir4\"\nwaltz: \"https://whimsy.space/danielx/data/qxIFNrVVEqhwmwUO5wWyZKk1IwGgQIxqvLQ9WX0X20E\"\naquarius: \"https://whimsy.space/danielx/data/ZZXoIXhXFbo0pWGn-m938Vgox_NmJiYkZ9g3UkR0PrU\"\nslunk: \"https://whimsy.space/danielx/data/EtME8Imvk8eE8MXc7jlwJOVotKM2KVmxXd8QiJtBbPc\"\nmushroom: \"https://whimsy.space/danielx/data/xfgFR67fDD_vXLic9IYXFPo55qP-kUpC4rl-H9hrwSA\"\n",
      "mode": "100644",
      "type": "blob"
    },
    "style.styl": {
      "path": "style.styl",
      "content": "*\n  box-sizing: border-box\n\nhtml\n  height: 100%\n\nbody\n  font-family: \"HelveticaNeue-Light\", \"Helvetica Neue Light\", \"Helvetica Neue\", Helvetica, Arial, \"Lucida Grande\", sans-serif\n  font-weight: 300\n  font-size: 18px\n  height: 100%\n  margin: 0\n  overflow: hidden\n  user-select: none\n\ncanvas\n  bottom: 0\n  position: absolute\n  top: 0\n  left: 0\n  right: 0\n  margin: auto\n\n#main\n  & > select.font\n    position: absolute\n    top: 8px\n    right: 8px\n\n  & > select.song\n    position: absolute\n    top: 8px\n    left: 8px\n\n  & > actions\n    position: absolute\n    bottom: 8px\n    left: 8px\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/main.jadelet": {
      "path": "templates/main.jadelet",
      "content": "- Actions = require \"./actions\"\n- Selector = require \"./selector\"\n\n#main\n  = @canvas\n  = Selector(@songSelect)\n  = Selector(@fontSelect)\n  = Actions(this)\n",
      "mode": "100644",
      "type": "blob"
    },
    "templates/selector.jadelet": {
      "path": "templates/selector.jadelet",
      "content": "select(@class @options @value)\n",
      "mode": "100644",
      "type": "blob"
    },
    "sf2_synth.coffee": {
      "path": "sf2_synth.coffee",
      "content": "SF2Parser = require \"./lib/sf2_parser\"\n\nSEMITONE = Math.pow(2, 1/12)\n\nmodule.exports = (buffer) ->\n  parser = new SF2Parser.Parser(new Uint8Array(buffer))\n  parser.parse()\n\n  console.log parser\n\n  global.parser = parser\n\n  instruments = parser.getInstruments()\n\n  banks = createAllInstruments(parser.getPresets(), instruments)\n  drumBank = banks[128]\n\n  console.log instruments.map((i) -> i.name), banks\n\n  bank = banks[0]\n  channels = [0..15].map ->\n    fx:\n      panpot: 0 # [-1, 1]\n      pitchBend: 8192 # [0, 16383]\n      pitchBendSensitivity: 1\n      volume: 0.5 # [0, 1]\n    program: 0\n    notes: {}\n\n  allNotesOff: (time) ->\n    channels.forEach (channel) ->\n      notes = channel.notes\n\n      Object.keys(notes).forEach (key) ->\n        while currentNoteData = notes[key].shift()\n          noteOff time, currentNoteData...\n\n  pitchBend: (time, channelId, value) ->\n    channel = channels[channelId]\n\n    channel.fx.pitchBend = value\n    notes = channel.notes\n\n    # Update note pitch for existing notes\n    Object.keys(notes).forEach (key) ->\n      notes[key].forEach (note) ->\n        schedulePlaybackRate(time, note[1].playbackRate, channel.fx, note[0])\n\n  programChange: (time, channelId, program) ->\n    # TODO: do we need to worry about program change timing?\n    # Midi events are linear, so probably not\n    channels[channelId].program = program\n\n  noteOn: (time, channelId, note, velocity, destination) ->\n    channel = channels[channelId]\n\n    channel.notes[note] ||= []\n\n    if channelId is 9 # Drum Kit (Ch. 10)\n      instrument = drumBank[channel.program][note]\n    else\n      instrument = bank[channel.program][note]\n\n    if instrument\n      channel.notes[note].push noteOn time, instrument, velocity, channelId, channel.fx, destination\n    else\n      console.log \"No instrument for note: #{note}\"\n\n  noteOff: (time, channelId, note) ->\n    channel = channels[channelId]\n    channel.notes[note] ||= []\n\n    if currentNoteData = channel.notes[note].shift()\n      noteOff time, currentNoteData...\n\ntoAudioBuffer = (context, buffer, sampleRate) ->\n  audioBuffer = context.createBuffer 1, buffer.length, sampleRate\n\n  audioData = audioBuffer.getChannelData(0)\n  buffer.forEach (n, i) ->\n    audioData[i] = n / 32768\n\n  return audioBuffer\n\ncreateAllInstruments = (presets, instruments) ->\n  banks = []\n\n  presets.forEach (preset, i) ->\n    presetNumber = preset.header.preset\n\n    if (typeof preset.instrument != 'number')\n      return\n\n    instrument = instruments[preset.instrument]\n    if (instrument.name.replace(/\\0*$/, '') is 'EOI')\n      return\n\n    # select bank\n    if (banks[preset.header.bank] is undefined)\n      banks[preset.header.bank] = []\n\n    bank = banks[preset.header.bank]\n    bank[presetNumber] = []\n    bank[presetNumber].name = preset.name\n\n    instrument.info.forEach (info) ->\n      createNoteInfo(parser, info, bank[presetNumber])\n\n  return banks\n\ncreateNoteInfo = (parser, info, preset) ->\n  generator = info.generator\n\n  return unless generator['keyRange'] and generator['sampleID']\n\n  volAttack  = getModGenAmount(generator, 'attackVolEnv',  -12000)\n  volDecay   = getModGenAmount(generator, 'decayVolEnv',   -12000)\n  volSustain = getModGenAmount(generator, 'sustainVolEnv')\n  volRelease = getModGenAmount(generator, 'releaseVolEnv', -12000)\n  modAttack  = getModGenAmount(generator, 'attackModEnv',  -12000)\n  modDecay   = getModGenAmount(generator, 'decayModEnv',   -12000)\n  modSustain = getModGenAmount(generator, 'sustainModEnv')\n  modRelease = getModGenAmount(generator, 'releaseModEnv', -12000)\n\n  tune =\n    getModGenAmount(generator, 'coarseTune') +\n    getModGenAmount(generator, 'fineTune') / 100\n\n  scale = getModGenAmount(generator, 'scaleTuning', 100) / 100\n  freqVibLFO = getModGenAmount(generator, 'freqVibLFO')\n  if freqVibLFO\n    freqVibLFO = Math.pow(2, freqVibLFO / 1200) * 8.176\n\n  lo = generator['keyRange'].lo\n  hi = generator['keyRange'].hi\n\n  [lo..hi].forEach (i) ->\n    if (preset[i])\n      return\n\n    sampleId = getModGenAmount(generator, 'sampleID');\n    sampleHeader = parser.sampleHeader[sampleId];\n    preset[i] =\n      'sample': parser.sample[sampleId],\n      'sampleRate': sampleHeader.sampleRate,\n      'basePlaybackRate': Math.pow(\n        SEMITONE,\n        (\n          i -\n          getModGenAmount(generator, 'overridingRootKey', sampleHeader.originalPitch) +\n          tune + (sampleHeader.pitchCorrection / 100)\n        ) * scale\n      ),\n      'modEnvToPitch': getModGenAmount(generator, 'modEnvToPitch') / 100,\n      'scaleTuning': scale,\n      'start': getModGenAmount(generator, 'startAddrsCoarseOffset') * 32768 + getModGenAmount(generator, 'startAddrsOffset'),\n      'end': getModGenAmount(generator, 'endAddrsCoarseOffset') * 32768 + getModGenAmount(generator, 'endAddrsOffset'),\n      'loopStart': (\n        # (sampleHeader.startLoop - sampleHeader.start) +\n        (sampleHeader.startLoop) +\n          getModGenAmount(generator, 'startloopAddrsCoarseOffset') * 32768 +\n          getModGenAmount(generator, 'startloopAddrsOffset')\n        ),\n      'loopEnd': (\n        # (sampleHeader.endLoop - sampleHeader.start) +\n        (sampleHeader.endLoop) +\n          getModGenAmount(generator, 'endloopAddrsCoarseOffset') * 32768 +\n          getModGenAmount(generator, 'endloopAddrsOffset')\n        ),\n      'volAttack':  Math.pow(2, volAttack / 1200),\n      'volDecay':   Math.pow(2, volDecay / 1200),\n      'volSustain': volSustain / 1000,\n      'volRelease': Math.pow(2, volRelease / 1200),\n      'modAttack':  Math.pow(2, modAttack / 1200),\n      'modDecay':   Math.pow(2, modDecay / 1200),\n      'modSustain': modSustain / 1000,\n      'modRelease': Math.pow(2, modRelease / 1200),\n      'initialFilterFc': getModGenAmount(generator, 'initialFilterFc', 13500),\n      'modEnvToFilterFc': getModGenAmount(generator, 'modEnvToFilterFc'),\n      'initialFilterQ': getModGenAmount(generator, 'initialFilterQ'),\n      'freqVibLFO': freqVibLFO\n\ngetModGenAmount = (generator, enumeratorType, opt_default=0) ->\n  generator[enumeratorType]?.amount ? opt_default\n\namountToFreq = (val) ->\n  Math.pow(2, (val - 6900) / 1200) * 440\n\nnoteOn = (time, instrument, velocity, channel, fx, destination) ->\n  volume = fx.volume\n\n  context = destination.context\n  sample = instrument.sample\n\n  now = time\n  sampleRate = instrument.sampleRate\n\n  volAttack = now + instrument['volAttack']\n  modAttack = now + instrument['modAttack']\n  volDecay = volAttack + instrument['volDecay']\n  modDecay = modAttack + instrument['modDecay']\n\n  loopStart = instrument['loopStart'] / sampleRate\n  loopEnd = instrument['loopEnd'] / sampleRate\n  startTime = instrument['start'] / sampleRate\n\n  # TODO: sample.subarray(0, instrument.end) ?\n  buffer = toAudioBuffer(context, sample, sampleRate)\n\n  # buffer source\n  bufferSource = context.createBufferSource()\n  bufferSource.buffer = buffer\n  bufferSource.loop = (channel != 9)\n  bufferSource.loopStart = loopStart\n  bufferSource.loopEnd = loopEnd\n\n  schedulePlaybackRate(now, bufferSource.playbackRate, fx, instrument)\n\n  # audio node\n  panner = context.createPanner()\n  output = context.createGain()\n  outputGain = output.gain\n\n  # filter\n  filter = context.createBiquadFilter()\n  filter.type = \"lowpass\"\n\n  # panpot\n  panner.setPosition(\n    Math.sin(fx.panpot * Math.PI / 2),\n    0,\n    Math.cos(fx.panpot * Math.PI / 2)\n  )\n\n  #---------------------------------------------------------------------------\n  # Attack, Decay, Sustain\n  #---------------------------------------------------------------------------\n  outputGain.setValueAtTime(0, now);\n  outputGain.linearRampToValueAtTime(volume * (velocity / 127), volAttack)\n  outputGain.linearRampToValueAtTime(volume * (1 - instrument['volSustain']), volDecay)\n\n  filter.Q.setValueAtTime(instrument['initialFilterQ'], now)\n  baseFreq = amountToFreq(instrument['initialFilterFc'])\n  peekFreq = amountToFreq(instrument['initialFilterFc'] + instrument['modEnvToFilterFc'])\n  sustainFreq = baseFreq + (peekFreq - baseFreq) * (1 - instrument['modSustain'])\n  filter.frequency.setValueAtTime(baseFreq, now)\n  filter.frequency.linearRampToValueAtTime(peekFreq, modAttack)\n  filter.frequency.linearRampToValueAtTime(sustainFreq, modDecay)\n\n  bufferSource.connect(filter)\n  filter.connect(panner)\n  panner.connect(output)\n  output.connect(destination)\n\n  bufferSource.start(now, startTime)\n\n  return [instrument, bufferSource, fx, output]\n\nnoteOff = (time, instrument, bufferSource, fx, output) ->\n  volEndTime = time + instrument.volRelease\n  modEndTime = time + instrument.modRelease\n\n  #---------------------------------------------------------------------------\n  # Release\n  #---------------------------------------------------------------------------\n  output.gain.cancelScheduledValues(time)\n  output.gain.linearRampToValueAtTime(0, volEndTime)\n\n  computedPlaybackRate = computePlaybackRate(instrument, fx)\n  bufferSource.playbackRate.cancelScheduledValues(time)\n  bufferSource.playbackRate.linearRampToValueAtTime(computedPlaybackRate, modEndTime)\n\n  bufferSource.loop = false\n  bufferSource.stop(volEndTime)\n\n# pitchBend is 14-bit midi pitch bend value [0 - 16383]\ncomputePlaybackRate = (instrument, fx) ->\n  pitchBend = fx.pitchBend - 8192\n\n  denominator = if pitchBend < 0\n    8192\n  else\n    8191\n\n  ratio = pitchBend / denominator\n  scaleTuning = instrument.scaleTuning\n\n  rate = Math.pow SEMITONE, fx.pitchBendSensitivity * ratio * scaleTuning\n\n  instrument.basePlaybackRate * rate\n\nschedulePlaybackRate = (time, playbackRate, fx, instrument) ->\n  computed = computePlaybackRate(instrument, fx)\n\n  modAttack = time + instrument.modAttack\n  modDecay = modAttack + instrument.modDecay\n  peekPitch = computed * Math.pow(\n    SEMITONE,\n    instrument.modEnvToPitch * instrument.scaleTuning\n  )\n\n  playbackRate.cancelScheduledValues(time)\n  playbackRate.setValueAtTime(computed, time)\n  playbackRate.linearRampToValueAtTime(peekPitch, modAttack)\n  playbackRate.linearRampToValueAtTime(computed + (peekPitch - computed) * (1 - instrument.modSustain), modDecay)\n",
      "mode": "100644"
    },
    "templates/actions.jadelet": {
      "path": "templates/actions.jadelet",
      "content": "actions\n  button(click=@replay) Replay\n  button(click=@stop) Stop\n",
      "mode": "100644"
    }
  },
  "distribution": {
    "lib/drop": {
      "path": "lib/drop",
      "content": "(function() {\n  module.exports = function(element, handler) {\n    var cancel;\n    cancel = function(e) {\n      e.preventDefault();\n      return false;\n    };\n    element.addEventListener(\"dragover\", cancel);\n    element.addEventListener(\"dragenter\", cancel);\n    return element.addEventListener(\"drop\", function(e) {\n      e.preventDefault();\n      handler(e);\n      return false;\n    });\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/filesaver": {
      "path": "lib/filesaver",
      "content": "/* FileSaver.js\n * A saveAs() FileSaver implementation.\n * 1.1.20151003\n *\n * By Eli Grey, http://eligrey.com\n * License: MIT\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\n */\n\n/*global self */\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\nvar saveAs = saveAs || (function(view) {\n\t\"use strict\";\n\t// IE <10 is explicitly unsupported\n\tif (typeof navigator !== \"undefined\" && /MSIE [1-9]\\./.test(navigator.userAgent)) {\n\t\treturn;\n\t}\n\tvar\n\t\t  doc = view.document\n\t\t  // only get URL when necessary in case Blob.js hasn't overridden it yet\n\t\t, get_URL = function() {\n\t\t\treturn view.URL || view.webkitURL || view;\n\t\t}\n\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n\t\t, can_use_save_link = \"download\" in save_link\n\t\t, click = function(node) {\n\t\t\tvar event = new MouseEvent(\"click\");\n\t\t\tnode.dispatchEvent(event);\n\t\t}\n\t\t, is_safari = /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent)\n\t\t, webkit_req_fs = view.webkitRequestFileSystem\n\t\t, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem\n\t\t, throw_outside = function(ex) {\n\t\t\t(view.setImmediate || view.setTimeout)(function() {\n\t\t\t\tthrow ex;\n\t\t\t}, 0);\n\t\t}\n\t\t, force_saveable_type = \"application/octet-stream\"\n\t\t, fs_min_size = 0\n\t\t// See https://code.google.com/p/chromium/issues/detail?id=375297#c7 and\n\t\t// https://github.com/eligrey/FileSaver.js/commit/485930a#commitcomment-8768047\n\t\t// for the reasoning behind the timeout and revocation flow\n\t\t, arbitrary_revoke_timeout = 500 // in ms\n\t\t, revoke = function(file) {\n\t\t\tvar revoker = function() {\n\t\t\t\tif (typeof file === \"string\") { // file is an object URL\n\t\t\t\t\tget_URL().revokeObjectURL(file);\n\t\t\t\t} else { // file is a File\n\t\t\t\t\tfile.remove();\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (view.chrome) {\n\t\t\t\trevoker();\n\t\t\t} else {\n\t\t\t\tsetTimeout(revoker, arbitrary_revoke_timeout);\n\t\t\t}\n\t\t}\n\t\t, dispatch = function(filesaver, event_types, event) {\n\t\t\tevent_types = [].concat(event_types);\n\t\t\tvar i = event_types.length;\n\t\t\twhile (i--) {\n\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];\n\t\t\t\tif (typeof listener === \"function\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tthrow_outside(ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t, auto_bom = function(blob) {\n\t\t\t// prepend BOM for UTF-8 XML and text/* types (including HTML)\n\t\t\tif (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n\t\t\t\treturn new Blob([\"\\ufeff\", blob], {type: blob.type});\n\t\t\t}\n\t\t\treturn blob;\n\t\t}\n\t\t, FileSaver = function(blob, name, no_auto_bom) {\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\t// First try a.download, then web filesystem, then object URLs\n\t\t\tvar\n\t\t\t\t  filesaver = this\n\t\t\t\t, type = blob.type\n\t\t\t\t, blob_changed = false\n\t\t\t\t, object_url\n\t\t\t\t, target_view\n\t\t\t\t, dispatch_all = function() {\n\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n\t\t\t\t}\n\t\t\t\t// on any filesys errors revert to saving with object URLs\n\t\t\t\t, fs_error = function() {\n\t\t\t\t\tif (target_view && is_safari && typeof FileReader !== \"undefined\") {\n\t\t\t\t\t\t// Safari doesn't allow downloading of blob urls\n\t\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\t\treader.onloadend = function() {\n\t\t\t\t\t\t\tvar base64Data = reader.result;\n\t\t\t\t\t\t\ttarget_view.location.href = \"data:attachment/file\" + base64Data.slice(base64Data.search(/[,;]/));\n\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\tdispatch_all();\n\t\t\t\t\t\t};\n\t\t\t\t\t\treader.readAsDataURL(blob);\n\t\t\t\t\t\tfilesaver.readyState = filesaver.INIT;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// don't create more object URLs than needed\n\t\t\t\t\tif (blob_changed || !object_url) {\n\t\t\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\t\t}\n\t\t\t\t\tif (target_view) {\n\t\t\t\t\t\ttarget_view.location.href = object_url;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar new_tab = view.open(object_url, \"_blank\");\n\t\t\t\t\t\tif (new_tab == undefined && is_safari) {\n\t\t\t\t\t\t\t//Apple do not allow window.open, see http://bit.ly/1kZffRI\n\t\t\t\t\t\t\tview.location.href = object_url\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t}\n\t\t\t\t, abortable = function(func) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif (filesaver.readyState !== filesaver.DONE) {\n\t\t\t\t\t\t\treturn func.apply(this, arguments);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t, create_if_not_found = {create: true, exclusive: false}\n\t\t\t\t, slice\n\t\t\t;\n\t\t\tfilesaver.readyState = filesaver.INIT;\n\t\t\tif (!name) {\n\t\t\t\tname = \"download\";\n\t\t\t}\n\t\t\tif (can_use_save_link) {\n\t\t\t\tobject_url = get_URL().createObjectURL(blob);\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tsave_link.href = object_url;\n\t\t\t\t\tsave_link.download = name;\n\t\t\t\t\tclick(save_link);\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\trevoke(object_url);\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Object and web filesystem URLs have a problem saving in Google Chrome when\n\t\t\t// viewed in a tab, so I force save with application/octet-stream\n\t\t\t// http://code.google.com/p/chromium/issues/detail?id=91158\n\t\t\t// Update: Google errantly closed 91158, I submitted it again:\n\t\t\t// https://code.google.com/p/chromium/issues/detail?id=389642\n\t\t\tif (view.chrome && type && type !== force_saveable_type) {\n\t\t\t\tslice = blob.slice || blob.webkitSlice;\n\t\t\t\tblob = slice.call(blob, 0, blob.size, force_saveable_type);\n\t\t\t\tblob_changed = true;\n\t\t\t}\n\t\t\t// Since I can't be sure that the guessed media type will trigger a download\n\t\t\t// in WebKit, I append .download to the filename.\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=65440\n\t\t\tif (webkit_req_fs && name !== \"download\") {\n\t\t\t\tname += \".download\";\n\t\t\t}\n\t\t\tif (type === force_saveable_type || webkit_req_fs) {\n\t\t\t\ttarget_view = view;\n\t\t\t}\n\t\t\tif (!req_fs) {\n\t\t\t\tfs_error();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfs_min_size += blob.size;\n\t\t\treq_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {\n\t\t\t\tfs.root.getDirectory(\"saved\", create_if_not_found, abortable(function(dir) {\n\t\t\t\t\tvar save = function() {\n\t\t\t\t\t\tdir.getFile(name, create_if_not_found, abortable(function(file) {\n\t\t\t\t\t\t\tfile.createWriter(abortable(function(writer) {\n\t\t\t\t\t\t\t\twriter.onwriteend = function(event) {\n\t\t\t\t\t\t\t\t\ttarget_view.location.href = file.toURL();\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\t\tdispatch(filesaver, \"writeend\", event);\n\t\t\t\t\t\t\t\t\trevoke(file);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\twriter.onerror = function() {\n\t\t\t\t\t\t\t\t\tvar error = writer.error;\n\t\t\t\t\t\t\t\t\tif (error.code !== error.ABORT_ERR) {\n\t\t\t\t\t\t\t\t\t\tfs_error();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\"writestart progress write abort\".split(\" \").forEach(function(event) {\n\t\t\t\t\t\t\t\t\twriter[\"on\" + event] = filesaver[\"on\" + event];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\twriter.write(blob);\n\t\t\t\t\t\t\t\tfilesaver.abort = function() {\n\t\t\t\t\t\t\t\t\twriter.abort();\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.WRITING;\n\t\t\t\t\t\t\t}), fs_error);\n\t\t\t\t\t\t}), fs_error);\n\t\t\t\t\t};\n\t\t\t\t\tdir.getFile(name, {create: false}, abortable(function(file) {\n\t\t\t\t\t\t// delete file if it already exists\n\t\t\t\t\t\tfile.remove();\n\t\t\t\t\t\tsave();\n\t\t\t\t\t}), abortable(function(ex) {\n\t\t\t\t\t\tif (ex.code === ex.NOT_FOUND_ERR) {\n\t\t\t\t\t\t\tsave();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfs_error();\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}), fs_error);\n\t\t\t}), fs_error);\n\t\t}\n\t\t, FS_proto = FileSaver.prototype\n\t\t, saveAs = function(blob, name, no_auto_bom) {\n\t\t\treturn new FileSaver(blob, name, no_auto_bom);\n\t\t}\n\t;\n\t// IE 10+ (native saveAs)\n\tif (typeof navigator !== \"undefined\" && navigator.msSaveOrOpenBlob) {\n\t\treturn function(blob, name, no_auto_bom) {\n\t\t\tif (!no_auto_bom) {\n\t\t\t\tblob = auto_bom(blob);\n\t\t\t}\n\t\t\treturn navigator.msSaveOrOpenBlob(blob, name || \"download\");\n\t\t};\n\t}\n\n\tFS_proto.abort = function() {\n\t\tvar filesaver = this;\n\t\tfilesaver.readyState = filesaver.DONE;\n\t\tdispatch(filesaver, \"abort\");\n\t};\n\tFS_proto.readyState = FS_proto.INIT = 0;\n\tFS_proto.WRITING = 1;\n\tFS_proto.DONE = 2;\n\n\tFS_proto.error =\n\tFS_proto.onwritestart =\n\tFS_proto.onprogress =\n\tFS_proto.onwrite =\n\tFS_proto.onabort =\n\tFS_proto.onerror =\n\tFS_proto.onwriteend =\n\t\tnull;\n\n\treturn saveAs;\n}(\n\t   typeof self !== \"undefined\" && self\n\t|| typeof window !== \"undefined\" && window\n\t|| this.content\n));\n// `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\nif (typeof module !== \"undefined\" && module.exports) {\n  module.exports.saveAs = saveAs;\n} else if ((typeof define !== \"undefined\" && define !== null) && (define.amd != null)) {\n  define([], function() {\n    return saveAs;\n  });\n}",
      "type": "blob"
    },
    "lib/midifile": {
      "path": "lib/midifile",
      "content": "// https://github.com/gasman/jasmid/blob/master/midifile.js\nvar Stream = require('./stream')\n\n/*\nclass to parse the .mid file format\n(depends on stream.js)\n*/\nmodule.exports = function MidiFile (data) {\n  function readChunk (stream) {\n    var id = stream.read(4)\n    var length = stream.readInt32()\n    return {\n      'id': id,\n      'length': length,\n      'data': stream.subarray(length)\n    }\n  }\n\n  var lastEventTypeByte\n\n  stream = Stream(data)\n  var headerChunk = readChunk(stream)\n  if (headerChunk.id != 'MThd' || headerChunk.length != 6) {\n    throw 'Bad .mid file - header not found'\n  }\n  var headerStream = Stream(headerChunk.data)\n  var formatType = headerStream.readInt16()\n  var trackCount = headerStream.readInt16()\n  var timeDivision = headerStream.readInt16()\n\n  if (timeDivision & 0x8000) {\n    throw 'Expressing time division in SMTPE frames is not supported yet'\n  } else {\n    ticksPerBeat = timeDivision\n  }\n\n  var header = {\n    'formatType': formatType,\n    'trackCount': trackCount,\n    'ticksPerBeat': ticksPerBeat\n  }\n  var tracks = []\n  for (var i = 0; i < header.trackCount; i++) {\n    tracks[i] = []\n    var trackChunk = readChunk(stream)\n    if (trackChunk.id != 'MTrk') {\n      throw 'Unexpected chunk - expected MTrk, got ' + trackChunk.id\n    }\n    var trackStream = Stream(trackChunk.data)\n    while (!trackStream.eof()) {\n      var event = readEvent(trackStream)\n      tracks[i].push(event)\n    // console.log(event)\n    }\n  }\n\n  return {\n    'header': header,\n    'tracks': tracks\n  }\n}\n\nfunction readEvent (stream, skipTime) {\n  var event = {}\n  if (!skipTime) {\n    event.deltaTime = stream.readVarInt()\n  }\n\n  var eventTypeByte = stream.readInt8()\n  if ((eventTypeByte & 0xf0) == 0xf0) {\n    /* system / meta event */\n    if (eventTypeByte == 0xff) {\n      /* meta event */\n      event.type = 'meta'\n      var subtypeByte = stream.readInt8()\n      var length = stream.readVarInt()\n      switch (subtypeByte) {\n        case 0x00:\n          event.subtype = 'sequenceNumber'\n          if (length != 2) throw 'Expected length for sequenceNumber event is 2, got ' + length\n          event.number = stream.readInt16()\n          return event\n        case 0x01:\n          event.subtype = 'text'\n          event.text = stream.read(length)\n          return event\n        case 0x02:\n          event.subtype = 'copyrightNotice'\n          event.text = stream.read(length)\n          return event\n        case 0x03:\n          event.subtype = 'trackName'\n          event.text = stream.read(length)\n          return event\n        case 0x04:\n          event.subtype = 'instrumentName'\n          event.text = stream.read(length)\n          return event\n        case 0x05:\n          event.subtype = 'lyrics'\n          event.text = stream.read(length)\n          return event\n        case 0x06:\n          event.subtype = 'marker'\n          event.text = stream.read(length)\n          return event\n        case 0x07:\n          event.subtype = 'cuePoint'\n          event.text = stream.read(length)\n          return event\n        case 0x20:\n          event.subtype = 'midiChannelPrefix'\n          if (length != 1) throw 'Expected length for midiChannelPrefix event is 1, got ' + length\n          event.channel = stream.readInt8()\n          return event\n        case 0x2f:\n          event.subtype = 'endOfTrack'\n          if (length !== 0) throw 'Expected length for endOfTrack event is 0, got ' + length\n          return event\n        case 0x51:\n          event.subtype = 'setTempo'\n          if (length != 3) throw 'Expected length for setTempo event is 3, got ' + length\n          event.microsecondsPerBeat = (\n            (stream.readInt8() << 16)\n            + (stream.readInt8() << 8)\n            + stream.readInt8()\n          )\n          return event\n        case 0x54:\n          event.subtype = 'smpteOffset'\n          if (length != 5) throw 'Expected length for smpteOffset event is 5, got ' + length\n          var hourByte = stream.readInt8()\n          event.frameRate = {\n            0x00: 24, 0x20: 25, 0x40: 29, 0x60: 30\n          }[hourByte & 0x60]\n          event.hour = hourByte & 0x1f\n          event.min = stream.readInt8()\n          event.sec = stream.readInt8()\n          event.frame = stream.readInt8()\n          event.subframe = stream.readInt8()\n          return event\n        case 0x58:\n          event.subtype = 'timeSignature'\n          if (length != 4) throw 'Expected length for timeSignature event is 4, got ' + length\n          event.numerator = stream.readInt8()\n          event.denominator = Math.pow(2, stream.readInt8())\n          event.metronome = stream.readInt8()\n          event.thirtyseconds = stream.readInt8()\n          return event\n        case 0x59:\n          event.subtype = 'keySignature'\n          if (length != 2) throw 'Expected length for keySignature event is 2, got ' + length\n          event.key = stream.readInt8(true)\n          event.scale = stream.readInt8()\n          return event\n        case 0x7f:\n          event.subtype = 'sequencerSpecific'\n          event.data = stream.subarray(length)\n          return event\n        default:\n          // console.log(\"Unrecognised meta event subtype: \" + subtypeByte)\n          event.subtype = 'unknown'\n          event.data = stream.subarray(length)\n          return event\n      }\n      event.data = stream.subarray(length)\n      return event\n    } else if (eventTypeByte == 0xf0) {\n      event.type = 'sysEx'\n      var length = stream.readVarInt()\n      event.data = stream.subarray(length)\n      return event\n    } else if (eventTypeByte == 0xf7) {\n      event.type = 'dividedSysEx'\n      var length = stream.readVarInt()\n      event.data = stream.subarray(length)\n      return event\n    } else {\n      throw 'Unrecognised MIDI event type byte: ' + eventTypeByte\n    }\n  } else {\n    /* channel event */\n    var param1\n    if ((eventTypeByte & 0x80) == 0) {\n      /* running status - reuse lastEventTypeByte as the event type.\n      \teventTypeByte is actually the first parameter\n      */\n      param1 = eventTypeByte\n      eventTypeByte = lastEventTypeByte\n    } else {\n      param1 = stream.readInt8()\n      lastEventTypeByte = eventTypeByte\n    }\n    var eventType = eventTypeByte >> 4\n    event.channel = eventTypeByte & 0x0f\n    event.type = 'channel'\n    switch (eventType) {\n      case 0x08:\n        event.subtype = 'noteOff'\n        event.noteNumber = param1\n        event.velocity = stream.readInt8()\n        return event\n      case 0x09:\n        event.noteNumber = param1\n        event.velocity = stream.readInt8()\n        if (event.velocity == 0) {\n          event.subtype = 'noteOff'\n        } else {\n          event.subtype = 'noteOn'\n        }\n        return event\n      case 0x0a:\n        event.subtype = 'noteAftertouch'\n        event.noteNumber = param1\n        event.amount = stream.readInt8()\n        return event\n      case 0x0b:\n        event.subtype = 'controller'\n        event.controllerType = param1\n        event.value = stream.readInt8()\n        return event\n      case 0x0c:\n        event.subtype = 'programChange'\n        event.programNumber = param1\n        return event\n      case 0x0d:\n        event.subtype = 'channelAftertouch'\n        event.amount = param1\n        return event\n      case 0x0e:\n        event.subtype = 'pitchBend'\n        event.value = param1 + (stream.readInt8() << 7)\n        return event\n      default:\n        throw 'Unrecognised MIDI event type: ' + eventType\n    /*\n    console.log(\"Unrecognised MIDI event type: \" + eventType)\n    stream.readInt8()\n    event.subtype = 'unknown'\n    return event\n    */\n    }\n  }\n}\n\nmodule.exports.readEvent = readEvent\n",
      "type": "blob"
    },
    "lib/read_file": {
      "path": "lib/read_file",
      "content": "(function() {\n  module.exports = function(file, method) {\n    if (method == null) {\n      method = \"readAsText\";\n    }\n    return new Promise(function(resolve, reject) {\n      var reader;\n      reader = new FileReader();\n      reader.onloadend = function() {\n        return resolve(reader.result);\n      };\n      reader.onerror = reject;\n      return reader[method](file);\n    });\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "lib/recorder": {
      "path": "lib/recorder",
      "content": "(function (f) {\n    if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n        module.exports = f()\n    } else if (typeof define === \"function\" && define.amd) {\n        define([], f)\n    } else {\n        var g;\n        if (typeof window !== \"undefined\") {\n            g = window\n        } else if (typeof global !== \"undefined\") {\n            g = global\n        } else if (typeof self !== \"undefined\") {\n            g = self\n        } else {\n            g = this\n        }\n        g.Recorder = f()\n    }\n})(function () {\n    var define, module, exports;\n    return (function e(t, n, r) {\n        function s(o, u) {\n            if (!n[o]) {\n                if (!t[o]) {\n                    var a = typeof require == \"function\" && require;\n                    if (!u && a)return a(o, !0);\n                    if (i)return i(o, !0);\n                    var f = new Error(\"Cannot find module '\" + o + \"'\");\n                    throw f.code = \"MODULE_NOT_FOUND\", f\n                }\n                var l = n[o] = {exports: {}};\n                t[o][0].call(l.exports, function (e) {\n                    var n = t[o][1][e];\n                    return s(n ? n : e)\n                }, l, l.exports, e, t, n, r)\n            }\n            return n[o].exports\n        }\n\n        var i = typeof require == \"function\" && require;\n        for (var o = 0; o < r.length; o++)s(r[o]);\n        return s\n    })({\n        1: [function (require, module, exports) {\n            \"use strict\";\n\n            module.exports = require(\"./recorder\").Recorder;\n\n        }, {\"./recorder\": 2}], 2: [function (require, module, exports) {\n            'use strict';\n\n            var _createClass = (function () {\n                function defineProperties(target, props) {\n                    for (var i = 0; i < props.length; i++) {\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n\n                return function (Constructor, protoProps, staticProps) {\n                    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) defineProperties(Constructor, staticProps);\n                    return Constructor;\n                };\n            })();\n\n            Object.defineProperty(exports, \"__esModule\", {\n                value: true\n            });\n            exports.Recorder = undefined;\n\n            var _inlineWorker = require('inline-worker');\n\n            var _inlineWorker2 = _interopRequireDefault(_inlineWorker);\n\n            function _interopRequireDefault(obj) {\n                return obj && obj.__esModule ? obj : {default: obj};\n            }\n\n            function _classCallCheck(instance, Constructor) {\n                if (!(instance instanceof Constructor)) {\n                    throw new TypeError(\"Cannot call a class as a function\");\n                }\n            }\n\n            var Recorder = exports.Recorder = (function () {\n                function Recorder(source, cfg) {\n                    var _this = this;\n\n                    _classCallCheck(this, Recorder);\n\n                    this.config = {\n                        bufferLen: 4096,\n                        numChannels: 2,\n                        mimeType: 'audio/wav'\n                    };\n                    this.recording = false;\n                    this.callbacks = {\n                        getBuffer: [],\n                        exportWAV: []\n                    };\n\n                    Object.assign(this.config, cfg);\n                    this.context = source.context;\n                    this.node = (this.context.createScriptProcessor || this.context.createJavaScriptNode).call(this.context, this.config.bufferLen, this.config.numChannels, this.config.numChannels);\n\n                    this.node.onaudioprocess = function (e) {\n                        if (!_this.recording) return;\n\n                        var buffer = [];\n                        for (var channel = 0; channel < _this.config.numChannels; channel++) {\n                            buffer.push(e.inputBuffer.getChannelData(channel));\n                        }\n                        _this.worker.postMessage({\n                            command: 'record',\n                            buffer: buffer\n                        });\n                    };\n\n                    source.connect(this.node);\n                    this.node.connect(this.context.destination); //this should not be necessary\n\n                    var self = {};\n                    this.worker = new _inlineWorker2.default(function () {\n                        var recLength = 0,\n                            recBuffers = [],\n                            sampleRate = undefined,\n                            numChannels = undefined;\n\n                        self.onmessage = function (e) {\n                            switch (e.data.command) {\n                                case 'init':\n                                    init(e.data.config);\n                                    break;\n                                case 'record':\n                                    record(e.data.buffer);\n                                    break;\n                                case 'exportWAV':\n                                    exportWAV(e.data.type);\n                                    break;\n                                case 'getBuffer':\n                                    getBuffer();\n                                    break;\n                                case 'clear':\n                                    clear();\n                                    break;\n                            }\n                        };\n\n                        function init(config) {\n                            sampleRate = config.sampleRate;\n                            numChannels = config.numChannels;\n                            initBuffers();\n                        }\n\n                        function record(inputBuffer) {\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                recBuffers[channel].push(inputBuffer[channel]);\n                            }\n                            recLength += inputBuffer[0].length;\n                        }\n\n                        function exportWAV(type) {\n                            var buffers = [];\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                buffers.push(mergeBuffers(recBuffers[channel], recLength));\n                            }\n                            var interleaved = undefined;\n                            if (numChannels === 2) {\n                                interleaved = interleave(buffers[0], buffers[1]);\n                            } else {\n                                interleaved = buffers[0];\n                            }\n                            var dataview = encodeWAV(interleaved);\n                            var audioBlob = new Blob([dataview], {type: type});\n\n                            self.postMessage({command: 'exportWAV', data: audioBlob});\n                        }\n\n                        function getBuffer() {\n                            var buffers = [];\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                buffers.push(mergeBuffers(recBuffers[channel], recLength));\n                            }\n                            self.postMessage({command: 'getBuffer', data: buffers});\n                        }\n\n                        function clear() {\n                            recLength = 0;\n                            recBuffers = [];\n                            initBuffers();\n                        }\n\n                        function initBuffers() {\n                            for (var channel = 0; channel < numChannels; channel++) {\n                                recBuffers[channel] = [];\n                            }\n                        }\n\n                        function mergeBuffers(recBuffers, recLength) {\n                            var result = new Float32Array(recLength);\n                            var offset = 0;\n                            for (var i = 0; i < recBuffers.length; i++) {\n                                result.set(recBuffers[i], offset);\n                                offset += recBuffers[i].length;\n                            }\n                            return result;\n                        }\n\n                        function interleave(inputL, inputR) {\n                            var length = inputL.length + inputR.length;\n                            var result = new Float32Array(length);\n\n                            var index = 0,\n                                inputIndex = 0;\n\n                            while (index < length) {\n                                result[index++] = inputL[inputIndex];\n                                result[index++] = inputR[inputIndex];\n                                inputIndex++;\n                            }\n                            return result;\n                        }\n\n                        function floatTo16BitPCM(output, offset, input) {\n                            for (var i = 0; i < input.length; i++, offset += 2) {\n                                var s = Math.max(-1, Math.min(1, input[i]));\n                                output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\n                            }\n                        }\n\n                        function writeString(view, offset, string) {\n                            for (var i = 0; i < string.length; i++) {\n                                view.setUint8(offset + i, string.charCodeAt(i));\n                            }\n                        }\n\n                        function encodeWAV(samples) {\n                            var buffer = new ArrayBuffer(44 + samples.length * 2);\n                            var view = new DataView(buffer);\n\n                            /* RIFF identifier */\n                            writeString(view, 0, 'RIFF');\n                            /* RIFF chunk length */\n                            view.setUint32(4, 36 + samples.length * 2, true);\n                            /* RIFF type */\n                            writeString(view, 8, 'WAVE');\n                            /* format chunk identifier */\n                            writeString(view, 12, 'fmt ');\n                            /* format chunk length */\n                            view.setUint32(16, 16, true);\n                            /* sample format (raw) */\n                            view.setUint16(20, 1, true);\n                            /* channel count */\n                            view.setUint16(22, numChannels, true);\n                            /* sample rate */\n                            view.setUint32(24, sampleRate, true);\n                            /* byte rate (sample rate * block align) */\n                            view.setUint32(28, sampleRate * 4, true);\n                            /* block align (channel count * bytes per sample) */\n                            view.setUint16(32, numChannels * 2, true);\n                            /* bits per sample */\n                            view.setUint16(34, 16, true);\n                            /* data chunk identifier */\n                            writeString(view, 36, 'data');\n                            /* data chunk length */\n                            view.setUint32(40, samples.length * 2, true);\n\n                            floatTo16BitPCM(view, 44, samples);\n\n                            return view;\n                        }\n                    }, self);\n\n                    this.worker.postMessage({\n                        command: 'init',\n                        config: {\n                            sampleRate: this.context.sampleRate,\n                            numChannels: this.config.numChannels\n                        }\n                    });\n\n                    this.worker.onmessage = function (e) {\n                        var cb = _this.callbacks[e.data.command].pop();\n                        if (typeof cb == 'function') {\n                            cb(e.data.data);\n                        }\n                    };\n                }\n\n                _createClass(Recorder, [{\n                    key: 'record',\n                    value: function record() {\n                        this.recording = true;\n                    }\n                }, {\n                    key: 'stop',\n                    value: function stop() {\n                        this.recording = false;\n                    }\n                }, {\n                    key: 'clear',\n                    value: function clear() {\n                        this.worker.postMessage({command: 'clear'});\n                    }\n                }, {\n                    key: 'getBuffer',\n                    value: function getBuffer(cb) {\n                        cb = cb || this.config.callback;\n                        if (!cb) throw new Error('Callback not set');\n\n                        this.callbacks.getBuffer.push(cb);\n\n                        this.worker.postMessage({command: 'getBuffer'});\n                    }\n                }, {\n                    key: 'exportWAV',\n                    value: function exportWAV(cb, mimeType) {\n                        mimeType = mimeType || this.config.mimeType;\n                        cb = cb || this.config.callback;\n                        if (!cb) throw new Error('Callback not set');\n\n                        this.callbacks.exportWAV.push(cb);\n\n                        this.worker.postMessage({\n                            command: 'exportWAV',\n                            type: mimeType\n                        });\n                    }\n                }], [{\n                    key: 'forceDownload',\n                    value: function forceDownload() {\n                        var url = (window.URL || window.webkitURL).createObjectURL(blob);\n                        var link = window.document.createElement('a');\n                        link.href = url;\n                        link.download = filename || 'output.wav';\n                        var click = document.createEvent(\"Event\");\n                        click.initEvent(\"click\", true, true);\n                        link.dispatchEvent(click);\n                    }\n                }]);\n\n                return Recorder;\n            })();\n\n            exports.default = Recorder;\n\n        }, {\"inline-worker\": 3}], 3: [function (require, module, exports) {\n            \"use strict\";\n\n            module.exports = require(\"./inline-worker\");\n        }, {\"./inline-worker\": 4}], 4: [function (require, module, exports) {\n            (function (global) {\n                \"use strict\";\n\n                var _createClass = (function () {\n                    function defineProperties(target, props) {\n                        for (var key in props) {\n                            var prop = props[key];\n                            prop.configurable = true;\n                            if (prop.value) prop.writable = true;\n                        }\n                        Object.defineProperties(target, props);\n                    }\n\n                    return function (Constructor, protoProps, staticProps) {\n                        if (protoProps) defineProperties(Constructor.prototype, protoProps);\n                        if (staticProps) defineProperties(Constructor, staticProps);\n                        return Constructor;\n                    };\n                })();\n\n                var _classCallCheck = function (instance, Constructor) {\n                    if (!(instance instanceof Constructor)) {\n                        throw new TypeError(\"Cannot call a class as a function\");\n                    }\n                };\n\n                var WORKER_ENABLED = !!(global === global.window && global.URL && global.Blob && global.Worker);\n\n                var InlineWorker = (function () {\n                    function InlineWorker(func, self) {\n                        var _this = this;\n\n                        _classCallCheck(this, InlineWorker);\n\n                        if (WORKER_ENABLED) {\n                            var functionBody = func.toString().trim().match(/^function\\s*\\w*\\s*\\([\\w\\s,]*\\)\\s*{([\\w\\W]*?)}$/)[1];\n                            var url = global.URL.createObjectURL(new global.Blob([functionBody], {type: \"text/javascript\"}));\n\n                            return new global.Worker(url);\n                        }\n\n                        this.self = self;\n                        this.self.postMessage = function (data) {\n                            setTimeout(function () {\n                                _this.onmessage({data: data});\n                            }, 0);\n                        };\n\n                        setTimeout(function () {\n                            func.call(self);\n                        }, 0);\n                    }\n\n                    _createClass(InlineWorker, {\n                        postMessage: {\n                            value: function postMessage(data) {\n                                var _this = this;\n\n                                setTimeout(function () {\n                                    _this.self.onmessage({data: data});\n                                }, 0);\n                            }\n                        }\n                    });\n\n                    return InlineWorker;\n                })();\n\n                module.exports = InlineWorker;\n            }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n        }, {}]\n    }, {}, [1])(1)\n});\n",
      "type": "blob"
    },
    "lib/sf2_parser": {
      "path": "lib/sf2_parser",
      "content": "/*! JavaScript SoundFont 2 Parser. Copyright 2013-2015 imaya/GREE Inc and Colin Clark. Licensed under the MIT License. */\n// https://github.com/colinbdclark/sf2-parser\n/*\n * JavaScript SoundFont 2 Parser\n *\n * Copyright 2013 imaya/GREE Inc\n * Copyright 2015 Colin Clark\n *\n * Based on code from the \"SoundFont Synthesizer for WebMidiLink\"\n *   https://github.com/gree/sf2synth.js\n *\n * Licensed under the MIT License.\n */\n\n/*global require*/\n\n(function (root, factory) {\n    if (typeof exports === \"object\") {\n        // We're in a CommonJS-style loader.\n        root.sf2 = exports;\n        factory(exports);\n    } else if (typeof define === \"function\" && define.amd) {\n        // We're in an AMD-style loader.\n        define([\"exports\"], function (exports) {\n            root.sf2 = exports;\n            return (root.sf2, factory(exports));\n        });\n    } else {\n        // Plain old browser.\n        root.sf2 = {};\n        factory(root.sf2);\n    }\n}(this, function (exports) {\n    \"use strict\";\n\n    var sf2 = exports;\n\n    sf2.Parser = function (input, options) {\n      options = options || {};\n      /** @type {ByteArray} */\n      this.input = input;\n      /** @type {(Object|undefined)} */\n      this.parserOptions = options.parserOptions;\n\n      /** @type {Array.<Object>} */\n      // this.presetHeader;\n      /** @type {Array.<Object>} */\n      // this.presetZone;\n      /** @type {Array.<Object>} */\n      // this.presetZoneModulator;\n      /** @type {Array.<Object>} */\n      // this.presetZoneGenerator;\n      /** @type {Array.<Object>} */\n      // this.instrument;\n      /** @type {Array.<Object>} */\n      // this.instrumentZone;\n      /** @type {Array.<Object>} */\n      // this.instrumentZoneModulator;\n      /** @type {Array.<Object>} */\n      // this.instrumentZoneGenerator;\n      /** @type {Array.<Object>} */\n      //this.sampleHeader;\n    };\n\n    sf2.Parser.prototype.parse = function () {\n      /** @type {sf2.Riff.Parser} */\n      var parser = new sf2.Riff.Parser(this.input, this.parserOptions);\n      /** @type {?sf2.Riff.Chunk} */\n      var chunk;\n\n      // parse RIFF chunk\n      parser.parse();\n      if (parser.chunkList.length !== 1) {\n        throw new Error('wrong chunk length');\n      }\n\n      chunk = parser.getChunk(0);\n      if (chunk === null) {\n        throw new Error('chunk not found');\n      }\n\n      this.parseRiffChunk(chunk);\n\n      // TODO: Presumably this is here to reduce memory,\n      // but does it really matter? Shouldn't we always be\n      // referencing the underlying ArrayBuffer and thus\n      // it will persist, in which case why delete it?\n      this.input = null;\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseRiffChunk = function (chunk) {\n      /** @type {sf2.Riff.Parser} */\n      var parser;\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {string} */\n      var signature;\n\n      // check parse target\n      if (chunk.type !== 'RIFF') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      // check signature\n      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\n      if (signature !== 'sfbk') {\n        throw new Error('invalid signature:' + signature);\n      }\n\n      // read structure\n      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});\n      parser.parse();\n      if (parser.getNumberOfChunks() !== 3) {\n        throw new Error('invalid sfbk structure');\n      }\n\n      // INFO-list\n      this.parseInfoList(/** @type {!sf2.Riff.Chunk} */(parser.getChunk(0)));\n\n      // sdta-list\n      this.parseSdtaList(/** @type {!sf2.Riff.Chunk} */(parser.getChunk(1)));\n\n      // pdta-list\n      this.parsePdtaList(/** @type {!sf2.Riff.Chunk} */(parser.getChunk(2)));\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseInfoList = function (chunk) {\n      /** @type {sf2.Riff.Parser} */\n      var parser;\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {string} */\n      var signature;\n\n      // check parse target\n      if (chunk.type !== 'LIST') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      // check signature\n      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\n      if (signature !== 'INFO') {\n        throw new Error('invalid signature:' + signature);\n      }\n\n      // read structure\n      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});\n      parser.parse();\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseSdtaList = function (chunk) {\n      /** @type {sf2.Riff.Parser} */\n      var parser;\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {string} */\n      var signature;\n\n      // check parse target\n      if (chunk.type !== 'LIST') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      // check signature\n      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\n      if (signature !== 'sdta') {\n        throw new Error('invalid signature:' + signature);\n      }\n\n      // read structure\n      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});\n      parser.parse();\n      if (parser.chunkList.length !== 1) {\n        throw new Error('TODO');\n      }\n      this.samplingData =\n        /** @type {{type: string, size: number, offset: number}} */\n        (parser.getChunk(0));\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePdtaList = function (chunk) {\n      /** @type {sf2.Riff.Parser} */\n      var parser;\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {string} */\n      var signature;\n\n      // check parse target\n      if (chunk.type !== 'LIST') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      // check signature\n      signature = String.fromCharCode(data[ip++], data[ip++], data[ip++], data[ip++]);\n      if (signature !== 'pdta') {\n        throw new Error('invalid signature:' + signature);\n      }\n\n      // read structure\n      parser = new sf2.Riff.Parser(data, {'index': ip, 'length': chunk.size - 4});\n      parser.parse();\n\n      // check number of chunks\n      if (parser.getNumberOfChunks() !== 9) {\n        throw new Error('invalid pdta chunk');\n      }\n\n      this.parsePhdr(/** @type {sf2.Riff.Chunk} */(parser.getChunk(0)));\n      this.parsePbag(/** @type {sf2.Riff.Chunk} */(parser.getChunk(1)));\n      this.parsePmod(/** @type {sf2.Riff.Chunk} */(parser.getChunk(2)));\n      this.parsePgen(/** @type {sf2.Riff.Chunk} */(parser.getChunk(3)));\n      this.parseInst(/** @type {sf2.Riff.Chunk} */(parser.getChunk(4)));\n      this.parseIbag(/** @type {sf2.Riff.Chunk} */(parser.getChunk(5)));\n      this.parseImod(/** @type {sf2.Riff.Chunk} */(parser.getChunk(6)));\n      this.parseIgen(/** @type {sf2.Riff.Chunk} */(parser.getChunk(7)));\n      this.parseShdr(/** @type {sf2.Riff.Chunk} */(parser.getChunk(8)));\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePhdr = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var presetHeader = this.presetHeader = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n\n      // check parse target\n      if (chunk.type !== 'phdr') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      while (ip < size) {\n        presetHeader.push({\n          presetName: String.fromCharCode.apply(null, data.subarray(ip, ip += 20)),\n          preset: data[ip++] | (data[ip++] << 8),\n          bank: data[ip++] | (data[ip++] << 8),\n          presetBagIndex: data[ip++] | (data[ip++] << 8),\n          library: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0,\n          genre: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0,\n          morphology: (data[ip++] | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)) >>> 0\n        });\n      }\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePbag = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var presetZone = this.presetZone = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n\n      // check parse target\n      if (chunk.type !== 'pbag') {\n        throw new Error('invalid chunk type:'  + chunk.type);\n      }\n\n      while (ip < size) {\n        presetZone.push({\n          presetGeneratorIndex: data[ip++] | (data[ip++] << 8),\n          presetModulatorIndex: data[ip++] | (data[ip++] << 8)\n        });\n      }\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePmod = function (chunk) {\n      // check parse target\n      if (chunk.type !== 'pmod') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      this.presetZoneModulator = this.parseModulator(chunk);\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parsePgen = function (chunk) {\n      // check parse target\n      if (chunk.type !== 'pgen') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n      this.presetZoneGenerator = this.parseGenerator(chunk);\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseInst = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var instrument = this.instrument = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n\n      // check parse target\n      if (chunk.type !== 'inst') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      while (ip < size) {\n        instrument.push({\n          instrumentName: String.fromCharCode.apply(null, data.subarray(ip, ip += 20)),\n          instrumentBagIndex: data[ip++] | (data[ip++] << 8)\n        });\n      }\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseIbag = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var instrumentZone = this.instrumentZone = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n\n      // check parse target\n      if (chunk.type !== 'ibag') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n\n      while (ip < size) {\n        instrumentZone.push({\n          instrumentGeneratorIndex: data[ip++] | (data[ip++] << 8),\n          instrumentModulatorIndex: data[ip++] | (data[ip++] << 8)\n        });\n      }\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseImod = function (chunk) {\n      // check parse target\n      if (chunk.type !== 'imod') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      this.instrumentZoneModulator = this.parseModulator(chunk);\n    };\n\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseIgen = function (chunk) {\n      // check parse target\n      if (chunk.type !== 'igen') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      this.instrumentZoneGenerator = this.parseGenerator(chunk);\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     */\n    sf2.Parser.prototype.parseShdr = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {Array.<Object>} */\n      var samples = this.sample = [];\n      /** @type {Array.<Object>} */\n      var sampleHeader = this.sampleHeader = [];\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n      /** @type {string} */\n      var sampleName;\n      /** @type {number} */\n      var start;\n      /** @type {number} */\n      var end;\n      /** @type {number} */\n      var startLoop;\n      /** @type {number} */\n      var endLoop;\n      /** @type {number} */\n      var sampleRate;\n      /** @type {number} */\n      var originalPitch;\n      /** @type {number} */\n      var pitchCorrection;\n      /** @type {number} */\n      var sampleLink;\n      /** @type {number} */\n      var sampleType;\n\n      // check parse target\n      if (chunk.type !== 'shdr') {\n        throw new Error('invalid chunk type:' + chunk.type);\n      }\n\n      while (ip < size) {\n        sampleName = String.fromCharCode.apply(null, data.subarray(ip, ip += 20));\n        start = (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        end = (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        startLoop = (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        endLoop =  (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        sampleRate = (\n          (data[ip++] << 0) | (data[ip++] << 8) | (data[ip++] << 16) | (data[ip++] << 24)\n        ) >>> 0;\n        originalPitch = data[ip++];\n        pitchCorrection = (data[ip++] << 24) >> 24;\n        sampleLink = data[ip++] | (data[ip++] << 8);\n        sampleType = data[ip++] | (data[ip++] << 8);\n\n        var sample = new Int16Array(new Uint8Array(data.subarray(\n          this.samplingData.offset + start * 2,\n          this.samplingData.offset + end   * 2\n        )).buffer);\n\n        startLoop -= start;\n        endLoop -= start;\n\n        // if (sampleRate > 0) {\n        //   var adjust = this.adjustSampleData(sample, sampleRate);\n        //   sample = adjust.sample;\n        //   sampleRate *= adjust.multiply;\n        //   startLoop *= adjust.multiply;\n        //   endLoop *= adjust.multiply;\n        // }\n\n        samples.push(sample);\n\n        sampleHeader.push({\n          sampleName: sampleName,\n          start: start,\n          end: end,\n          startLoop: startLoop,\n          endLoop: endLoop,\n          sampleRate: sampleRate,\n          originalPitch: originalPitch,\n          pitchCorrection: pitchCorrection,\n          sampleLink: sampleLink,\n          sampleType: sampleType\n        });\n      }\n    };\n\n    // TODO: This function is questionable;\n    // it doesn't interpolate the sample data\n    // and always forces a sample rate of 22050 or higher. Why?\n    sf2.Parser.prototype.adjustSampleData = function (sample, sampleRate) {\n      /** @type {Int16Array} */\n      var newSample;\n      /** @type {number} */\n      var i;\n      /** @type {number} */\n      var il;\n      /** @type {number} */\n      var j;\n      /** @type {number} */\n      var multiply = 1;\n\n      // buffer\n      while (sampleRate < 22050) {\n        newSample = new Int16Array(sample.length * 2);\n        for (i = j = 0, il = sample.length; i < il; ++i) {\n          newSample[j++] = sample[i];\n          newSample[j++] = sample[i];\n        }\n        sample = newSample;\n        multiply *= 2;\n        sampleRate *= 2;\n      }\n\n      return {\n        sample: sample,\n        multiply: multiply\n      };\n    };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     * @return {Array.<Object>}\n     */\n    sf2.Parser.prototype.parseModulator = function (chunk) {\n        /** @type {ByteArray} */\n        var data = this.input;\n        /** @type {number} */\n        var ip = chunk.offset;\n        /** @type {number} */\n        var size = chunk.offset + chunk.size;\n        /** @type {number} */\n        var code;\n        /** @type {string} */\n        var key;\n        /** @type {Array.<Object>} */\n        var output = [];\n\n        while (ip < size) {\n          // Src  Oper\n          // TODO\n          ip += 2;\n\n          // Dest Oper\n          code = data[ip++] | (data[ip++] << 8);\n          key = sf2.Parser.GeneratorEnumeratorTable[code];\n          if (key === undefined) {\n            // Amount\n            output.push({\n              type: key,\n              value: {\n                code: code,\n                amount: data[ip] | (data[ip+1] << 8) << 16 >> 16,\n                lo: data[ip++],\n                hi: data[ip++]\n              }\n            });\n          } else {\n            // Amount\n            switch (key) {\n              case 'keyRange': /* FALLTHROUGH */\n              case 'velRange': /* FALLTHROUGH */\n              case 'keynum': /* FALLTHROUGH */\n              case 'velocity':\n                output.push({\n                  type: key,\n                  value: {\n                    lo: data[ip++],\n                    hi: data[ip++]\n                  }\n                });\n                break;\n              default:\n                output.push({\n                  type: key,\n                  value: {\n                    amount: data[ip++] | (data[ip++] << 8) << 16 >> 16\n                  }\n                });\n                break;\n            }\n          }\n\n          // AmtSrcOper\n          // TODO\n          ip += 2;\n\n          // Trans Oper\n          // TODO\n          ip += 2;\n        }\n\n        return output;\n      };\n\n    /**\n     * @param {sf2.Riff.Chunk} chunk\n     * @return {Array.<Object>}\n     */\n    sf2.Parser.prototype.parseGenerator = function (chunk) {\n      /** @type {ByteArray} */\n      var data = this.input;\n      /** @type {number} */\n      var ip = chunk.offset;\n      /** @type {number} */\n      var size = chunk.offset + chunk.size;\n      /** @type {number} */\n      var code;\n      /** @type {string} */\n      var key;\n      /** @type {Array.<Object>} */\n      var output = [];\n\n      while (ip < size) {\n        code = data[ip++] | (data[ip++] << 8);\n        key = sf2.Parser.GeneratorEnumeratorTable[code];\n        if (key === undefined) {\n          output.push({\n            type: key,\n            value: {\n              code: code,\n              amount: data[ip] | (data[ip+1] << 8) << 16 >> 16,\n              lo: data[ip++],\n              hi: data[ip++]\n            }\n          });\n          continue;\n        }\n\n        switch (key) {\n          case 'keynum': /* FALLTHROUGH */\n          case 'keyRange': /* FALLTHROUGH */\n          case 'velRange': /* FALLTHROUGH */\n          case 'velocity':\n            output.push({\n              type: key,\n              value: {\n                lo: data[ip++],\n                hi: data[ip++]\n              }\n            });\n            break;\n          default:\n            output.push({\n              type: key,\n              value: {\n                amount: data[ip++] | (data[ip++] << 8) << 16 >> 16\n              }\n            });\n            break;\n        }\n      }\n\n      return output;\n    };\n\n    sf2.Parser.prototype.getInstruments = function () {\n      /** @type {Array.<Object>} */\n      var instrument = this.instrument;\n      /** @type {Array.<Object>} */\n      var zone = this.instrumentZone;\n      /** @type {Array.<Object>} */\n      var output = [];\n      /** @type {number} */\n      var bagIndex;\n      /** @type {number} */\n      var bagIndexEnd;\n      /** @type {Array.<Object>} */\n      var zoneInfo;\n      /** @type {{generator: Object, generatorInfo: Array.<Object>}} */\n      var instrumentGenerator;\n      /** @type {{modulator: Object, modulatorInfo: Array.<Object>}} */\n      var instrumentModulator;\n      /** @type {number} */\n      var i;\n      /** @type {number} */\n      var il;\n      /** @type {number} */\n      var j;\n      /** @type {number} */\n      var jl;\n\n      // instrument -> instrument bag -> generator / modulator\n      for (i = 0, il = instrument.length; i < il; ++i) {\n        bagIndex    = instrument[i].instrumentBagIndex;\n        bagIndexEnd = instrument[i+1] ? instrument[i+1].instrumentBagIndex : zone.length;\n        zoneInfo = [];\n\n        // instrument bag\n        for (j = bagIndex, jl = bagIndexEnd; j < jl; ++j) {\n          instrumentGenerator = this.createInstrumentGenerator_(zone, j);\n          instrumentModulator = this.createInstrumentModulator_(zone, j);\n\n          zoneInfo.push({\n            generator: instrumentGenerator.generator,\n            generatorSequence: instrumentGenerator.generatorInfo,\n            modulator: instrumentModulator.modulator,\n            modulatorSequence: instrumentModulator.modulatorInfo\n          });\n        }\n\n        output.push({\n          name: instrument[i].instrumentName,\n          info: zoneInfo\n        });\n      }\n\n      return output;\n    };\n\n    sf2.Parser.prototype.getPresets = function () {\n      /** @type {Array.<Object>} */\n      var preset   = this.presetHeader;\n      /** @type {Array.<Object>} */\n      var zone = this.presetZone;\n      /** @type {Array.<Object>} */\n      var output = [];\n      /** @type {number} */\n      var bagIndex;\n      /** @type {number} */\n      var bagIndexEnd;\n      /** @type {Array.<Object>} */\n      var zoneInfo;\n      /** @type {number} */\n      var instrument;\n      /** @type {{generator: Object, generatorInfo: Array.<Object>}} */\n      var presetGenerator;\n      /** @type {{modulator: Object, modulatorInfo: Array.<Object>}} */\n      var presetModulator;\n      /** @type {number} */\n      var i;\n      /** @type {number} */\n      var il;\n      /** @type {number} */\n      var j;\n      /** @type {number} */\n      var jl;\n\n      // preset -> preset bag -> generator / modulator\n      for (i = 0, il = preset.length; i < il; ++i) {\n        bagIndex    = preset[i].presetBagIndex;\n        bagIndexEnd = preset[i+1] ? preset[i+1].presetBagIndex : zone.length;\n        zoneInfo = [];\n\n        // preset bag\n        for (j = bagIndex, jl = bagIndexEnd; j < jl; ++j) {\n          presetGenerator = this.createPresetGenerator_(zone, j);\n          presetModulator = this.createPresetModulator_(zone, j);\n\n          zoneInfo.push({\n            generator: presetGenerator.generator,\n            generatorSequence: presetGenerator.generatorInfo,\n            modulator: presetModulator.modulator,\n            modulatorSequence: presetModulator.modulatorInfo\n          });\n\n          instrument =\n            presetGenerator.generator.instrument !== undefined ?\n              presetGenerator.generator.instrument.amount :\n            presetModulator.modulator.instrument !== undefined ?\n              presetModulator.modulator.instrument.amount :\n            null;\n        }\n\n        output.push({\n          name: preset[i].presetName,\n          info: zoneInfo,\n          header: preset[i],\n          instrument: instrument\n        });\n      }\n\n      return output;\n    };\n\n    /**\n     * @param {Array.<Object>} zone\n     * @param {number} index\n     * @returns {{generator: Object, generatorInfo: Array.<Object>}}\n     * @private\n     */\n    sf2.Parser.prototype.createInstrumentGenerator_ = function (zone, index) {\n      var modgen = this.createBagModGen_(\n        zone,\n        zone[index].instrumentGeneratorIndex,\n        zone[index+1] ? zone[index+1].instrumentGeneratorIndex: this.instrumentZoneGenerator.length,\n        this.instrumentZoneGenerator\n      );\n\n      return {\n        generator: modgen.modgen,\n        generatorInfo: modgen.modgenInfo\n      };\n    };\n\n    /**\n     * @param {Array.<Object>} zone\n     * @param {number} index\n     * @returns {{modulator: Object, modulatorInfo: Array.<Object>}}\n     * @private\n     */\n    sf2.Parser.prototype.createInstrumentModulator_ = function (zone, index) {\n      var modgen = this.createBagModGen_(\n        zone,\n        zone[index].presetModulatorIndex,\n        zone[index+1] ? zone[index+1].instrumentModulatorIndex: this.instrumentZoneModulator.length,\n        this.instrumentZoneModulator\n      );\n\n      return {\n        modulator: modgen.modgen,\n        modulatorInfo: modgen.modgenInfo\n      };\n    };\n\n    /**\n     * @param {Array.<Object>} zone\n     * @param {number} index\n     * @returns {{generator: Object, generatorInfo: Array.<Object>}}\n     * @private\n     */\n    sf2.Parser.prototype.createPresetGenerator_ = function (zone, index) {\n      var modgen = this.createBagModGen_(\n        zone,\n        zone[index].presetGeneratorIndex,\n        zone[index+1] ? zone[index+1].presetGeneratorIndex : this.presetZoneGenerator.length,\n        this.presetZoneGenerator\n      );\n\n      return {\n        generator: modgen.modgen,\n        generatorInfo: modgen.modgenInfo\n      };\n    };\n\n      /**\n       * @param {Array.<Object>} zone\n       * @param {number} index\n       * @returns {{modulator: Object, modulatorInfo: Array.<Object>}}\n       * @private\n       */\n    sf2.Parser.prototype.createPresetModulator_ = function (zone, index) {\n      /** @type {{modgen: Object, modgenInfo: Array.<Object>}} */\n      var modgen = this.createBagModGen_(\n        zone,\n        zone[index].presetModulatorIndex,\n        zone[index+1] ? zone[index+1].presetModulatorIndex : this.presetZoneModulator.length,\n        this.presetZoneModulator\n      );\n\n      return {\n        modulator: modgen.modgen,\n        modulatorInfo: modgen.modgenInfo\n      };\n    };\n\n    /**\n     * @param {Array.<Object>} zone\n     * @param {number} indexStart\n     * @param {number} indexEnd\n     * @param zoneModGen\n     * @returns {{modgen: Object, modgenInfo: Array.<Object>}}\n     * @private\n     */\n    sf2.Parser.prototype.createBagModGen_ = function (zone, indexStart, indexEnd, zoneModGen) {\n      /** @type {Array.<Object>} */\n      var modgenInfo = [];\n      /** @type {Object} */\n      var modgen = {\n        unknown: [],\n        'keyRange': {\n          hi: 127,\n          lo: 0\n        }\n      }; // TODO\n      /** @type {Object} */\n      var info;\n      /** @type {number} */\n      var i;\n      /** @type {number} */\n      var il;\n\n      for (i = indexStart, il = indexEnd; i < il; ++i) {\n        info = zoneModGen[i];\n        modgenInfo.push(info);\n\n        if (info.type === 'unknown') {\n          modgen.unknown.push(info.value);\n        } else {\n          modgen[info.type] = info.value;\n        }\n      }\n\n      return {\n        modgen: modgen,\n        modgenInfo: modgenInfo\n      };\n    };\n\n\n    /**\n     * @type {Array.<string>}\n     * @const\n     */\n    sf2.Parser.GeneratorEnumeratorTable = [\n      'startAddrsOffset',\n      'endAddrsOffset',\n      'startloopAddrsOffset',\n      'endloopAddrsOffset',\n      'startAddrsCoarseOffset',\n      'modLfoToPitch',\n      'vibLfoToPitch',\n      'modEnvToPitch',\n      'initialFilterFc',\n      'initialFilterQ',\n      'modLfoToFilterFc',\n      'modEnvToFilterFc',\n      'endAddrsCoarseOffset',\n      'modLfoToVolume',\n      undefined, // 14\n      'chorusEffectsSend',\n      'reverbEffectsSend',\n      'pan',\n      undefined,\n      undefined,\n      undefined, // 18,19,20\n      'delayModLFO',\n      'freqModLFO',\n      'delayVibLFO',\n      'freqVibLFO',\n      'delayModEnv',\n      'attackModEnv',\n      'holdModEnv',\n      'decayModEnv',\n      'sustainModEnv',\n      'releaseModEnv',\n      'keynumToModEnvHold',\n      'keynumToModEnvDecay',\n      'delayVolEnv',\n      'attackVolEnv',\n      'holdVolEnv',\n      'decayVolEnv',\n      'sustainVolEnv',\n      'releaseVolEnv',\n      'keynumToVolEnvHold',\n      'keynumToVolEnvDecay',\n      'instrument',\n      undefined, // 42\n      'keyRange',\n      'velRange',\n      'startloopAddrsCoarseOffset',\n      'keynum',\n      'velocity',\n      'initialAttenuation',\n      undefined, // 49\n      'endloopAddrsCoarseOffset',\n      'coarseTune',\n      'fineTune',\n      'sampleID',\n      'sampleModes',\n      undefined, // 55\n      'scaleTuning',\n      'exclusiveClass',\n      'overridingRootKey'\n    ];\n\n\n    sf2.Riff = {};\n\n    sf2.Riff.Parser = function (input, options) {\n      options = options || {};\n      /** @type {ByteArray} */\n      this.input = input;\n      /** @type {number} */\n      this.ip = options.index || 0;\n      /** @type {number} */\n      this.length = options.length || input.length - this.ip;\n      /** @type {Array.<sf2.Riff.Chunk>} */\n    //   this.chunkList;\n      /** @type {number} */\n      this.offset = this.ip;\n      /** @type {boolean} */\n      this.padding = options.padding !== undefined ? options.padding : true;\n      /** @type {boolean} */\n      this.bigEndian = options.bigEndian !== undefined ? options.bigEndian : false;\n    };\n\n    /**\n     * @param {string} type\n     * @param {number} size\n     * @param {number} offset\n     * @constructor\n     */\n    sf2.Riff.Chunk = function (type, size, offset) {\n      /** @type {string} */\n      this.type = type;\n      /** @type {number} */\n      this.size = size;\n      /** @type {number} */\n      this.offset = offset;\n    };\n\n    sf2.Riff.Parser.prototype.parse = function () {\n      /** @type {number} */\n      var length = this.length + this.offset;\n\n      this.chunkList = [];\n\n      while (this.ip < length) {\n        this.parseChunk();\n      }\n    };\n\n    sf2.Riff.Parser.prototype.parseChunk = function () {\n      /** @type {ByteArray} */\n      var input = this.input;\n      /** @type {number} */\n      var ip = this.ip;\n      /** @type {number} */\n      var size;\n\n      this.chunkList.push(new sf2.Riff.Chunk(\n        String.fromCharCode(input[ip++], input[ip++], input[ip++], input[ip++]),\n        (size = this.bigEndian ?\n           ((input[ip++] << 24) | (input[ip++] << 16) |\n            (input[ip++] <<  8) | (input[ip++]      )) >>> 0 :\n           ((input[ip++]      ) | (input[ip++] <<  8) |\n            (input[ip++] << 16) | (input[ip++] << 24)) >>> 0\n        ),\n        ip\n      ));\n\n      ip += size;\n\n      // padding\n      if (this.padding && ((ip - this.offset) & 1) === 1) {\n        ip++;\n      }\n\n      this.ip = ip;\n    };\n\n    /**\n     * @param {number} index chunk index.\n     * @return {?sf2.Riff.Chunk}\n     */\n    sf2.Riff.Parser.prototype.getChunk = function (index) {\n      /** @type {sf2.Riff.Chunk} */\n      var chunk = this.chunkList[index];\n\n      if (chunk === undefined) {\n        return null;\n      }\n\n      return chunk;\n    };\n\n    /**\n     * @return {number}\n     */\n    sf2.Riff.Parser.prototype.getNumberOfChunks = function () {\n      return this.chunkList.length;\n    };\n\n\n    return sf2;\n}));\n",
      "type": "blob"
    },
    "lib/stream": {
      "path": "lib/stream",
      "content": "// From https://github.com/gasman/jasmid/blob/master/stream.js\n// Modified to use byte array\n\nmodule.exports = function (array) {\n  var position = 0;\n\n  function read (length) {\n    var result = String.fromCharCode.apply(String, array.slice(position, position + length));\n    position += length;\n\n    return result;\n  }\n\n  function subarray (length) {\n    var result = array.subarray(position, position + length);\n    position += length;\n\n    return result;\n  }\n\n  /* read a big-endian 32-bit integer */\n  function readInt32 () {\n    var result = (\n        (array[position] << 24)\n      + (array[position + 1] << 16)\n      + (array[position + 2] << 8)\n      + array[position + 3]);\n    position += 4;\n\n    return result;\n  }\n\n  /* read a big-endian 16-bit integer */\n  function readInt16 () {\n    var result = (\n        (array[position] << 8)\n      + array[position + 1]);\n    position += 2;\n\n    return result;\n  }\n\n  /* read an 8-bit integer */\n  function readInt8 (signed) {\n    var result = array[position];\n    if (signed && result > 127) {\n      result -= 256;\n    }\n    position += 1;\n\n    return result;\n  }\n\n  function eof () {\n    return position >= array.length;\n  }\n\n  /* read a MIDI-style variable-length integer\n  \t(big-endian value in groups of 7 bits,\n  \twith top bit set to signify that another byte follows)\n  */\n  function readVarInt () {\n    var result = 0;\n    while (true) {\n      var b = readInt8();\n      if (b & 0x80) {\n        result += (b & 0x7f);\n        result <<= 7;\n      } else {\n        /* b is the last byte */\n        return result + b;\n      }\n    }\n  }\n\n  return {\n    'eof': eof,\n    'read': read,\n    'readInt32': readInt32,\n    'readInt16': readInt16,\n    'readInt8': readInt8,\n    'readVarInt': readVarInt,\n    'subarray' : subarray\n  };\n};\n",
      "type": "blob"
    },
    "lib/viz": {
      "path": "lib/viz",
      "content": "(function() {\n  module.exports = function(analyser) {\n    var bins, frequencyDomain, timeDomain;\n    bins = analyser.frequencyBinCount;\n    frequencyDomain = new Uint8Array(bins);\n    timeDomain = new Uint8Array(bins);\n    return {\n      draw: function(canvas) {\n        var ctx, height, ratio, step, width;\n        analyser.getByteFrequencyData(frequencyDomain);\n        analyser.getByteTimeDomainData(timeDomain);\n        canvas.fill(\"black\");\n        width = canvas.width();\n        height = canvas.height();\n        ctx = canvas.context();\n        ratio = height / 256;\n        step = width / bins;\n        ctx.fillStyle = \"#00F\";\n        ctx.beginPath();\n        ctx.moveTo(0, height);\n        Array.prototype.forEach.call(frequencyDomain, function(value, index) {\n          var x, y;\n          x = index * step;\n          y = ratio * (256 - value);\n          return ctx.lineTo(x, y);\n        });\n        ctx.lineTo(width, height);\n        ctx.fill();\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"#F00\";\n        Array.prototype.forEach.call(timeDomain, function(value, index) {\n          var x, y;\n          x = index * step;\n          y = ratio * (256 - value);\n          if (index === 0) {\n            ctx.beginPath();\n            return ctx.moveTo(x, y);\n          } else {\n            return ctx.lineTo(x, y);\n          }\n        });\n        return ctx.stroke();\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "load-n-play-midi": {
      "path": "load-n-play-midi",
      "content": "(function() {\n  var clone;\n\n  clone = function(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  };\n\n  module.exports = function(buffer, adapter) {\n    var MidiFile, MidiPlayer, consumeEventsUntilTime, currentState, handleEvent, initialState, meta, pitchBend, playNote, player, programChange, releaseNote, self;\n    MidiFile = require(\"./lib/midifile\");\n    MidiPlayer = require(\"./midi_player\");\n    playNote = adapter.playNote, releaseNote = adapter.releaseNote, programChange = adapter.programChange, pitchBend = adapter.pitchBend;\n    initialState = null;\n    currentState = null;\n    player = null;\n    (function() {\n      var array, midiFile;\n      array = new Uint8Array(buffer);\n      midiFile = MidiFile(array);\n      console.log(midiFile);\n      player = MidiPlayer(midiFile);\n      initialState = clone(player.initialState);\n      return currentState = clone(initialState);\n    })();\n    meta = {};\n    handleEvent = function(event, state) {\n      var channel, deltaTime, noteNumber, subtype, time, type, velocity;\n      time = state.time;\n      channel = event.channel, deltaTime = event.deltaTime, noteNumber = event.noteNumber, subtype = event.subtype, type = event.type, velocity = event.velocity;\n      switch (\"\" + type + \":\" + subtype) {\n        case \"channel:controller\":\n          break;\n        case \"channel:noteOn\":\n          playNote(time, channel, noteNumber, velocity);\n          break;\n        case \"channel:noteOff\":\n          releaseNote(time, channel, noteNumber);\n          break;\n        case \"channel:pitchBend\":\n          pitchBend(time, channel, event.value);\n          break;\n        case \"channel:programChange\":\n          programChange(time, channel, event.programNumber);\n          break;\n        case \"meta:copyrightNotice\":\n          if (meta.copyrightNotice) {\n            meta.copyrightNotice += \"/n\" + event.text;\n          } else {\n            meta.copyrightNotice = event.text;\n          }\n          break;\n        case \"meta:endOfTrack\":\n          break;\n        case \"meta:keySignature\":\n          meta.keySignature = {\n            scale: event.scale,\n            key: event.key\n          };\n          break;\n        case \"meta:lyrics\":\n          break;\n        case \"meta:setTempo\":\n          state.microsecondsPerBeat = event.microsecondsPerBeat;\n          break;\n        case \"meta:text\":\n          if (meta.text) {\n            meta.text += \"/n\" + event.text;\n          } else {\n            meta.text = event.text;\n          }\n          break;\n        case \"meta:timeSignature\":\n          meta.timeSignature = {\n            denominator: event.denominator,\n            metronome: event.metronome,\n            numerator: event.numerator,\n            thirtyseconds: event.thirtySeconds\n          };\n          break;\n        case \"meta:trackName\":\n          meta.trackName = event.text;\n          break;\n        case \"meta:unknown\":\n          break;\n        default:\n          console.log(\"Unknown\", event);\n      }\n      return state;\n    };\n    consumeEventsUntilTime = function(t) {\n      var count, event, nextState, _ref;\n      count = 0;\n      while (currentState.time < t) {\n        _ref = player.readEvent(currentState, true), event = _ref[0], nextState = _ref[1];\n        if (!event) {\n          break;\n        }\n        currentState = handleEvent(event, nextState);\n        count += 1;\n      }\n      return count;\n    };\n    return self = {\n      consumeEventsUntilTime: consumeEventsUntilTime,\n      reset: function() {\n        return currentState = clone(initialState);\n      },\n      currentState: function() {\n        return currentState;\n      },\n      handleEvent: handleEvent,\n      initialState: initialState\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "main": {
      "path": "main",
      "content": "(function() {\n  var Ajax, MidiFile, Observable, Player, SFSynth, Stream, Template, TouchCanvas, Viz, ajax, analyser, canvas, context, ct4mgm, doReplay, doStop, handleResize, height, masterGain, mgm1, player, playing, roland, selectedSong, songChoices, songs, template, timeOffset, updateViz, viz, width, yamaha, _ref,\n    __slice = [].slice;\n\n  (function() {\n    var styleNode;\n    styleNode = document.createElement(\"style\");\n    styleNode.innerHTML = require(\"./style\");\n    return document.head.appendChild(styleNode);\n  })();\n\n  Ajax = require(\"ajax\");\n\n  ajax = Ajax().ajax;\n\n  Observable = require(\"observable\");\n\n  TouchCanvas = require(\"touch-canvas\");\n\n  _ref = require(\"./pixie\"), width = _ref.width, height = _ref.height;\n\n  canvas = TouchCanvas({\n    width: width,\n    height: height\n  });\n\n  songs = require(\"./song_list\");\n\n  songChoices = Object.keys(songs);\n\n  selectedSong = Observable(songChoices[0]);\n\n  player = null;\n\n  playing = false;\n\n  timeOffset = 0;\n\n  doReplay = function() {};\n\n  doStop = function() {};\n\n  Template = require(\"./templates/main\");\n\n  template = Template({\n    canvas: canvas.element(),\n    songSelect: {\n      \"class\": \"song\",\n      options: songChoices,\n      value: selectedSong\n    },\n    fontSelect: {\n      \"class\": \"font\",\n      options: [\"-\"],\n      value: \"-\"\n    },\n    replay: function() {\n      if (player) {\n        return doReplay();\n      }\n    },\n    stop: function() {\n      if (player) {\n        return doStop();\n      }\n    }\n  });\n\n  document.body.appendChild(template);\n\n  handleResize = function() {\n    canvas.width(window.innerWidth);\n    return canvas.height(window.innerHeight);\n  };\n\n  handleResize();\n\n  window.addEventListener(\"resize\", handleResize, false);\n\n  context = new AudioContext;\n\n  Viz = require(\"./lib/viz\");\n\n  masterGain = context.createGain();\n\n  masterGain.gain.value = 1;\n\n  masterGain.connect(context.destination);\n\n  analyser = context.createAnalyser();\n\n  analyser.smoothingTimeConstant = 0;\n\n  masterGain.connect(analyser);\n\n  viz = Viz(analyser);\n\n  updateViz = function() {\n    viz.draw(canvas);\n    return requestAnimationFrame(updateViz);\n  };\n\n  requestAnimationFrame(updateViz);\n\n  Stream = require(\"./lib/stream\");\n\n  MidiFile = require(\"./lib/midifile\");\n\n  Player = require(\"./load-n-play-midi\");\n\n  mgm1 = \"https://s3.amazonaws.com/whimsyspace-databucket-1g3p6d9lcl6x1/danielx/data/3mPhpFf7ZNEfu_yRZKm-R0xWJd62hB98jv_sqik7voQ\";\n\n  ct4mgm = \"https://whimsy.space/danielx/data/bEKepHacjexwXm92b2GU_BTj2EYjaClrAaB2jWaescU\";\n\n  yamaha = \"https://whimsy.space/danielx/data/VQHGLBy82AW4ZppTgItJm1IpquIF-042W3Ix3u7PQeQ\";\n\n  roland = \"https://whimsy.space/danielx/data/2KPRQpAqB3Ghy1bgmuCcYklbUF0mCXs0zSXF6Gn967M\";\n\n  SFSynth = require(\"./sf2_synth\");\n\n  ajax(ct4mgm, {\n    responseType: \"arraybuffer\"\n  }).then(SFSynth).then(function(_arg) {\n    var Adapter, Drop, LOOKAHEAD, allNotesOff, consumeEvents, init, noteOff, noteOn, pitchBend, programChange, readFile;\n    allNotesOff = _arg.allNotesOff, noteOn = _arg.noteOn, noteOff = _arg.noteOff, programChange = _arg.programChange, pitchBend = _arg.pitchBend;\n    Adapter = function() {\n      var adjustTime;\n      adjustTime = function(fn) {\n        return function() {\n          var rest, time;\n          time = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n          return fn.apply(null, [time + timeOffset].concat(__slice.call(rest)));\n        };\n      };\n      return {\n        allNotesOff: adjustTime(allNotesOff),\n        pitchBend: adjustTime(pitchBend),\n        programChange: adjustTime(programChange),\n        playNote: function(time, channel, note, velocity) {\n          return noteOn(time + timeOffset, channel, note, velocity, masterGain);\n        },\n        releaseNote: adjustTime(noteOff)\n      };\n    };\n    selectedSong.observe(function(value) {\n      return ajax(songs[value], {\n        responseType: \"arraybuffer\"\n      }).then(init);\n    });\n    LOOKAHEAD = 0.25;\n    init = function(buffer) {\n      var adapter;\n      timeOffset = context.currentTime;\n      adapter = Adapter();\n      allNotesOff(0);\n      player = Player(buffer, adapter);\n      return playing = true;\n    };\n    consumeEvents = function() {\n      var t;\n      t = context.currentTime - timeOffset;\n      return player.consumeEventsUntilTime(t + LOOKAHEAD);\n    };\n    document.addEventListener(\"visibilitychange\", function(e) {\n      if (document.hidden) {\n        LOOKAHEAD = 1.25;\n        if (player && playing) {\n          return consumeEvents();\n        }\n      } else {\n        return LOOKAHEAD = 0.25;\n      }\n    });\n    doReplay = function() {\n      timeOffset = context.currentTime;\n      allNotesOff(0);\n      player.reset();\n      return playing = true;\n    };\n    doStop = function() {\n      allNotesOff(0);\n      return playing = false;\n    };\n    setInterval(function() {\n      if (player && playing) {\n        return consumeEvents();\n      }\n    }, 4);\n    ajax(songs[selectedSong()], {\n      responseType: \"arraybuffer\"\n    }).then(init);\n    readFile = require(\"./lib/read_file\");\n    Drop = require(\"./lib/drop\");\n    return Drop(document, function(e) {\n      var file;\n      file = e.dataTransfer.files[0];\n      if (file) {\n        return readFile(file, \"readAsArrayBuffer\").then(init);\n      }\n    });\n  });\n\n  require(\"./midi_access\")().handle(function(_arg) {\n    var data, event;\n    data = _arg.data;\n    event = MidiFile.readEvent(Stream(data), true);\n    return player != null ? player.handleEvent(event, {\n      time: context.currentTime - timeOffset\n    }) : void 0;\n  });\n\n  (function() {\n    var Recorder, offlineContext, saveAs, _ref1;\n    offlineContext = new OfflineAudioContext(2, 44100 * 40, 44100);\n    Recorder = require(\"./lib/recorder\");\n    console.log(Recorder);\n    return _ref1 = require(\"./lib/filesaver\"), saveAs = _ref1.saveAs, _ref1;\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "midi_access": {
      "path": "midi_access",
      "content": "(function() {\n  var __slice = [].slice;\n\n  module.exports = function() {\n    var handler;\n    handler = null;\n    navigator.requestMIDIAccess().then(function(midiAccess) {\n      return midiAccess.inputs.forEach(function(midi) {\n        console.log(midi);\n        return midi.onmidimessage = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          return typeof handler === \"function\" ? handler.apply(null, args) : void 0;\n        };\n      });\n    });\n    return {\n      handle: function(fn) {\n        return handler = fn;\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "midi_player": {
      "path": "midi_player",
      "content": "(function() {\n  var assert, findNextEventTrackIndex, findStuckNotes;\n\n  assert = function(condition, message) {\n    if (message == null) {\n      message = \"Ya' blew it!\";\n    }\n    if (!condition) {\n      throw new Error(message);\n    }\n  };\n\n  findNextEventTrackIndex = function(trackData) {\n    var index, min;\n    min = Infinity;\n    index = void 0;\n    trackData.forEach(function(_arg, i) {\n      var ticksUntilNextEvent;\n      ticksUntilNextEvent = _arg.ticksUntilNextEvent;\n      if (ticksUntilNextEvent < min) {\n        min = ticksUntilNextEvent;\n        return index = i;\n      }\n    });\n    return index;\n  };\n\n  findStuckNotes = function(events) {\n    var checkingNotes, t;\n    checkingNotes = {};\n    t = 0;\n    events.forEach(function(event, i) {\n      var deltaTime, duration, noteNumber, oldEvent, oldIndex, oldT, subtype, velocity, _ref;\n      deltaTime = event.deltaTime, noteNumber = event.noteNumber, subtype = event.subtype, velocity = event.velocity;\n      t += deltaTime;\n      if (subtype === \"noteOn\") {\n        if (checkingNotes[noteNumber]) {\n          console.log(\"Double on!\");\n        } else {\n          checkingNotes[noteNumber] = [event, i, t];\n        }\n      }\n      if (subtype === \"noteOff\") {\n        _ref = checkingNotes[noteNumber], oldEvent = _ref[0], oldIndex = _ref[1], oldT = _ref[2];\n        duration = t - oldT;\n        console.log(duration);\n        if (duration < 1000) {\n\n        } else {\n          console.log(checkingNotes[noteNumber]);\n        }\n        return checkingNotes[noteNumber] = false;\n      }\n    });\n    return console.log(checkingNotes);\n  };\n\n  module.exports = function(midiFile) {\n    var advanceTrackData, advanceTrackTicks, microsecondsPerSecond, playerData, readEvent, tracks;\n    microsecondsPerSecond = 1000000;\n    tracks = midiFile.tracks;\n    playerData = {\n      currentTick: 0,\n      microsecondsPerBeat: 500000,\n      nextEventTrackIndex: null,\n      ticksPerBeat: midiFile.header.ticksPerBeat,\n      time: 0,\n      trackData: tracks.map(function(track, i) {\n        var nextEvent, ticksUntilNextEvent;\n        nextEvent = track[0];\n        ticksUntilNextEvent = nextEvent != null ? nextEvent.deltaTime : void 0;\n        return {\n          id: i,\n          length: track.length,\n          nextEventIndex: 0,\n          ticksUntilNextEvent: ticksUntilNextEvent\n        };\n      })\n    };\n    playerData.nextEventTrackIndex = findNextEventTrackIndex(playerData.trackData);\n    advanceTrackData = function(trackData, inplace) {\n      var nextEvent, nextEventIndex;\n      if (inplace == null) {\n        inplace = true;\n      }\n      nextEventIndex = trackData.nextEventIndex + 1;\n      nextEvent = tracks[trackData.id][nextEventIndex];\n      if (inplace) {\n        trackData.nextEventIndex = nextEventIndex;\n        trackData.ticksUntilNextEvent = nextEvent != null ? nextEvent.deltaTime : void 0;\n        return trackData;\n      } else {\n        return {\n          id: trackData.id,\n          length: trackData.length,\n          nextEventIndex: nextEventIndex,\n          ticksUntilNextEvent: nextEvent != null ? nextEvent.deltaTime : void 0\n        };\n      }\n    };\n    advanceTrackTicks = function(trackData, ticks, inplace) {\n      var ticksUntilNextEvent;\n      if (inplace == null) {\n        inplace = true;\n      }\n      ticksUntilNextEvent = trackData.ticksUntilNextEvent;\n      if (ticksUntilNextEvent != null) {\n        ticksUntilNextEvent -= ticks;\n        assert(ticksUntilNextEvent >= 0);\n      }\n      if (inplace) {\n        return trackData.ticksUntilNextEvent = ticksUntilNextEvent;\n      } else {\n        return {\n          id: trackData.id,\n          length: trackData.length,\n          nextEventIndex: trackData.nextEventIndex,\n          ticksUntilNextEvent: ticksUntilNextEvent\n        };\n      }\n    };\n    readEvent = function(playerData, inplace) {\n      var currentTick, eventTrack, eventTrackIndex, microsecondsPerBeat, newState, newTrackData, nextEvent, nextEventTrackIndex, ticksPerBeat, ticksUntilNextEvent, time, timeAdvance, trackData;\n      if (inplace == null) {\n        inplace = true;\n      }\n      trackData = playerData.trackData;\n      eventTrackIndex = playerData.nextEventTrackIndex;\n      eventTrack = trackData[eventTrackIndex];\n      if (!eventTrack) {\n        return [void 0, playerData];\n      }\n      nextEvent = tracks[eventTrack.id][eventTrack.nextEventIndex];\n      if (!nextEvent) {\n        return [void 0, playerData];\n      }\n      ticksUntilNextEvent = eventTrack.ticksUntilNextEvent;\n      ticksPerBeat = playerData.ticksPerBeat;\n      microsecondsPerBeat = playerData.microsecondsPerBeat;\n      currentTick = playerData.currentTick + ticksUntilNextEvent;\n      timeAdvance = (ticksUntilNextEvent / ticksPerBeat) * (microsecondsPerBeat / microsecondsPerSecond);\n      time = playerData.time + timeAdvance;\n      assert(!isNaN(time));\n      if (inplace) {\n        trackData.forEach(function(data, index) {\n          if (index === eventTrackIndex) {\n            return advanceTrackData(data, true);\n          } else {\n            return advanceTrackTicks(data, ticksUntilNextEvent, true);\n          }\n        });\n        nextEventTrackIndex = findNextEventTrackIndex(trackData);\n      } else {\n        newTrackData = trackData.map(function(data, index) {\n          if (index === eventTrackIndex) {\n            return advanceTrackData(data, false);\n          } else {\n            return advanceTrackTicks(data, ticksUntilNextEvent, false);\n          }\n        });\n        nextEventTrackIndex = findNextEventTrackIndex(newTrackData);\n      }\n      if (inplace) {\n        playerData.currentTick = currentTick;\n        playerData.time = time;\n        playerData.nextEventTrackIndex = nextEventTrackIndex;\n        return [nextEvent, playerData];\n      } else {\n        newState = {\n          currentTick: currentTick,\n          microsecondsPerBeat: microsecondsPerBeat,\n          nextEventTrackIndex: nextEventTrackIndex,\n          ticksPerBeat: ticksPerBeat,\n          time: time,\n          trackData: newTrackData\n        };\n        return [nextEvent, newState];\n      }\n    };\n    return {\n      initialState: playerData,\n      readEvent: readEvent\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "note_frequencies": {
      "path": "note_frequencies",
      "content": "(function() {\n  var _i, _results;\n\n  module.exports = (function() {\n    _results = [];\n    for (_i = 0; _i <= 127; _i++){ _results.push(_i); }\n    return _results;\n  }).apply(this).map(function(n) {\n    var semitonesFromA4;\n    semitonesFromA4 = n - 69;\n    return Math.pow(2, semitonesFromA4 / 12) * 440;\n  });\n\n}).call(this);\n",
      "type": "blob"
    },
    "piano": {
      "path": "piano",
      "content": "(function() {\n  var TouchCanvas;\n\n  TouchCanvas = require(\"touch-canvas\");\n\n  module.exports = function() {\n    var canvas, ids, onNotes, range, self;\n    range = 24;\n    onNotes = [];\n    ids = [];\n    canvas = TouchCanvas();\n    canvas.on(\"touch\", function(p) {\n      var note;\n      note = Math.floor(p.x * range);\n      return self.playNote(note, p.identifier);\n    });\n    canvas.on(\"release\", function(p) {\n      return self.releaseNote(p.identifier);\n    });\n    return self = {\n      releaseNote: function(identifier) {\n        return onNotes[ids[identifier]] = false;\n      },\n      playNote: function(note, identifier) {\n        onNotes[note] = true;\n        return ids[identifier] = note;\n      },\n      element: function() {\n        return canvas.element();\n      },\n      draw: function() {\n        var height, n, width, _i, _results;\n        n = range;\n        canvas.clear();\n        width = canvas.width() / n;\n        height = canvas.height();\n        return (function() {\n          _results = [];\n          for (var _i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? _i++ : _i--){ _results.push(_i); }\n          return _results;\n        }).apply(this).forEach(function(n) {\n          var hue, lightness, saturation;\n          hue = (n % 12) * 360 / 12;\n          saturation = \"75%\";\n          lightness = \"50%\";\n          if (onNotes[n]) {\n            lightness = \"75%\";\n          }\n          return canvas.drawRect({\n            x: width * n,\n            y: 0,\n            width: width,\n            height: height,\n            color: \"hsl(\" + hue + \", \" + saturation + \", \" + lightness + \")\"\n          });\n        });\n      }\n    };\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "pixie": {
      "path": "pixie",
      "content": "module.exports = {\"width\":800,\"height\":450,\"dependencies\":{\"ajax\":\"distri/ajax:master\",\"touch-canvas\":\"distri/touch-canvas:v0.3.1\",\"observable\":\"distri/observable:v0.3.1\"}};",
      "type": "blob"
    },
    "song_list": {
      "path": "song_list",
      "content": "module.exports = {\"cruel\":\"https://whimsy.space/danielx/data/FFFIzGGXnhNPBw8MK8-y3Df9nDRxHfwP3upMeXAzg04\",\"jordan\":\"https://whimsy.space/danielx/data/FhSh0qeVTMu9Xwd4vihF6shaPJsD_rM8t1OSKGl-ir4\",\"waltz\":\"https://whimsy.space/danielx/data/qxIFNrVVEqhwmwUO5wWyZKk1IwGgQIxqvLQ9WX0X20E\",\"aquarius\":\"https://whimsy.space/danielx/data/ZZXoIXhXFbo0pWGn-m938Vgox_NmJiYkZ9g3UkR0PrU\",\"slunk\":\"https://whimsy.space/danielx/data/EtME8Imvk8eE8MXc7jlwJOVotKM2KVmxXd8QiJtBbPc\",\"mushroom\":\"https://whimsy.space/danielx/data/xfgFR67fDD_vXLic9IYXFPo55qP-kUpC4rl-H9hrwSA\"};",
      "type": "blob"
    },
    "style": {
      "path": "style",
      "content": "module.exports = \"* {\\n  box-sizing: border-box;\\n}\\nhtml {\\n  height: 100%;\\n}\\nbody {\\n  font-family: \\\"HelveticaNeue-Light\\\", \\\"Helvetica Neue Light\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, \\\"Lucida Grande\\\", sans-serif;\\n  font-weight: 300;\\n  font-size: 18px;\\n  height: 100%;\\n  margin: 0;\\n  overflow: hidden;\\n  user-select: none;\\n}\\ncanvas {\\n  bottom: 0;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  margin: auto;\\n}\\n#main > select.font {\\n  position: absolute;\\n  top: 8px;\\n  right: 8px;\\n}\\n#main > select.song {\\n  position: absolute;\\n  top: 8px;\\n  left: 8px;\\n}\\n#main > actions {\\n  position: absolute;\\n  bottom: 8px;\\n  left: 8px;\\n}\\n\";",
      "type": "blob"
    },
    "templates/main": {
      "path": "templates/main",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var Actions, Selector, __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    Actions = require(\"./actions\");\n    Selector = require(\"./selector\");\n    __root.buffer(__root.element(\"div\", this, {\n      id: [\"main\"]\n    }, function(__root) {\n      __root.buffer(this.canvas);\n      __root.buffer(Selector(this.songSelect));\n      __root.buffer(Selector(this.fontSelect));\n      __root.buffer(Actions(this));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "templates/selector": {
      "path": "templates/selector",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"select\", this, {\n      \"class\": [this[\"class\"]],\n      \"options\": this.options,\n      \"value\": this.value\n    }, function(__root) {}));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "sf2_synth": {
      "path": "sf2_synth",
      "content": "(function() {\n  var SEMITONE, SF2Parser, amountToFreq, computePlaybackRate, createAllInstruments, createNoteInfo, getModGenAmount, noteOff, noteOn, schedulePlaybackRate, toAudioBuffer,\n    __slice = [].slice;\n\n  SF2Parser = require(\"./lib/sf2_parser\");\n\n  SEMITONE = Math.pow(2, 1 / 12);\n\n  module.exports = function(buffer) {\n    var bank, banks, channels, drumBank, instruments, parser;\n    parser = new SF2Parser.Parser(new Uint8Array(buffer));\n    parser.parse();\n    console.log(parser);\n    global.parser = parser;\n    instruments = parser.getInstruments();\n    banks = createAllInstruments(parser.getPresets(), instruments);\n    drumBank = banks[128];\n    console.log(instruments.map(function(i) {\n      return i.name;\n    }), banks);\n    bank = banks[0];\n    channels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].map(function() {\n      return {\n        fx: {\n          panpot: 0,\n          pitchBend: 8192,\n          pitchBendSensitivity: 1,\n          volume: 0.5\n        },\n        program: 0,\n        notes: {}\n      };\n    });\n    return {\n      allNotesOff: function(time) {\n        return channels.forEach(function(channel) {\n          var notes;\n          notes = channel.notes;\n          return Object.keys(notes).forEach(function(key) {\n            var currentNoteData, _results;\n            _results = [];\n            while (currentNoteData = notes[key].shift()) {\n              _results.push(noteOff.apply(null, [time].concat(__slice.call(currentNoteData))));\n            }\n            return _results;\n          });\n        });\n      },\n      pitchBend: function(time, channelId, value) {\n        var channel, notes;\n        channel = channels[channelId];\n        channel.fx.pitchBend = value;\n        notes = channel.notes;\n        return Object.keys(notes).forEach(function(key) {\n          return notes[key].forEach(function(note) {\n            return schedulePlaybackRate(time, note[1].playbackRate, channel.fx, note[0]);\n          });\n        });\n      },\n      programChange: function(time, channelId, program) {\n        return channels[channelId].program = program;\n      },\n      noteOn: function(time, channelId, note, velocity, destination) {\n        var channel, instrument, _base;\n        channel = channels[channelId];\n        (_base = channel.notes)[note] || (_base[note] = []);\n        if (channelId === 9) {\n          instrument = drumBank[channel.program][note];\n        } else {\n          instrument = bank[channel.program][note];\n        }\n        if (instrument) {\n          return channel.notes[note].push(noteOn(time, instrument, velocity, channelId, channel.fx, destination));\n        } else {\n          return console.log(\"No instrument for note: \" + note);\n        }\n      },\n      noteOff: function(time, channelId, note) {\n        var channel, currentNoteData, _base;\n        channel = channels[channelId];\n        (_base = channel.notes)[note] || (_base[note] = []);\n        if (currentNoteData = channel.notes[note].shift()) {\n          return noteOff.apply(null, [time].concat(__slice.call(currentNoteData)));\n        }\n      }\n    };\n  };\n\n  toAudioBuffer = function(context, buffer, sampleRate) {\n    var audioBuffer, audioData;\n    audioBuffer = context.createBuffer(1, buffer.length, sampleRate);\n    audioData = audioBuffer.getChannelData(0);\n    buffer.forEach(function(n, i) {\n      return audioData[i] = n / 32768;\n    });\n    return audioBuffer;\n  };\n\n  createAllInstruments = function(presets, instruments) {\n    var banks;\n    banks = [];\n    presets.forEach(function(preset, i) {\n      var bank, instrument, presetNumber;\n      presetNumber = preset.header.preset;\n      if (typeof preset.instrument !== 'number') {\n        return;\n      }\n      instrument = instruments[preset.instrument];\n      if (instrument.name.replace(/\\0*$/, '') === 'EOI') {\n        return;\n      }\n      if (banks[preset.header.bank] === void 0) {\n        banks[preset.header.bank] = [];\n      }\n      bank = banks[preset.header.bank];\n      bank[presetNumber] = [];\n      bank[presetNumber].name = preset.name;\n      return instrument.info.forEach(function(info) {\n        return createNoteInfo(parser, info, bank[presetNumber]);\n      });\n    });\n    return banks;\n  };\n\n  createNoteInfo = function(parser, info, preset) {\n    var freqVibLFO, generator, hi, lo, modAttack, modDecay, modRelease, modSustain, scale, tune, volAttack, volDecay, volRelease, volSustain, _i, _results;\n    generator = info.generator;\n    if (!(generator['keyRange'] && generator['sampleID'])) {\n      return;\n    }\n    volAttack = getModGenAmount(generator, 'attackVolEnv', -12000);\n    volDecay = getModGenAmount(generator, 'decayVolEnv', -12000);\n    volSustain = getModGenAmount(generator, 'sustainVolEnv');\n    volRelease = getModGenAmount(generator, 'releaseVolEnv', -12000);\n    modAttack = getModGenAmount(generator, 'attackModEnv', -12000);\n    modDecay = getModGenAmount(generator, 'decayModEnv', -12000);\n    modSustain = getModGenAmount(generator, 'sustainModEnv');\n    modRelease = getModGenAmount(generator, 'releaseModEnv', -12000);\n    tune = getModGenAmount(generator, 'coarseTune') + getModGenAmount(generator, 'fineTune') / 100;\n    scale = getModGenAmount(generator, 'scaleTuning', 100) / 100;\n    freqVibLFO = getModGenAmount(generator, 'freqVibLFO');\n    if (freqVibLFO) {\n      freqVibLFO = Math.pow(2, freqVibLFO / 1200) * 8.176;\n    }\n    lo = generator['keyRange'].lo;\n    hi = generator['keyRange'].hi;\n    return (function() {\n      _results = [];\n      for (var _i = lo; lo <= hi ? _i <= hi : _i >= hi; lo <= hi ? _i++ : _i--){ _results.push(_i); }\n      return _results;\n    }).apply(this).forEach(function(i) {\n      var sampleHeader, sampleId;\n      if (preset[i]) {\n        return;\n      }\n      sampleId = getModGenAmount(generator, 'sampleID');\n      sampleHeader = parser.sampleHeader[sampleId];\n      return preset[i] = {\n        'sample': parser.sample[sampleId],\n        'sampleRate': sampleHeader.sampleRate,\n        'basePlaybackRate': Math.pow(SEMITONE, (i - getModGenAmount(generator, 'overridingRootKey', sampleHeader.originalPitch) + tune + (sampleHeader.pitchCorrection / 100)) * scale),\n        'modEnvToPitch': getModGenAmount(generator, 'modEnvToPitch') / 100,\n        'scaleTuning': scale,\n        'start': getModGenAmount(generator, 'startAddrsCoarseOffset') * 32768 + getModGenAmount(generator, 'startAddrsOffset'),\n        'end': getModGenAmount(generator, 'endAddrsCoarseOffset') * 32768 + getModGenAmount(generator, 'endAddrsOffset'),\n        'loopStart': sampleHeader.startLoop + getModGenAmount(generator, 'startloopAddrsCoarseOffset') * 32768 + getModGenAmount(generator, 'startloopAddrsOffset'),\n        'loopEnd': sampleHeader.endLoop + getModGenAmount(generator, 'endloopAddrsCoarseOffset') * 32768 + getModGenAmount(generator, 'endloopAddrsOffset'),\n        'volAttack': Math.pow(2, volAttack / 1200),\n        'volDecay': Math.pow(2, volDecay / 1200),\n        'volSustain': volSustain / 1000,\n        'volRelease': Math.pow(2, volRelease / 1200),\n        'modAttack': Math.pow(2, modAttack / 1200),\n        'modDecay': Math.pow(2, modDecay / 1200),\n        'modSustain': modSustain / 1000,\n        'modRelease': Math.pow(2, modRelease / 1200),\n        'initialFilterFc': getModGenAmount(generator, 'initialFilterFc', 13500),\n        'modEnvToFilterFc': getModGenAmount(generator, 'modEnvToFilterFc'),\n        'initialFilterQ': getModGenAmount(generator, 'initialFilterQ'),\n        'freqVibLFO': freqVibLFO\n      };\n    });\n  };\n\n  getModGenAmount = function(generator, enumeratorType, opt_default) {\n    var _ref, _ref1;\n    if (opt_default == null) {\n      opt_default = 0;\n    }\n    return (_ref = (_ref1 = generator[enumeratorType]) != null ? _ref1.amount : void 0) != null ? _ref : opt_default;\n  };\n\n  amountToFreq = function(val) {\n    return Math.pow(2, (val - 6900) / 1200) * 440;\n  };\n\n  noteOn = function(time, instrument, velocity, channel, fx, destination) {\n    var baseFreq, buffer, bufferSource, context, filter, loopEnd, loopStart, modAttack, modDecay, now, output, outputGain, panner, peekFreq, sample, sampleRate, startTime, sustainFreq, volAttack, volDecay, volume;\n    volume = fx.volume;\n    context = destination.context;\n    sample = instrument.sample;\n    now = time;\n    sampleRate = instrument.sampleRate;\n    volAttack = now + instrument['volAttack'];\n    modAttack = now + instrument['modAttack'];\n    volDecay = volAttack + instrument['volDecay'];\n    modDecay = modAttack + instrument['modDecay'];\n    loopStart = instrument['loopStart'] / sampleRate;\n    loopEnd = instrument['loopEnd'] / sampleRate;\n    startTime = instrument['start'] / sampleRate;\n    buffer = toAudioBuffer(context, sample, sampleRate);\n    bufferSource = context.createBufferSource();\n    bufferSource.buffer = buffer;\n    bufferSource.loop = channel !== 9;\n    bufferSource.loopStart = loopStart;\n    bufferSource.loopEnd = loopEnd;\n    schedulePlaybackRate(now, bufferSource.playbackRate, fx, instrument);\n    panner = context.createPanner();\n    output = context.createGain();\n    outputGain = output.gain;\n    filter = context.createBiquadFilter();\n    filter.type = \"lowpass\";\n    panner.setPosition(Math.sin(fx.panpot * Math.PI / 2), 0, Math.cos(fx.panpot * Math.PI / 2));\n    outputGain.setValueAtTime(0, now);\n    outputGain.linearRampToValueAtTime(volume * (velocity / 127), volAttack);\n    outputGain.linearRampToValueAtTime(volume * (1 - instrument['volSustain']), volDecay);\n    filter.Q.setValueAtTime(instrument['initialFilterQ'], now);\n    baseFreq = amountToFreq(instrument['initialFilterFc']);\n    peekFreq = amountToFreq(instrument['initialFilterFc'] + instrument['modEnvToFilterFc']);\n    sustainFreq = baseFreq + (peekFreq - baseFreq) * (1 - instrument['modSustain']);\n    filter.frequency.setValueAtTime(baseFreq, now);\n    filter.frequency.linearRampToValueAtTime(peekFreq, modAttack);\n    filter.frequency.linearRampToValueAtTime(sustainFreq, modDecay);\n    bufferSource.connect(filter);\n    filter.connect(panner);\n    panner.connect(output);\n    output.connect(destination);\n    bufferSource.start(now, startTime);\n    return [instrument, bufferSource, fx, output];\n  };\n\n  noteOff = function(time, instrument, bufferSource, fx, output) {\n    var computedPlaybackRate, modEndTime, volEndTime;\n    volEndTime = time + instrument.volRelease;\n    modEndTime = time + instrument.modRelease;\n    output.gain.cancelScheduledValues(time);\n    output.gain.linearRampToValueAtTime(0, volEndTime);\n    computedPlaybackRate = computePlaybackRate(instrument, fx);\n    bufferSource.playbackRate.cancelScheduledValues(time);\n    bufferSource.playbackRate.linearRampToValueAtTime(computedPlaybackRate, modEndTime);\n    bufferSource.loop = false;\n    return bufferSource.stop(volEndTime);\n  };\n\n  computePlaybackRate = function(instrument, fx) {\n    var denominator, pitchBend, rate, ratio, scaleTuning;\n    pitchBend = fx.pitchBend - 8192;\n    denominator = pitchBend < 0 ? 8192 : 8191;\n    ratio = pitchBend / denominator;\n    scaleTuning = instrument.scaleTuning;\n    rate = Math.pow(SEMITONE, fx.pitchBendSensitivity * ratio * scaleTuning);\n    return instrument.basePlaybackRate * rate;\n  };\n\n  schedulePlaybackRate = function(time, playbackRate, fx, instrument) {\n    var computed, modAttack, modDecay, peekPitch;\n    computed = computePlaybackRate(instrument, fx);\n    modAttack = time + instrument.modAttack;\n    modDecay = modAttack + instrument.modDecay;\n    peekPitch = computed * Math.pow(SEMITONE, instrument.modEnvToPitch * instrument.scaleTuning);\n    playbackRate.cancelScheduledValues(time);\n    playbackRate.setValueAtTime(computed, time);\n    playbackRate.linearRampToValueAtTime(peekPitch, modAttack);\n    return playbackRate.linearRampToValueAtTime(computed + (peekPitch - computed) * (1 - instrument.modSustain), modDecay);\n  };\n\n}).call(this);\n",
      "type": "blob"
    },
    "templates/actions": {
      "path": "templates/actions",
      "content": "module.exports = function(data) {\n  \"use strict\";\n  return (function() {\n    var __root;\n    __root = require(\"/lib/hamlet-runtime\")(this);\n    __root.buffer(__root.element(\"actions\", this, {}, function(__root) {\n      __root.buffer(__root.element(\"button\", this, {\n        \"click\": this.replay\n      }, function(__root) {\n        __root.buffer(\"Replay\\n\");\n      }));\n      __root.buffer(__root.element(\"button\", this, {\n        \"click\": this.stop\n      }, function(__root) {\n        __root.buffer(\"Stop\\n\");\n      }));\n    }));\n    return __root.root;\n  }).call(data);\n};\n",
      "type": "blob"
    },
    "lib/hamlet-runtime": {
      "path": "lib/hamlet-runtime",
      "content": "!function(e){if(\"object\"==typeof exports)module.exports=e();else if(\"function\"==typeof define&&define.amd)define(e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.Hamlet=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n!function(){var Hamlet,compile;Hamlet=_dereq_(\"hamlet-runtime\");compile=_dereq_(\"hamlet-compiler\").compile;Hamlet.compile=compile;module.exports=Hamlet}.call(this);\n},{\"hamlet-compiler\":6,\"hamlet-runtime\":11}],2:[function(_dereq_,module,exports){\n\n},{}],3:[function(_dereq_,module,exports){\n(function (process){\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n}).call(this,_dereq_(\"FWaASH\"))\n},{\"FWaASH\":4}],4:[function(_dereq_,module,exports){\n// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n\n},{}],5:[function(_dereq_,module,exports){\n// Generated by CoffeeScript 1.7.1\n(function() {\n  var ROOT_NAME, indentText, util;\n\n  indentText = function(text, indent) {\n    if (indent == null) {\n      indent = \"  \";\n    }\n    return indent + text.replace(/\\n/g, \"\\n\" + indent);\n  };\n\n  ROOT_NAME = \"__root\";\n\n  util = {\n    indent: indentText,\n    filters: {\n      verbatim: function(content, compiler) {\n        return compiler.buffer('\"\"\"' + content.replace(/(#|\")/g, \"\\\\$1\") + '\"\"\"');\n      },\n      plain: function(content, compiler) {\n        return compiler.buffer(JSON.stringify(content));\n      },\n      coffeescript: function(content, compiler) {\n        return [content];\n      },\n      javascript: function(content, compiler) {\n        return [\"`\", compiler.indent(content), \"`\"];\n      }\n    },\n    element: function(tag, attributes, contents) {\n      var lines;\n      if (attributes == null) {\n        attributes = [];\n      }\n      if (contents == null) {\n        contents = [];\n      }\n      return lines = [\"\" + ROOT_NAME + \".buffer \" + ROOT_NAME + \".element \" + (JSON.stringify(tag)) + \", this, {\" + (attributes.join('\\n')) + \"}, (\" + ROOT_NAME + \") ->\", indentText(contents.join(\"\\n\")), \"  return\"];\n    },\n    buffer: function(value) {\n      return [\"\" + ROOT_NAME + \".buffer \" + value];\n    },\n    attributes: function(node) {\n      var attributeLines, attributes, classes, id, ids, idsAndClasses;\n      id = node.id, classes = node.classes, attributes = node.attributes;\n      if (id) {\n        ids = [JSON.stringify(id)];\n      } else {\n        ids = [];\n      }\n      classes = (classes || []).map(JSON.stringify);\n      if (attributes) {\n        attributes = attributes.filter(function(_arg) {\n          var name, value;\n          name = _arg.name, value = _arg.value;\n          if (name === \"class\") {\n            classes.push(value);\n            return false;\n          } else if (name === \"id\") {\n            ids.push(value);\n            return false;\n          } else {\n            return true;\n          }\n        });\n      } else {\n        attributes = [];\n      }\n      idsAndClasses = [];\n      if (ids.length) {\n        idsAndClasses.push(\"id: [\" + (ids.join(', ')) + \"]\");\n      }\n      if (classes.length) {\n        idsAndClasses.push(\"class: [\" + (classes.join(', ')) + \"]\");\n      }\n      attributeLines = attributes.map(function(_arg) {\n        var name, value;\n        name = _arg.name, value = _arg.value;\n        name = JSON.stringify(name);\n        return \"\" + name + \": \" + value;\n      });\n      return idsAndClasses.concat(attributeLines);\n    },\n    render: function(node) {\n      var filter, tag, text;\n      tag = node.tag, filter = node.filter, text = node.text;\n      if (tag) {\n        return this.tag(node);\n      } else if (filter) {\n        return this.filter(node);\n      } else {\n        return this.contents(node);\n      }\n    },\n    filter: function(node) {\n      var filter, filterName;\n      filterName = node.filter;\n      if (filter = this.filters[filterName]) {\n        return [].concat.apply([], this.filters[filterName](node.content, this));\n      } else {\n        return [\"\" + ROOT_NAME + \".filter(\" + (JSON.stringify(filterName)) + \", \" + (JSON.stringify(node.content)) + \")\"];\n      }\n    },\n    contents: function(node) {\n      var bufferedCode, childContent, children, contents, indent, text, unbufferedCode;\n      children = node.children, bufferedCode = node.bufferedCode, unbufferedCode = node.unbufferedCode, text = node.text;\n      if (unbufferedCode) {\n        indent = true;\n        contents = [unbufferedCode];\n      } else if (bufferedCode) {\n        contents = this.buffer(bufferedCode);\n      } else if (text) {\n        contents = this.buffer(JSON.stringify(text));\n      } else if (node.tag) {\n        contents = [];\n      } else if (node.comment) {\n        return [];\n      } else {\n        contents = [];\n        console.warn(\"No content for node:\", node);\n      }\n      if (children) {\n        childContent = this.renderNodes(children);\n        if (indent) {\n          childContent = this.indent(childContent.join(\"\\n\"));\n        }\n        contents = contents.concat(childContent);\n      }\n      return contents;\n    },\n    renderNodes: function(nodes) {\n      return [].concat.apply([], nodes.map(this.render, this));\n    },\n    tag: function(node) {\n      var tag;\n      tag = node.tag;\n      return this.element(tag, this.attributes(node), this.contents(node));\n    }\n  };\n\n  exports.compile = function(parseTree, _arg) {\n    var compiler, exports, items, options, program, programSource, runtime, source, _ref;\n    _ref = _arg != null ? _arg : {}, compiler = _ref.compiler, runtime = _ref.runtime, exports = _ref.exports;\n    if (runtime == null) {\n      runtime = \"require\" + \"(\\\"hamlet-runtime\\\")\";\n    }\n    if (exports == null) {\n      exports = \"module.exports\";\n    }\n    items = util.renderNodes(parseTree);\n    if (exports) {\n      exports = \"\" + exports + \" = \";\n    } else {\n      exports = \"\";\n    }\n    source = \"\" + exports + \"(data) ->\\n  \\\"use strict\\\"\\n  (->\\n    \" + ROOT_NAME + \" = \" + runtime + \"(this)\\n\\n\" + (util.indent(items.join(\"\\n\"), \"    \")) + \"\\n    return \" + ROOT_NAME + \".root\\n  ).call(data)\";\n    options = {\n      bare: true\n    };\n    programSource = source;\n    program = compiler.compile(programSource, options);\n    return program;\n  };\n\n}).call(this);\n\n},{}],6:[function(_dereq_,module,exports){\n// Generated by CoffeeScript 1.7.1\n(function() {\n  var compile, parser;\n\n  compile = _dereq_(\"./compiler\").compile;\n\n  parser = _dereq_(\"hamlet-parser\");\n\n  module.exports = {\n    compile: function(input, options) {\n      if (options == null) {\n        options = {};\n      }\n      if (typeof input === \"string\") {\n        input = parser.parse(input, options.mode);\n      }\n      return compile(input, options);\n    }\n  };\n\n}).call(this);\n\n},{\"./compiler\":5,\"hamlet-parser\":9}],7:[function(_dereq_,module,exports){\n/* generated by jison-lex 0.2.1 */\nvar haml_lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"moduleName\":\"haml_lexer\"},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 'SEPARATOR';\nbreak;\ncase 1:this.popState(); return 'RIGHT_PARENTHESIS';\nbreak;\ncase 2:return 'ATTRIBUTE';\nbreak;\ncase 3:this.begin('value'); return 'EQUAL';\nbreak;\ncase 4:return 'AT_ATTRIBUTE';\nbreak;\ncase 5:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 6:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 7:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 8:yy.indent = 0; this.popState(); return 'NEWLINE';\nbreak;\ncase 9:return 'FILTER_LINE';\nbreak;\ncase 10:yy.indent = 0; return 'NEWLINE';\nbreak;\ncase 11:yy.indent += 1; if(yy.indent > yy.filterIndent){this.begin('filter'); }; return 'INDENT';\nbreak;\ncase 12:this.begin(\"parentheses_attributes\"); return 'LEFT_PARENTHESIS';\nbreak;\ncase 13:yy_.yytext = yy_.yytext.substring(1); return 'COMMENT';\nbreak;\ncase 14:yy.filterIndent = yy.indent; yy_.yytext = yy_.yytext.substring(1); return 'FILTER';\nbreak;\ncase 15:yy_.yytext = yy_.yytext.substring(1); return 'ID';\nbreak;\ncase 16:yy_.yytext = yy_.yytext.substring(1); return 'CLASS';\nbreak;\ncase 17:yy_.yytext = yy_.yytext.substring(1); return 'TAG';\nbreak;\ncase 18:yy_.yytext = yy_.yytext.substring(1).trim(); return 'BUFFERED_CODE';\nbreak;\ncase 19:yy_.yytext = yy_.yytext.substring(1).trim(); return 'UNBUFFERED_CODE';\nbreak;\ncase 20:yy_.yytext = yy_.yytext.trim(); return 'TEXT';\nbreak;\n}\n},\nrules: [/^(?:[ \\t]+)/,/^(?:\\))/,/^(?:([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:=)/,/^(?:@([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:\"(\\\\.|[^\\\\\"])*\")/,/^(?:'(\\\\.|[^\\\\'])*')/,/^(?:[^ \\t\\)]*)/,/^(?:(\\n|$))/,/^(?:[^\\n]*)/,/^(?:\\s*(\\n|$))/,/^(?:(  |\\\\t))/,/^(?:\\()/,/^(?:\\/.*)/,/^(?::([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:#((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:\\.((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:%((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:=.*)/,/^(?:-.*)/,/^(?:.*)/],\nconditions: {\"filter\":{\"rules\":[8,9],\"inclusive\":false},\"value\":{\"rules\":[5,6,7],\"inclusive\":false},\"parentheses_attributes\":{\"rules\":[0,1,2,3,4],\"inclusive\":false},\"INITIAL\":{\"rules\":[10,11,12,13,14,15,16,17,18,19,20],\"inclusive\":true}}\n};\nreturn lexer;\n})();module.exports = haml_lexer;\n\n},{}],8:[function(_dereq_,module,exports){\n/* generated by jison-lex 0.2.1 */\nvar jade_lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"moduleName\":\"jade_lexer\"},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 'SEPARATOR';\nbreak;\ncase 1:this.popState(); return 'RIGHT_PARENTHESIS';\nbreak;\ncase 2:return 'ATTRIBUTE';\nbreak;\ncase 3:this.begin('value'); return 'EQUAL';\nbreak;\ncase 4:return 'AT_ATTRIBUTE';\nbreak;\ncase 5:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 6:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 7:this.popState(); return 'ATTRIBUTE_VALUE';\nbreak;\ncase 8:yy.indent = 0; this.popState(); return 'NEWLINE';\nbreak;\ncase 9:return 'FILTER_LINE';\nbreak;\ncase 10:yy.indent = 0; return 'NEWLINE';\nbreak;\ncase 11:yy.indent += 1; if(yy.indent > yy.filterIndent){this.begin('filter'); }; return 'INDENT';\nbreak;\ncase 12:this.begin(\"parentheses_attributes\"); return 'LEFT_PARENTHESIS';\nbreak;\ncase 13:yy_.yytext = yy_.yytext.substring(2); return 'COMMENT';\nbreak;\ncase 14:yy.filterIndent = yy.indent; yy_.yytext = yy_.yytext.substring(1); return 'FILTER';\nbreak;\ncase 15:yy_.yytext = yy_.yytext.substring(1); return 'ID';\nbreak;\ncase 16:yy_.yytext = yy_.yytext.substring(1); return 'CLASS';\nbreak;\ncase 17:return 'TAG';\nbreak;\ncase 18:yy_.yytext = yy_.yytext.substring(1).trim(); return 'BUFFERED_CODE';\nbreak;\ncase 19:yy_.yytext = yy_.yytext.substring(1).trim(); return 'UNBUFFERED_CODE';\nbreak;\ncase 20:yy_.yytext = yy_.yytext.trim(); return 'TEXT';\nbreak;\n}\n},\nrules: [/^(?:[ \\t]+)/,/^(?:\\))/,/^(?:([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:=)/,/^(?:@([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:\"(\\\\.|[^\\\\\"])*\")/,/^(?:'(\\\\.|[^\\\\'])*')/,/^(?:[^ \\t\\)]*)/,/^(?:(\\n|$))/,/^(?:[^\\n]*)/,/^(?:\\s*(\\n|$))/,/^(?:(  |\\\\t))/,/^(?:\\()/,/^(?:\\/\\/.*)/,/^(?::([_a-zA-Z][-_a-zA-Z0-9]*))/,/^(?:#((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:\\.((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:((:|[A-Z]|_|[a-z])((:|[A-Z]|_|[a-z])|-|[0-9])*(?!-)))/,/^(?:=.*)/,/^(?:-.*)/,/^(?:.*)/],\nconditions: {\"filter\":{\"rules\":[8,9],\"inclusive\":false},\"value\":{\"rules\":[5,6,7],\"inclusive\":false},\"parentheses_attributes\":{\"rules\":[0,1,2,3,4],\"inclusive\":false},\"INITIAL\":{\"rules\":[10,11,12,13,14,15,16,17,18,19,20],\"inclusive\":true}}\n};\nreturn lexer;\n})();module.exports = jade_lexer;\n\n},{}],9:[function(_dereq_,module,exports){\n// Generated by CoffeeScript 1.7.1\n(function() {\n  var extend, lexers, oldParse, parser,\n    __slice = [].slice;\n\n  parser = _dereq_(\"./parser\").parser;\n\n  lexers = {\n    haml: _dereq_(\"./haml_lexer\"),\n    jade: _dereq_(\"./jade_lexer\")\n  };\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  oldParse = parser.parse;\n\n  extend(parser, {\n    parse: function(input, mode) {\n      if (mode == null) {\n        mode = \"haml\";\n      }\n      parser.lexer = lexers[mode];\n      extend(parser.yy, {\n        indent: 0,\n        nodePath: [\n          {\n            children: []\n          }\n        ],\n        filterIndent: void 0\n      });\n      return oldParse.call(parser, input);\n    }\n  });\n\n  extend(parser.yy, {\n    extend: extend,\n    newline: function() {\n      var lastNode;\n      lastNode = this.nodePath[this.nodePath.length - 1];\n      if (lastNode.filter) {\n        return this.appendFilterContent(lastNode, \"\");\n      }\n    },\n    lastParent: function(indentation) {\n      var parent;\n      while (!(parent = this.nodePath[indentation])) {\n        indentation -= 1;\n      }\n      return parent;\n    },\n    append: function(node, indentation) {\n      var index, lastNode, parent;\n      if (indentation == null) {\n        indentation = 0;\n      }\n      if (node.filterLine) {\n        lastNode = this.nodePath[this.nodePath.length - 1];\n        this.appendFilterContent(lastNode, node.filterLine);\n        return;\n      }\n      parent = this.lastParent(indentation);\n      this.appendChild(parent, node);\n      index = indentation + 1;\n      this.nodePath[index] = node;\n      this.nodePath.length = index + 1;\n      return node;\n    },\n    appendChild: function(parent, child) {\n      if (!child.filter) {\n        this.filterIndent = void 0;\n        this.lexer.popState();\n      }\n      parent.children || (parent.children = []);\n      return parent.children.push(child);\n    },\n    appendFilterContent: function(filter, content) {\n      filter.content || (filter.content = \"\");\n      return filter.content += \"\" + content + \"\\n\";\n    }\n  });\n\n  module.exports = parser;\n\n}).call(this);\n\n},{\"./haml_lexer\":7,\"./jade_lexer\":8,\"./parser\":10}],10:[function(_dereq_,module,exports){\n(function (process){\n/* parser generated by jison 0.4.6 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"root\":3,\"lines\":4,\"line\":5,\"indentation\":6,\"indentationLevel\":7,\"INDENT\":8,\"lineMain\":9,\"end\":10,\"tag\":11,\"rest\":12,\"COMMENT\":13,\"FILTER\":14,\"FILTER_LINE\":15,\"NEWLINE\":16,\"name\":17,\"tagComponents\":18,\"attributes\":19,\"idComponent\":20,\"classComponents\":21,\"ID\":22,\"CLASS\":23,\"LEFT_PARENTHESIS\":24,\"attributePairs\":25,\"RIGHT_PARENTHESIS\":26,\"SEPARATOR\":27,\"attributePair\":28,\"ATTRIBUTE\":29,\"EQUAL\":30,\"ATTRIBUTE_VALUE\":31,\"AT_ATTRIBUTE\":32,\"TAG\":33,\"BUFFERED_CODE\":34,\"UNBUFFERED_CODE\":35,\"TEXT\":36,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",8:\"INDENT\",13:\"COMMENT\",14:\"FILTER\",15:\"FILTER_LINE\",16:\"NEWLINE\",22:\"ID\",23:\"CLASS\",24:\"LEFT_PARENTHESIS\",26:\"RIGHT_PARENTHESIS\",27:\"SEPARATOR\",29:\"ATTRIBUTE\",30:\"EQUAL\",31:\"ATTRIBUTE_VALUE\",32:\"AT_ATTRIBUTE\",33:\"TAG\",34:\"BUFFERED_CODE\",35:\"UNBUFFERED_CODE\",36:\"TEXT\"},\nproductions_: [0,[3,1],[4,2],[4,1],[6,0],[6,1],[7,2],[7,1],[5,3],[5,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[10,1],[11,2],[11,2],[11,1],[11,1],[18,3],[18,2],[18,2],[18,2],[18,1],[18,1],[20,1],[21,2],[21,1],[19,3],[25,3],[25,1],[28,3],[28,1],[17,1],[12,1],[12,1],[12,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:return this.$ = yy.nodePath[0].children;\nbreak;\ncase 2:this.$ = $$[$0-1];\nbreak;\ncase 3:this.$ = $$[$0];\nbreak;\ncase 4:this.$ = 0;\nbreak;\ncase 5:this.$ = $$[$0];\nbreak;\ncase 6:this.$ = $$[$0-1] + 1;\nbreak;\ncase 7:this.$ = 1;\nbreak;\ncase 8:this.$ = yy.append($$[$0-1], $$[$0-2]);\nbreak;\ncase 9:this.$ = (function () {\n        if ($$[$0].newline) {\n          return yy.newline();\n        }\n      }());\nbreak;\ncase 10:this.$ = yy.extend($$[$0-1], $$[$0]);\nbreak;\ncase 11:this.$ = $$[$0];\nbreak;\ncase 12:this.$ = $$[$0];\nbreak;\ncase 13:this.$ = {\n          comment: $$[$0]\n        };\nbreak;\ncase 14:this.$ = {\n          filter: $$[$0]\n        };\nbreak;\ncase 15:this.$ = {\n          filterLine: $$[$0]\n        };\nbreak;\ncase 16:this.$ = {\n          newline: true\n        };\nbreak;\ncase 17:this.$ = (function () {\n        $$[$0].tag = $$[$0-1];\n        return $$[$0];\n      }());\nbreak;\ncase 18:this.$ = {\n          tag: $$[$0-1],\n          attributes: $$[$0]\n        };\nbreak;\ncase 19:this.$ = {\n          tag: $$[$0]\n        };\nbreak;\ncase 20:this.$ = yy.extend($$[$0], {\n          tag: \"div\"\n        });\nbreak;\ncase 21:this.$ = {\n          id: $$[$0-2],\n          classes: $$[$0-1],\n          attributes: $$[$0]\n        };\nbreak;\ncase 22:this.$ = {\n          id: $$[$0-1],\n          attributes: $$[$0]\n        };\nbreak;\ncase 23:this.$ = {\n          classes: $$[$0-1],\n          attributes: $$[$0]\n        };\nbreak;\ncase 24:this.$ = {\n          id: $$[$0-1],\n          classes: $$[$0]\n        };\nbreak;\ncase 25:this.$ = {\n          id: $$[$0]\n        };\nbreak;\ncase 26:this.$ = {\n          classes: $$[$0]\n        };\nbreak;\ncase 27:this.$ = $$[$0];\nbreak;\ncase 28:this.$ = $$[$0-1].concat($$[$0]);\nbreak;\ncase 29:this.$ = [$$[$0]];\nbreak;\ncase 30:this.$ = $$[$0-1];\nbreak;\ncase 31:this.$ = $$[$0-2].concat($$[$0]);\nbreak;\ncase 32:this.$ = [$$[$0]];\nbreak;\ncase 33:this.$ = {\n          name: $$[$0-2],\n          value: $$[$0]\n        };\nbreak;\ncase 34:this.$ = {\n          name: $$[$0].substring(1),\n          value: $$[$0]\n        };\nbreak;\ncase 35:this.$ = $$[$0];\nbreak;\ncase 36:this.$ = {\n          bufferedCode: $$[$0]\n        };\nbreak;\ncase 37:this.$ = {\n          unbufferedCode: $$[$0]\n        };\nbreak;\ncase 38:this.$ = {\n          text: $$[$0] + \"\\n\"\n        };\nbreak;\n}\n},\ntable: [{3:1,4:2,5:3,6:4,7:6,8:[1,8],10:5,13:[2,4],14:[2,4],15:[2,4],16:[1,7],22:[2,4],23:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4]},{1:[3]},{1:[2,1],5:9,6:4,7:6,8:[1,8],10:5,13:[2,4],14:[2,4],15:[2,4],16:[1,7],22:[2,4],23:[2,4],33:[2,4],34:[2,4],35:[2,4],36:[2,4]},{1:[2,3],8:[2,3],13:[2,3],14:[2,3],15:[2,3],16:[2,3],22:[2,3],23:[2,3],33:[2,3],34:[2,3],35:[2,3],36:[2,3]},{9:10,11:11,12:12,13:[1,13],14:[1,14],15:[1,15],17:16,18:17,20:22,21:23,22:[1,24],23:[1,25],33:[1,21],34:[1,18],35:[1,19],36:[1,20]},{1:[2,9],8:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[2,9],22:[2,9],23:[2,9],33:[2,9],34:[2,9],35:[2,9],36:[2,9]},{8:[1,26],13:[2,5],14:[2,5],15:[2,5],22:[2,5],23:[2,5],33:[2,5],34:[2,5],35:[2,5],36:[2,5]},{1:[2,16],8:[2,16],13:[2,16],14:[2,16],15:[2,16],16:[2,16],22:[2,16],23:[2,16],33:[2,16],34:[2,16],35:[2,16],36:[2,16]},{8:[2,7],13:[2,7],14:[2,7],15:[2,7],22:[2,7],23:[2,7],33:[2,7],34:[2,7],35:[2,7],36:[2,7]},{1:[2,2],8:[2,2],13:[2,2],14:[2,2],15:[2,2],16:[2,2],22:[2,2],23:[2,2],33:[2,2],34:[2,2],35:[2,2],36:[2,2]},{10:27,16:[1,7]},{12:28,16:[2,11],34:[1,18],35:[1,19],36:[1,20]},{16:[2,12]},{16:[2,13]},{16:[2,14]},{16:[2,15]},{16:[2,19],18:29,19:30,20:22,21:23,22:[1,24],23:[1,25],24:[1,31],34:[2,19],35:[2,19],36:[2,19]},{16:[2,20],34:[2,20],35:[2,20],36:[2,20]},{16:[2,36]},{16:[2,37]},{16:[2,38]},{16:[2,35],22:[2,35],23:[2,35],24:[2,35],34:[2,35],35:[2,35],36:[2,35]},{16:[2,25],19:33,21:32,23:[1,25],24:[1,31],34:[2,25],35:[2,25],36:[2,25]},{16:[2,26],19:34,23:[1,35],24:[1,31],34:[2,26],35:[2,26],36:[2,26]},{16:[2,27],23:[2,27],24:[2,27],34:[2,27],35:[2,27],36:[2,27]},{16:[2,29],23:[2,29],24:[2,29],34:[2,29],35:[2,29],36:[2,29]},{8:[2,6],13:[2,6],14:[2,6],15:[2,6],22:[2,6],23:[2,6],33:[2,6],34:[2,6],35:[2,6],36:[2,6]},{1:[2,8],8:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[2,8],22:[2,8],23:[2,8],33:[2,8],34:[2,8],35:[2,8],36:[2,8]},{16:[2,10]},{16:[2,17],34:[2,17],35:[2,17],36:[2,17]},{16:[2,18],34:[2,18],35:[2,18],36:[2,18]},{25:36,28:37,29:[1,38],32:[1,39]},{16:[2,24],19:40,23:[1,35],24:[1,31],34:[2,24],35:[2,24],36:[2,24]},{16:[2,22],34:[2,22],35:[2,22],36:[2,22]},{16:[2,23],34:[2,23],35:[2,23],36:[2,23]},{16:[2,28],23:[2,28],24:[2,28],34:[2,28],35:[2,28],36:[2,28]},{26:[1,41],27:[1,42]},{26:[2,32],27:[2,32]},{30:[1,43]},{26:[2,34],27:[2,34]},{16:[2,21],34:[2,21],35:[2,21],36:[2,21]},{16:[2,30],34:[2,30],35:[2,30],36:[2,30]},{28:44,29:[1,38],32:[1,39]},{31:[1,45]},{26:[2,31],27:[2,31]},{26:[2,33],27:[2,33]}],\ndefaultActions: {12:[2,12],13:[2,13],14:[2,14],15:[2,15],18:[2,36],19:[2,37],20:[2,38],28:[2,10]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n    }\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || EOF;\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + this.lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: this.lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: this.lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\nundefined\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof _dereq_ !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = parser;\nexports.Parser = parser.Parser;\nexports.parse = function () { return parser.parse.apply(parser, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = _dereq_('fs').readFileSync(_dereq_('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && _dereq_.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}\n}).call(this,_dereq_(\"FWaASH\"))\n},{\"FWaASH\":4,\"fs\":2,\"path\":3}],11:[function(_dereq_,module,exports){\n// Generated by CoffeeScript 1.7.1\n(function() {\n  \"use strict\";\n  var Observable, Runtime, bindEvent, bindObservable, bufferTo, classes, createElement, empty, eventNames, get, id, isEvent, isFragment, makeElement, observeAttribute, observeAttributes, observeContent, specialBindings, valueBind, valueIndexOf;\n\n  Observable = _dereq_(\"o_0\");\n\n  eventNames = \"abort\\nblur\\nchange\\nclick\\ndblclick\\ndrag\\ndragend\\ndragenter\\ndragleave\\ndragover\\ndragstart\\ndrop\\nerror\\nfocus\\ninput\\nkeydown\\nkeypress\\nkeyup\\nload\\nmousedown\\nmousemove\\nmouseout\\nmouseover\\nmouseup\\nreset\\nresize\\nscroll\\nselect\\nsubmit\\ntouchcancel\\ntouchend\\ntouchenter\\ntouchleave\\ntouchmove\\ntouchstart\\nunload\".split(\"\\n\");\n\n  isEvent = function(name) {\n    return eventNames.indexOf(name) !== -1;\n  };\n\n  isFragment = function(node) {\n    return (node != null ? node.nodeType : void 0) === 11;\n  };\n\n  valueBind = function(element, value, context) {\n    Observable(function() {\n      var update;\n      value = Observable(value, context);\n      switch (element.nodeName) {\n        case \"SELECT\":\n          element.oninput = element.onchange = function() {\n            var optionValue, _ref, _value;\n            _ref = this.children[this.selectedIndex], optionValue = _ref.value, _value = _ref._value;\n            return value(_value || optionValue);\n          };\n          update = function(newValue) {\n            var options;\n            element._value = newValue;\n            if ((options = element._options)) {\n              if (newValue.value != null) {\n                return element.value = (typeof newValue.value === \"function\" ? newValue.value() : void 0) || newValue.value;\n              } else {\n                return element.selectedIndex = valueIndexOf(options, newValue);\n              }\n            } else {\n              return element.value = newValue;\n            }\n          };\n          return bindObservable(element, value, context, update);\n        default:\n          element.oninput = element.onchange = function() {\n            return value(element.value);\n          };\n          if (typeof element.attachEvent === \"function\") {\n            element.attachEvent(\"onkeydown\", function() {\n              return setTimeout(function() {\n                return value(element.value);\n              }, 0);\n            });\n          }\n          return bindObservable(element, value, context, function(newValue) {\n            if (element.value !== newValue) {\n              return element.value = newValue;\n            }\n          });\n      }\n    });\n  };\n\n  specialBindings = {\n    INPUT: {\n      checked: function(element, value, context) {\n        element.onchange = function() {\n          return typeof value === \"function\" ? value(element.checked) : void 0;\n        };\n        return bindObservable(element, value, context, function(newValue) {\n          return element.checked = newValue;\n        });\n      }\n    },\n    SELECT: {\n      options: function(element, values, context) {\n        var updateValues;\n        values = Observable(values, context);\n        updateValues = function(values) {\n          empty(element);\n          element._options = values;\n          return values.map(function(value, index) {\n            var option, optionName, optionValue;\n            option = createElement(\"option\");\n            option._value = value;\n            if (typeof value === \"object\") {\n              optionValue = (value != null ? value.value : void 0) || index;\n            } else {\n              optionValue = value.toString();\n            }\n            bindObservable(option, optionValue, value, function(newValue) {\n              return option.value = newValue;\n            });\n            optionName = (value != null ? value.name : void 0) || value;\n            bindObservable(option, optionName, value, function(newValue) {\n              return option.textContent = option.innerText = newValue;\n            });\n            element.appendChild(option);\n            if (value === element._value) {\n              element.selectedIndex = index;\n            }\n            return option;\n          });\n        };\n        return bindObservable(element, values, context, updateValues);\n      }\n    }\n  };\n\n  observeAttribute = function(element, context, name, value) {\n    var binding, nodeName, _ref;\n    nodeName = element.nodeName;\n    if (name === \"value\") {\n      valueBind(element, value);\n    } else if (binding = (_ref = specialBindings[nodeName]) != null ? _ref[name] : void 0) {\n      binding(element, value, context);\n    } else if (name.match(/^on/) && isEvent(name.substr(2))) {\n      bindEvent(element, name, value, context);\n    } else if (isEvent(name)) {\n      bindEvent(element, \"on\" + name, value, context);\n    } else {\n      bindObservable(element, value, context, function(newValue) {\n        if ((newValue != null) && newValue !== false) {\n          return element.setAttribute(name, newValue);\n        } else {\n          return element.removeAttribute(name);\n        }\n      });\n    }\n    return element;\n  };\n\n  observeAttributes = function(element, context, attributes) {\n    return Object.keys(attributes).forEach(function(name) {\n      var value;\n      value = attributes[name];\n      return observeAttribute(element, context, name, value);\n    });\n  };\n\n  bindObservable = function(element, value, context, update) {\n    var observable, observe, unobserve;\n    observable = Observable(value, context);\n    observe = function() {\n      observable.observe(update);\n      return update(observable());\n    };\n    unobserve = function() {\n      return observable.stopObserving(update);\n    };\n    observe();\n    return element;\n  };\n\n  bindEvent = function(element, name, fn, context) {\n    return element[name] = function() {\n      return fn.apply(context, arguments);\n    };\n  };\n\n  id = function(element, context, sources) {\n    var lastId, update, value;\n    value = Observable.concat.apply(Observable, sources.map(function(source) {\n      return Observable(source, context);\n    }));\n    update = function(newId) {\n      return element.id = newId;\n    };\n    lastId = function() {\n      return value.last();\n    };\n    return bindObservable(element, lastId, context, update);\n  };\n\n  classes = function(element, context, sources) {\n    var classNames, update, value;\n    value = Observable.concat.apply(Observable, sources.map(function(source) {\n      return Observable(source, context);\n    }));\n    update = function(classNames) {\n      return element.className = classNames;\n    };\n    classNames = function() {\n      return value.join(\" \");\n    };\n    return bindObservable(element, classNames, context, update);\n  };\n\n  createElement = function(name) {\n    return document.createElement(name);\n  };\n\n  observeContent = function(element, context, contentFn) {\n    var append, contents, update;\n    contents = [];\n    contentFn.call(context, {\n      buffer: bufferTo(context, contents),\n      element: makeElement\n    });\n    append = function(item) {\n      if (typeof item === \"string\") {\n        return element.appendChild(document.createTextNode(item));\n      } else if (typeof item === \"number\") {\n        return element.appendChild(document.createTextNode(item));\n      } else if (typeof item === \"boolean\") {\n        return element.appendChild(document.createTextNode(item));\n      } else if (typeof item.each === \"function\") {\n        return item.each(append);\n      } else if (typeof item.forEach === \"function\") {\n        return item.forEach(append);\n      } else {\n        return element.appendChild(item);\n      }\n    };\n    update = function(contents) {\n      empty(element);\n      return contents.forEach(append);\n    };\n    return update(contents);\n  };\n\n  bufferTo = function(context, collection) {\n    return function(content) {\n      if (typeof content === 'function') {\n        content = Observable(content, context);\n      }\n      collection.push(content);\n      return content;\n    };\n  };\n\n  makeElement = function(name, context, attributes, fn) {\n    var element;\n    if (attributes == null) {\n      attributes = {};\n    }\n    element = createElement(name);\n    Observable(function() {\n      if (attributes.id != null) {\n        id(element, context, attributes.id);\n        return delete attributes.id;\n      }\n    });\n    Observable(function() {\n      if (attributes[\"class\"] != null) {\n        classes(element, context, attributes[\"class\"]);\n        return delete attributes[\"class\"];\n      }\n    });\n    Observable(function() {\n      return observeAttributes(element, context, attributes);\n    }, context);\n    if (element.nodeName !== \"SELECT\") {\n      Observable(function() {\n        return observeContent(element, context, fn);\n      }, context);\n    }\n    return element;\n  };\n\n  Runtime = function(context) {\n    var self;\n    self = {\n      buffer: function(content) {\n        if (self.root) {\n          throw \"Cannot have multiple root elements\";\n        }\n        return self.root = content;\n      },\n      element: makeElement,\n      filter: function(name, content) {}\n    };\n    return self;\n  };\n\n  Runtime.VERSION = _dereq_(\"../package.json\").version;\n\n  Runtime.Observable = Observable;\n\n  module.exports = Runtime;\n\n  empty = function(node) {\n    var child, _results;\n    _results = [];\n    while (child = node.firstChild) {\n      _results.push(node.removeChild(child));\n    }\n    return _results;\n  };\n\n  valueIndexOf = function(options, value) {\n    if (typeof value === \"object\") {\n      return options.indexOf(value);\n    } else {\n      return options.map(function(option) {\n        return option.toString();\n      }).indexOf(value.toString());\n    }\n  };\n\n  get = function(x) {\n    if (typeof x === 'function') {\n      return x();\n    } else {\n      return x;\n    }\n  };\n\n}).call(this);\n\n},{\"../package.json\":13,\"o_0\":12}],12:[function(_dereq_,module,exports){\n(function (global){\n// Generated by CoffeeScript 1.8.0\n(function() {\n  var Observable, autoDeps, computeDependencies, copy, extend, flatten, get, last, magicDependency, remove, splat, withBase,\n    __slice = [].slice;\n\n  Observable = function(value, context) {\n    var changed, fn, listeners, notify, notifyReturning, self;\n    if (typeof (value != null ? value.observe : void 0) === \"function\") {\n      return value;\n    }\n    listeners = [];\n    notify = function(newValue) {\n      return copy(listeners).forEach(function(listener) {\n        return listener(newValue);\n      });\n    };\n    if (typeof value === 'function') {\n      fn = value;\n      self = function() {\n        magicDependency(self);\n        return value;\n      };\n      changed = function() {\n        value = computeDependencies(self, fn, changed, context);\n        return notify(value);\n      };\n      value = computeDependencies(self, fn, changed, context);\n    } else {\n      self = function(newValue) {\n        if (arguments.length > 0) {\n          if (value !== newValue) {\n            value = newValue;\n            notify(newValue);\n          }\n        } else {\n          magicDependency(self);\n        }\n        return value;\n      };\n    }\n    self.each = function(callback) {\n      magicDependency(self);\n      if (value != null) {\n        [value].forEach(function(item) {\n          return callback.call(item, item);\n        });\n      }\n      return self;\n    };\n    if (Array.isArray(value)) {\n      [\"concat\", \"every\", \"filter\", \"forEach\", \"indexOf\", \"join\", \"lastIndexOf\", \"map\", \"reduce\", \"reduceRight\", \"slice\", \"some\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          magicDependency(self);\n          return value[method].apply(value, args);\n        };\n      });\n      [\"pop\", \"push\", \"reverse\", \"shift\", \"splice\", \"sort\", \"unshift\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          return notifyReturning(value[method].apply(value, args));\n        };\n      });\n      notifyReturning = function(returnValue) {\n        notify(value);\n        return returnValue;\n      };\n      extend(self, {\n        each: function(callback) {\n          self.forEach(function(item, index) {\n            return callback.call(item, item, index, self);\n          });\n          return self;\n        },\n        remove: function(object) {\n          var index;\n          index = value.indexOf(object);\n          if (index >= 0) {\n            return notifyReturning(value.splice(index, 1)[0]);\n          }\n        },\n        get: function(index) {\n          magicDependency(self);\n          return value[index];\n        },\n        first: function() {\n          magicDependency(self);\n          return value[0];\n        },\n        last: function() {\n          magicDependency(self);\n          return value[value.length - 1];\n        },\n        size: function() {\n          magicDependency(self);\n          return value.length;\n        }\n      });\n    }\n    extend(self, {\n      listeners: listeners,\n      observe: function(listener) {\n        return listeners.push(listener);\n      },\n      stopObserving: function(fn) {\n        return remove(listeners, fn);\n      },\n      toggle: function() {\n        return self(!value);\n      },\n      increment: function(n) {\n        return self(value + n);\n      },\n      decrement: function(n) {\n        return self(value - n);\n      },\n      toString: function() {\n        return \"Observable(\" + value + \")\";\n      }\n    });\n    return self;\n  };\n\n  Observable.concat = function() {\n    var args, o;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    args = Observable(args);\n    o = Observable(function() {\n      return flatten(args.map(splat));\n    });\n    o.push = args.push;\n    return o;\n  };\n\n  module.exports = Observable;\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  global.OBSERVABLE_ROOT_HACK = [];\n\n  autoDeps = function() {\n    return last(global.OBSERVABLE_ROOT_HACK);\n  };\n\n  magicDependency = function(self) {\n    var observerStack;\n    if (observerStack = autoDeps()) {\n      return observerStack.push(self);\n    }\n  };\n\n  withBase = function(self, update, fn) {\n    var deps, value, _ref;\n    global.OBSERVABLE_ROOT_HACK.push(deps = []);\n    try {\n      value = fn();\n      if ((_ref = self._deps) != null) {\n        _ref.forEach(function(observable) {\n          return observable.stopObserving(update);\n        });\n      }\n      self._deps = deps;\n      deps.forEach(function(observable) {\n        return observable.observe(update);\n      });\n    } finally {\n      global.OBSERVABLE_ROOT_HACK.pop();\n    }\n    return value;\n  };\n\n  computeDependencies = function(self, fn, update, context) {\n    return withBase(self, update, function() {\n      return fn.call(context);\n    });\n  };\n\n  remove = function(array, value) {\n    var index;\n    index = array.indexOf(value);\n    if (index >= 0) {\n      return array.splice(index, 1)[0];\n    }\n  };\n\n  copy = function(array) {\n    return array.concat([]);\n  };\n\n  get = function(arg) {\n    if (typeof arg === \"function\") {\n      return arg();\n    } else {\n      return arg;\n    }\n  };\n\n  splat = function(item) {\n    var result, results;\n    results = [];\n    if (item == null) {\n      return results;\n    }\n    if (typeof item.forEach === \"function\") {\n      item.forEach(function(i) {\n        return results.push(i);\n      });\n    } else {\n      result = get(item);\n      if (result != null) {\n        results.push(result);\n      }\n    }\n    return results;\n  };\n\n  last = function(array) {\n    return array[array.length - 1];\n  };\n\n  flatten = function(array) {\n    return array.reduce(function(a, b) {\n      return a.concat(b);\n    }, []);\n  };\n\n}).call(this);\n\n}).call(this,typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(_dereq_,module,exports){\nmodule.exports={\n  \"name\": \"hamlet-runtime\",\n  \"version\": \"0.7.0\",\n  \"devDependencies\": {\n    \"browserify\": \"^4.1.11\",\n    \"coffee-script\": \"~1.7.1\",\n    \"hamlet-compiler\": \"0.7.0\",\n    \"jsdom\": \"^0.10.5\",\n    \"mocha\": \"~1.12.0\",\n    \"uglify-js\": \"~2.3.6\"\n  },\n  \"dependencies\": {\n    \"o_0\": \"0.3.3\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/dr-coffee-labs/hamlet-compiler.git\"\n  },\n  \"scripts\": {\n    \"prepublish\": \"script/prepublish\",\n    \"test\": \"script/test\"\n  },\n  \"files\": [\n    \"dist/\"\n  ],\n  \"main\": \"dist/runtime.js\",\n  \"bugs\": {\n    \"url\": \"https://github.com/dr-coffee-labs/hamlet-compiler/issues\"\n  },\n  \"homepage\": \"https://github.com/dr-coffee-labs/hamlet-compiler\",\n  \"_id\": \"hamlet-runtime@0.7.0\",\n  \"_shasum\": \"2ca3b4729fa92282818cff8f4c5d4f14583538fc\",\n  \"_from\": \"hamlet-runtime@0.7.0\",\n  \"_npmVersion\": \"1.4.9\",\n  \"_npmUser\": {\n    \"name\": \"strd6\",\n    \"email\": \"yahivin@gmail.com\"\n  },\n  \"maintainers\": [\n    {\n      \"name\": \"strd6\",\n      \"email\": \"yahivin@gmail.com\"\n    }\n  ],\n  \"dist\": {\n    \"shasum\": \"2ca3b4729fa92282818cff8f4c5d4f14583538fc\",\n    \"tarball\": \"http://registry.npmjs.org/hamlet-runtime/-/hamlet-runtime-0.7.0.tgz\"\n  },\n  \"directories\": {},\n  \"_resolved\": \"https://registry.npmjs.org/hamlet-runtime/-/hamlet-runtime-0.7.0.tgz\"\n}\n\n},{}]},{},[1])\n(1)\n});\n",
      "type": "blob"
    }
  },
  "progenitor": {
    "url": "https://danielx.net/editor/"
  },
  "entryPoint": "main",
  "repository": {
    "branch": "master",
    "default_branch": "master",
    "full_name": "STRd6/2A03",
    "homepage": null,
    "description": "Experimenting with NES soundz",
    "html_url": "https://github.com/STRd6/2A03",
    "url": "https://api.github.com/repos/STRd6/2A03",
    "publishBranch": "gh-pages"
  },
  "dependencies": {
    "ajax": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2016 \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
          "mode": "100644",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "content": "# ajax\n\nA Promise returning wrapper for XMLHttpRequest\n\nThis aims to be a very small and very direct wrapper for XMLHttpRequest. We\nreturn a native promise and configure the requets via an options object.\n\n\n",
          "mode": "100644",
          "type": "blob"
        },
        "main.coffee": {
          "path": "main.coffee",
          "content": "{extend, defaults} = require \"./util\"\n\nrequire \"./shims\"\n\nmodule.exports = ->\n  ajax = (options={}) ->\n    {data, headers, method, overrideMimeType, password, url, responseType, timeout, user, withCredentials} = options\n    data ?= \"\"\n    method ?= \"GET\"\n    password ?= \"\"\n    responseType ?= \"\"\n    timeout ?= 0\n    user ?= \"\"\n    withCredentials ?= false\n\n    new ProgressPromise (resolve, reject, progress) ->\n      xhr = new XMLHttpRequest()\n      xhr.open(method, url, true, user, password)\n      xhr.responseType = responseType\n      xhr.timeout = timeout\n      xhr.withCredentialls = withCredentials\n\n      if headers\n        Object.keys(headers).forEach (header) ->\n          value = headers[header]\n          xhr.setRequestHeader header, value\n\n      if overrideMimeType\n        xhr.overrideMimeType overrideMimeType\n\n      xhr.onload = (e) ->\n        if (200 <= this.status < 300) or this.status is 304\n          resolve this.response\n          complete e, xhr, options\n        else\n          reject xhr\n          complete e, xhr, options\n\n      xhr.onerror = (e) ->\n        reject xhr\n        complete e, xhr, options\n\n      xhr.onprogress = progress\n\n      xhr.send(data)\n\n  complete = (args...) ->\n    completeHandlers.forEach (handler) ->\n      handler args...\n\n  configure = (optionDefaults) ->\n    (url, options={}) ->\n      if typeof url is \"object\"\n        options = url\n      else\n        options.url = url\n\n      defaults options, optionDefaults\n\n      ajax(options)\n\n  completeHandlers = []\n\n  extend ajax,\n    ajax: configure {}\n    complete: (handler) ->\n      completeHandlers.push handler\n\n    getJSON: configure\n      responseType: \"json\"\n\n    getBlob: configure\n      responseType: \"blob\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "content": "version: \"0.1.5-pre.0\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "test/test.coffee": {
          "path": "test/test.coffee",
          "content": "Ajax = require \"../main\"\n\ndescribe \"Ajax\", ->\n  it \"should provide progress\", (done) ->\n    ajax = Ajax()\n\n    ajax\n      url: \"https://api.github.com/users\"\n      responseType: \"json\"\n    .progress (e) ->\n      console.log e\n    .then (data) ->\n      assert data[0].id is 1\n      done()\n\n  it \"should getJSON\", (done) ->\n    ajax = Ajax()\n\n    ajax\n      url: \"https://api.github.com/users\"\n      responseType: \"json\"\n    .then (data) ->\n      assert data[0].id is 1\n      assert data[0].login is \"mojombo\"\n\n      done()\n\n  it \"should have complete handlers\", (done) ->\n    ajax = Ajax()\n\n    ajax.complete (e, xhr, options) ->\n      done()\n\n    ajax.getJSON(\"https://api.github.com/users\")\n\n\n  it \"should work with options only\", (done) ->\n    ajax = Ajax()\n\n    ajax.getJSON(url: \"https://api.github.com/users\")\n    .then (data) ->\n      assert data[0].id is 1\n      assert data[0].login is \"mojombo\"\n\n      done()\n",
          "mode": "100644",
          "type": "blob"
        },
        "util.coffee": {
          "path": "util.coffee",
          "content": "module.exports =\n  defaults: (target, objects...) ->\n    for object in objects\n      for name of object\n        unless target.hasOwnProperty(name)\n          target[name] = object[name]\n\n    return target\n\n  extend: (target, sources...) ->\n    for source in sources\n      for name of source\n        target[name] = source[name]\n\n    return target\n",
          "mode": "100644",
          "type": "blob"
        },
        "shims.coffee": {
          "path": "shims.coffee",
          "content": "# Extend promises with `finally`\n# From: https://github.com/domenic/promises-unwrapping/issues/18\nPromise.prototype.finally ?= (callback) ->\n  # We don’t invoke the callback in here,\n  # because we want then() to handle its exceptions\n  this.then(\n    # Callback fulfills: pass on predecessor settlement\n    # Callback rejects: pass on rejection (=omit 2nd arg.)\n    (value) ->\n      Promise.resolve(callback())\n      .then -> return value\n    (reason) ->\n      Promise.resolve(callback())\n      .then -> throw reason\n  )\n\n# HACK: I really would prefer not to modify the native Promise prototype, but I\n# know no other way...\n\nPromise.prototype._notify ?= (event) ->\n  @_progressHandlers.forEach (handler) ->\n    try\n      handler(event)\n\nPromise.prototype.progress ?= (handler) ->\n  @_progressHandlers ?= []\n  @_progressHandlers.push handler\n\n  return this\n\nglobal.ProgressPromise = (fn) ->\n  p = new Promise (resolve, reject) ->\n    notify = ->\n      p._progressHandlers?.forEach (handler) ->\n        try\n          handler(event)\n\n    fn(resolve, reject, notify)\n\n  p.then = (onFulfilled, onRejected) ->\n    result = Promise.prototype.then.call(p, onFulfilled, onRejected)\n    # Pass progress through\n    p.progress result._notify.bind(result)\n\n    return result\n\n  return p\n",
          "mode": "100644"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "(function() {\n  var defaults, extend, _ref,\n    __slice = [].slice;\n\n  _ref = require(\"./util\"), extend = _ref.extend, defaults = _ref.defaults;\n\n  require(\"./shims\");\n\n  module.exports = function() {\n    var ajax, complete, completeHandlers, configure;\n    ajax = function(options) {\n      var data, headers, method, overrideMimeType, password, responseType, timeout, url, user, withCredentials;\n      if (options == null) {\n        options = {};\n      }\n      data = options.data, headers = options.headers, method = options.method, overrideMimeType = options.overrideMimeType, password = options.password, url = options.url, responseType = options.responseType, timeout = options.timeout, user = options.user, withCredentials = options.withCredentials;\n      if (data == null) {\n        data = \"\";\n      }\n      if (method == null) {\n        method = \"GET\";\n      }\n      if (password == null) {\n        password = \"\";\n      }\n      if (responseType == null) {\n        responseType = \"\";\n      }\n      if (timeout == null) {\n        timeout = 0;\n      }\n      if (user == null) {\n        user = \"\";\n      }\n      if (withCredentials == null) {\n        withCredentials = false;\n      }\n      return new ProgressPromise(function(resolve, reject, progress) {\n        var xhr;\n        xhr = new XMLHttpRequest();\n        xhr.open(method, url, true, user, password);\n        xhr.responseType = responseType;\n        xhr.timeout = timeout;\n        xhr.withCredentialls = withCredentials;\n        if (headers) {\n          Object.keys(headers).forEach(function(header) {\n            var value;\n            value = headers[header];\n            return xhr.setRequestHeader(header, value);\n          });\n        }\n        if (overrideMimeType) {\n          xhr.overrideMimeType(overrideMimeType);\n        }\n        xhr.onload = function(e) {\n          var _ref1;\n          if (((200 <= (_ref1 = this.status) && _ref1 < 300)) || this.status === 304) {\n            resolve(this.response);\n            return complete(e, xhr, options);\n          } else {\n            reject(xhr);\n            return complete(e, xhr, options);\n          }\n        };\n        xhr.onerror = function(e) {\n          reject(xhr);\n          return complete(e, xhr, options);\n        };\n        xhr.onprogress = progress;\n        return xhr.send(data);\n      });\n    };\n    complete = function() {\n      var args;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return completeHandlers.forEach(function(handler) {\n        return handler.apply(null, args);\n      });\n    };\n    configure = function(optionDefaults) {\n      return function(url, options) {\n        if (options == null) {\n          options = {};\n        }\n        if (typeof url === \"object\") {\n          options = url;\n        } else {\n          options.url = url;\n        }\n        defaults(options, optionDefaults);\n        return ajax(options);\n      };\n    };\n    completeHandlers = [];\n    return extend(ajax, {\n      ajax: configure({}),\n      complete: function(handler) {\n        return completeHandlers.push(handler);\n      },\n      getJSON: configure({\n        responseType: \"json\"\n      }),\n      getBlob: configure({\n        responseType: \"blob\"\n      })\n    });\n  };\n\n}).call(this);\n",
          "type": "blob"
        },
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"version\":\"0.1.5-pre.0\"};",
          "type": "blob"
        },
        "test/test": {
          "path": "test/test",
          "content": "(function() {\n  var Ajax;\n\n  Ajax = require(\"../main\");\n\n  describe(\"Ajax\", function() {\n    it(\"should provide progress\", function(done) {\n      var ajax;\n      ajax = Ajax();\n      return ajax({\n        url: \"https://api.github.com/users\",\n        responseType: \"json\"\n      }).progress(function(e) {\n        return console.log(e);\n      }).then(function(data) {\n        assert(data[0].id === 1);\n        return done();\n      });\n    });\n    it(\"should getJSON\", function(done) {\n      var ajax;\n      ajax = Ajax();\n      return ajax({\n        url: \"https://api.github.com/users\",\n        responseType: \"json\"\n      }).then(function(data) {\n        assert(data[0].id === 1);\n        assert(data[0].login === \"mojombo\");\n        return done();\n      });\n    });\n    it(\"should have complete handlers\", function(done) {\n      var ajax;\n      ajax = Ajax();\n      ajax.complete(function(e, xhr, options) {\n        return done();\n      });\n      return ajax.getJSON(\"https://api.github.com/users\");\n    });\n    return it(\"should work with options only\", function(done) {\n      var ajax;\n      ajax = Ajax();\n      return ajax.getJSON({\n        url: \"https://api.github.com/users\"\n      }).then(function(data) {\n        assert(data[0].id === 1);\n        assert(data[0].login === \"mojombo\");\n        return done();\n      });\n    });\n  });\n\n}).call(this);\n",
          "type": "blob"
        },
        "util": {
          "path": "util",
          "content": "(function() {\n  var __slice = [].slice;\n\n  module.exports = {\n    defaults: function() {\n      var name, object, objects, target, _i, _len;\n      target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      for (_i = 0, _len = objects.length; _i < _len; _i++) {\n        object = objects[_i];\n        for (name in object) {\n          if (!target.hasOwnProperty(name)) {\n            target[name] = object[name];\n          }\n        }\n      }\n      return target;\n    },\n    extend: function() {\n      var name, source, sources, target, _i, _len;\n      target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n      for (_i = 0, _len = sources.length; _i < _len; _i++) {\n        source = sources[_i];\n        for (name in source) {\n          target[name] = source[name];\n        }\n      }\n      return target;\n    }\n  };\n\n}).call(this);\n",
          "type": "blob"
        },
        "shims": {
          "path": "shims",
          "content": "(function() {\n  var _base, _base1, _base2;\n\n  if ((_base = Promise.prototype)[\"finally\"] == null) {\n    _base[\"finally\"] = function(callback) {\n      return this.then(function(value) {\n        return Promise.resolve(callback()).then(function() {\n          return value;\n        });\n      }, function(reason) {\n        return Promise.resolve(callback()).then(function() {\n          throw reason;\n        });\n      });\n    };\n  }\n\n  if ((_base1 = Promise.prototype)._notify == null) {\n    _base1._notify = function(event) {\n      return this._progressHandlers.forEach(function(handler) {\n        try {\n          return handler(event);\n        } catch (_error) {}\n      });\n    };\n  }\n\n  if ((_base2 = Promise.prototype).progress == null) {\n    _base2.progress = function(handler) {\n      if (this._progressHandlers == null) {\n        this._progressHandlers = [];\n      }\n      this._progressHandlers.push(handler);\n      return this;\n    };\n  }\n\n  global.ProgressPromise = function(fn) {\n    var p;\n    p = new Promise(function(resolve, reject) {\n      var notify;\n      notify = function() {\n        var _ref;\n        return (_ref = p._progressHandlers) != null ? _ref.forEach(function(handler) {\n          try {\n            return handler(event);\n          } catch (_error) {}\n        }) : void 0;\n      };\n      return fn(resolve, reject, notify);\n    });\n    p.then = function(onFulfilled, onRejected) {\n      var result;\n      result = Promise.prototype.then.call(p, onFulfilled, onRejected);\n      p.progress(result._notify.bind(result));\n      return result;\n    };\n    return p;\n  };\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "https://danielx.net/editor/"
      },
      "version": "0.1.5-pre.0",
      "entryPoint": "main",
      "repository": {
        "branch": "master",
        "default_branch": "master",
        "full_name": "distri/ajax",
        "homepage": null,
        "description": "Promise returning Ajax lib",
        "html_url": "https://github.com/distri/ajax",
        "url": "https://api.github.com/repos/distri/ajax",
        "publishBranch": "gh-pages"
      },
      "dependencies": {}
    },
    "touch-canvas": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "mode": "100644",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "mode": "100644",
          "content": "touch-canvas\n============\n\nA canvas you can touch\n",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "mode": "100644",
          "content": "entryPoint: \"touch_canvas\"\nversion: \"0.3.1\"\ndependencies:\n  \"bindable\": \"distri/bindable:v0.1.0\"\n  \"core\": \"distri/core:v0.6.0\"\n  \"pixie-canvas\": \"distri/pixie-canvas:v0.9.2\"\n",
          "type": "blob"
        },
        "touch_canvas.coffee.md": {
          "path": "touch_canvas.coffee.md",
          "mode": "100644",
          "content": "Touch Canvas\n============\n\nDemo\n----\n\n>     #! demo\n>     paint = (position) ->\n>       x = position.x * canvas.width()\n>       y = position.y * canvas.height()\n>\n>       canvas.drawCircle\n>         radius: 10\n>         color: \"red\"\n>         position:\n>           x: x\n>           y: y\n>\n>     canvas.on \"touch\", (p) ->\n>       paint(p)\n>\n>     canvas.on \"move\", (p) ->\n>       paint(p)\n\n----\n\nImplementation\n--------------\n\nA canvas element that reports mouse and touch events in the range [0, 1].\n\n    Bindable = require \"bindable\"\n    Core = require \"core\"\n    PixieCanvas = require \"pixie-canvas\"\n\nA number really close to 1. We should never actually return 1, but move events\nmay get a little fast and loose with exiting the canvas, so let's play it safe.\n\n    MAX = 0.999999999999\n\n    TouchCanvas = (I={}) ->\n      self = PixieCanvas I\n\n      Core(I, self)\n\n      self.include Bindable\n\n      element = self.element()\n\n      # Keep track of if the mouse is active in the element\n      active = false\n\nWhen we click within the canvas set the value for the position we clicked at.\n\n      listen element, \"mousedown\", (e) ->\n        active = true\n\n        self.trigger \"touch\", localPosition(e)\n\nHandle touch starts\n\n      listen element, \"touchstart\", (e) ->\n        # Global `event`\n        processTouches event, (touch) ->\n          self.trigger \"touch\", localPosition(touch)\n\nWhen the mouse moves apply a change for each x value in the intervening positions.\n\n      listen element, \"mousemove\", (e) ->\n        if active\n          self.trigger \"move\", localPosition(e)\n\nHandle moves outside of the element.\n\n      listen document, \"mousemove\", (e) ->\n        if active\n          self.trigger \"move\", localPosition(e)\n\nHandle touch moves.\n\n      listen element, \"touchmove\", (e) ->\n        # Global `event`\n        processTouches event, (touch) ->\n          self.trigger \"move\", localPosition(touch)\n\nHandle releases.\n\n      listen element, \"mouseup\", (e) ->\n        self.trigger \"release\", localPosition(e)\n        active = false\n\n        return\n\nHandle touch ends.\n\n      listen element, \"touchend\", (e) ->\n        # Global `event`\n        processTouches event, (touch) ->\n          self.trigger \"release\", localPosition(touch)\n\nWhenever the mouse button is released from anywhere, deactivate. Be sure to\ntrigger the release event if the mousedown started within the element.\n\n      listen document, \"mouseup\", (e) ->\n        if active\n          self.trigger \"release\", localPosition(e)\n\n        active = false\n\n        return\n\nHelpers\n-------\n\nProcess touches\n\n      processTouches = (event, fn) ->\n        event.preventDefault()\n\n        if event.type is \"touchend\"\n          # touchend doesn't have any touches, but does have changed touches\n          touches = event.changedTouches\n        else\n          touches = event.touches\n\n        self.debug? Array::map.call touches, ({identifier, pageX, pageY}) ->\n          \"[#{identifier}: #{pageX}, #{pageY} (#{event.type})]\\n\"\n\n        Array::forEach.call touches, fn\n\nLocal event position.\n\n      localPosition = (e) ->\n        rect = element.getBoundingClientRect()\n\n        point =\n          x: clamp (e.pageX - rect.left) / rect.width, 0, MAX\n          y: clamp (e.pageY - rect.top) / rect.height, 0, MAX\n\n        # Add mouse into touch identifiers as 0\n        point.identifier = (e.identifier + 1) or 0\n\n        return point\n\nReturn self\n\n      return self\n\nAttach an event listener to an element\n\n    listen = (element, event, handler) ->\n      element.addEventListener(event, handler, false)\n\nClamp a number to be within a range.\n\n    clamp = (number, min, max) ->\n      Math.min(Math.max(number, min), max)\n\nExport\n\n    module.exports = TouchCanvas\n\nInteractive Examples\n--------------------\n\n>     #! setup\n>     TouchCanvas = require \"/touch_canvas\"\n>\n>     Interactive.register \"demo\", ({source, runtimeElement}) ->\n>       canvas = TouchCanvas\n>         width: 400\n>         height: 200\n>\n>       code = CoffeeScript.compile(source)\n>\n>       runtimeElement.empty().append canvas.element()\n>       Function(\"canvas\", code)(canvas)\n",
          "type": "blob"
        },
        "test/touch.coffee": {
          "path": "test/touch.coffee",
          "mode": "100644",
          "content": "TouchCanvas = require \"../touch_canvas\"\n\nextend = (target, sources...) ->\n  for source in sources\n    for name of source\n      target[name] = source[name]\n\n  return target\n\nfireEvent = (element, type, params={}) ->\n  event = document.createEvent(\"Events\")\n  event.initEvent type, true, false\n  extend event, params\n  element.dispatchEvent event\n\ndescribe \"TouchCanvas\", ->\n  it \"should be creatable\", ->\n    c = TouchCanvas()\n    assert c\n\n    document.body.appendChild(c.element())\n  \n  it \"should fire events\", (done) ->\n    canvas = TouchCanvas()\n\n    canvas.on \"touch\", (e) ->\n      done()\n\n    fireEvent canvas.element(), \"mousedown\"\n",
          "type": "blob"
        }
      },
      "distribution": {
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"entryPoint\":\"touch_canvas\",\"version\":\"0.3.1\",\"dependencies\":{\"bindable\":\"distri/bindable:v0.1.0\",\"core\":\"distri/core:v0.6.0\",\"pixie-canvas\":\"distri/pixie-canvas:v0.9.2\"}};",
          "type": "blob"
        },
        "touch_canvas": {
          "path": "touch_canvas",
          "content": "(function() {\n  var Bindable, Core, MAX, PixieCanvas, TouchCanvas, clamp, listen;\n\n  Bindable = require(\"bindable\");\n\n  Core = require(\"core\");\n\n  PixieCanvas = require(\"pixie-canvas\");\n\n  MAX = 0.999999999999;\n\n  TouchCanvas = function(I) {\n    var active, element, localPosition, processTouches, self;\n    if (I == null) {\n      I = {};\n    }\n    self = PixieCanvas(I);\n    Core(I, self);\n    self.include(Bindable);\n    element = self.element();\n    active = false;\n    listen(element, \"mousedown\", function(e) {\n      active = true;\n      return self.trigger(\"touch\", localPosition(e));\n    });\n    listen(element, \"touchstart\", function(e) {\n      return processTouches(event, function(touch) {\n        return self.trigger(\"touch\", localPosition(touch));\n      });\n    });\n    listen(element, \"mousemove\", function(e) {\n      if (active) {\n        return self.trigger(\"move\", localPosition(e));\n      }\n    });\n    listen(document, \"mousemove\", function(e) {\n      if (active) {\n        return self.trigger(\"move\", localPosition(e));\n      }\n    });\n    listen(element, \"touchmove\", function(e) {\n      return processTouches(event, function(touch) {\n        return self.trigger(\"move\", localPosition(touch));\n      });\n    });\n    listen(element, \"mouseup\", function(e) {\n      self.trigger(\"release\", localPosition(e));\n      active = false;\n    });\n    listen(element, \"touchend\", function(e) {\n      return processTouches(event, function(touch) {\n        return self.trigger(\"release\", localPosition(touch));\n      });\n    });\n    listen(document, \"mouseup\", function(e) {\n      if (active) {\n        self.trigger(\"release\", localPosition(e));\n      }\n      active = false;\n    });\n    processTouches = function(event, fn) {\n      var touches;\n      event.preventDefault();\n      if (event.type === \"touchend\") {\n        touches = event.changedTouches;\n      } else {\n        touches = event.touches;\n      }\n      if (typeof self.debug === \"function\") {\n        self.debug(Array.prototype.map.call(touches, function(_arg) {\n          var identifier, pageX, pageY;\n          identifier = _arg.identifier, pageX = _arg.pageX, pageY = _arg.pageY;\n          return \"[\" + identifier + \": \" + pageX + \", \" + pageY + \" (\" + event.type + \")]\\n\";\n        }));\n      }\n      return Array.prototype.forEach.call(touches, fn);\n    };\n    localPosition = function(e) {\n      var point, rect;\n      rect = element.getBoundingClientRect();\n      point = {\n        x: clamp((e.pageX - rect.left) / rect.width, 0, MAX),\n        y: clamp((e.pageY - rect.top) / rect.height, 0, MAX)\n      };\n      point.identifier = (e.identifier + 1) || 0;\n      return point;\n    };\n    return self;\n  };\n\n  listen = function(element, event, handler) {\n    return element.addEventListener(event, handler, false);\n  };\n\n  clamp = function(number, min, max) {\n    return Math.min(Math.max(number, min), max);\n  };\n\n  module.exports = TouchCanvas;\n\n}).call(this);\n\n//# sourceURL=touch_canvas.coffee",
          "type": "blob"
        },
        "test/touch": {
          "path": "test/touch",
          "content": "(function() {\n  var TouchCanvas, extend, fireEvent,\n    __slice = [].slice;\n\n  TouchCanvas = require(\"../touch_canvas\");\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  fireEvent = function(element, type, params) {\n    var event;\n    if (params == null) {\n      params = {};\n    }\n    event = document.createEvent(\"Events\");\n    event.initEvent(type, true, false);\n    extend(event, params);\n    return element.dispatchEvent(event);\n  };\n\n  describe(\"TouchCanvas\", function() {\n    it(\"should be creatable\", function() {\n      var c;\n      c = TouchCanvas();\n      assert(c);\n      return document.body.appendChild(c.element());\n    });\n    return it(\"should fire events\", function(done) {\n      var canvas;\n      canvas = TouchCanvas();\n      canvas.on(\"touch\", function(e) {\n        return done();\n      });\n      return fireEvent(canvas.element(), \"mousedown\");\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/touch.coffee",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "http://strd6.github.io/editor/"
      },
      "version": "0.3.1",
      "entryPoint": "touch_canvas",
      "repository": {
        "id": 13783983,
        "name": "touch-canvas",
        "full_name": "distri/touch-canvas",
        "owner": {
          "login": "distri",
          "id": 6005125,
          "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
          "gravatar_id": null,
          "url": "https://api.github.com/users/distri",
          "html_url": "https://github.com/distri",
          "followers_url": "https://api.github.com/users/distri/followers",
          "following_url": "https://api.github.com/users/distri/following{/other_user}",
          "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
          "organizations_url": "https://api.github.com/users/distri/orgs",
          "repos_url": "https://api.github.com/users/distri/repos",
          "events_url": "https://api.github.com/users/distri/events{/privacy}",
          "received_events_url": "https://api.github.com/users/distri/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/distri/touch-canvas",
        "description": "A canvas you can touch",
        "fork": false,
        "url": "https://api.github.com/repos/distri/touch-canvas",
        "forks_url": "https://api.github.com/repos/distri/touch-canvas/forks",
        "keys_url": "https://api.github.com/repos/distri/touch-canvas/keys{/key_id}",
        "collaborators_url": "https://api.github.com/repos/distri/touch-canvas/collaborators{/collaborator}",
        "teams_url": "https://api.github.com/repos/distri/touch-canvas/teams",
        "hooks_url": "https://api.github.com/repos/distri/touch-canvas/hooks",
        "issue_events_url": "https://api.github.com/repos/distri/touch-canvas/issues/events{/number}",
        "events_url": "https://api.github.com/repos/distri/touch-canvas/events",
        "assignees_url": "https://api.github.com/repos/distri/touch-canvas/assignees{/user}",
        "branches_url": "https://api.github.com/repos/distri/touch-canvas/branches{/branch}",
        "tags_url": "https://api.github.com/repos/distri/touch-canvas/tags",
        "blobs_url": "https://api.github.com/repos/distri/touch-canvas/git/blobs{/sha}",
        "git_tags_url": "https://api.github.com/repos/distri/touch-canvas/git/tags{/sha}",
        "git_refs_url": "https://api.github.com/repos/distri/touch-canvas/git/refs{/sha}",
        "trees_url": "https://api.github.com/repos/distri/touch-canvas/git/trees{/sha}",
        "statuses_url": "https://api.github.com/repos/distri/touch-canvas/statuses/{sha}",
        "languages_url": "https://api.github.com/repos/distri/touch-canvas/languages",
        "stargazers_url": "https://api.github.com/repos/distri/touch-canvas/stargazers",
        "contributors_url": "https://api.github.com/repos/distri/touch-canvas/contributors",
        "subscribers_url": "https://api.github.com/repos/distri/touch-canvas/subscribers",
        "subscription_url": "https://api.github.com/repos/distri/touch-canvas/subscription",
        "commits_url": "https://api.github.com/repos/distri/touch-canvas/commits{/sha}",
        "git_commits_url": "https://api.github.com/repos/distri/touch-canvas/git/commits{/sha}",
        "comments_url": "https://api.github.com/repos/distri/touch-canvas/comments{/number}",
        "issue_comment_url": "https://api.github.com/repos/distri/touch-canvas/issues/comments/{number}",
        "contents_url": "https://api.github.com/repos/distri/touch-canvas/contents/{+path}",
        "compare_url": "https://api.github.com/repos/distri/touch-canvas/compare/{base}...{head}",
        "merges_url": "https://api.github.com/repos/distri/touch-canvas/merges",
        "archive_url": "https://api.github.com/repos/distri/touch-canvas/{archive_format}{/ref}",
        "downloads_url": "https://api.github.com/repos/distri/touch-canvas/downloads",
        "issues_url": "https://api.github.com/repos/distri/touch-canvas/issues{/number}",
        "pulls_url": "https://api.github.com/repos/distri/touch-canvas/pulls{/number}",
        "milestones_url": "https://api.github.com/repos/distri/touch-canvas/milestones{/number}",
        "notifications_url": "https://api.github.com/repos/distri/touch-canvas/notifications{?since,all,participating}",
        "labels_url": "https://api.github.com/repos/distri/touch-canvas/labels{/name}",
        "releases_url": "https://api.github.com/repos/distri/touch-canvas/releases{/id}",
        "created_at": "2013-10-22T19:46:48Z",
        "updated_at": "2013-11-29T20:46:28Z",
        "pushed_at": "2013-11-29T20:46:28Z",
        "git_url": "git://github.com/distri/touch-canvas.git",
        "ssh_url": "git@github.com:distri/touch-canvas.git",
        "clone_url": "https://github.com/distri/touch-canvas.git",
        "svn_url": "https://github.com/distri/touch-canvas",
        "homepage": null,
        "size": 280,
        "stargazers_count": 0,
        "watchers_count": 0,
        "language": "CoffeeScript",
        "has_issues": true,
        "has_downloads": true,
        "has_wiki": true,
        "forks_count": 0,
        "mirror_url": null,
        "open_issues_count": 0,
        "forks": 0,
        "open_issues": 0,
        "watchers": 0,
        "default_branch": "master",
        "master_branch": "master",
        "permissions": {
          "admin": true,
          "push": true,
          "pull": true
        },
        "organization": {
          "login": "distri",
          "id": 6005125,
          "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
          "gravatar_id": null,
          "url": "https://api.github.com/users/distri",
          "html_url": "https://github.com/distri",
          "followers_url": "https://api.github.com/users/distri/followers",
          "following_url": "https://api.github.com/users/distri/following{/other_user}",
          "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
          "organizations_url": "https://api.github.com/users/distri/orgs",
          "repos_url": "https://api.github.com/users/distri/repos",
          "events_url": "https://api.github.com/users/distri/events{/privacy}",
          "received_events_url": "https://api.github.com/users/distri/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "network_count": 0,
        "subscribers_count": 1,
        "branch": "v0.3.1",
        "defaultBranch": "master"
      },
      "dependencies": {
        "bindable": {
          "source": {
            "LICENSE": {
              "path": "LICENSE",
              "mode": "100644",
              "content": "The MIT License (MIT)\n\nCopyright (c) 2014 distri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
              "type": "blob"
            },
            "README.coffee.md": {
              "path": "README.coffee.md",
              "mode": "100644",
              "content": "Bindable\n========\n\n    Core = require \"core\"\n\nAdd event binding to objects.\n\n>     bindable = Bindable()\n>     bindable.on \"greet\", ->\n>       console.log \"yo!\"\n>     bindable.trigger \"greet\"\n>     #=> \"yo!\" is printed to log\n\nUse as a mixin.\n\n>    self.include Bindable\n\n    module.exports = (I={}, self=Core(I)) ->\n      eventCallbacks = {}\n\n      self.extend\n\nAdds a function as an event listener.\n\nThis will call `coolEventHandler` after `yourObject.trigger \"someCustomEvent\"`\nis called.\n\n>     yourObject.on \"someCustomEvent\", coolEventHandler\n\nHandlers can be attached to namespaces as well. The namespaces are only used\nfor finer control of targeting event removal. For example if you are making a\ncustom drawing system you could unbind `\".Drawable\"` events and add your own.\n\n>     yourObject.on \"\"\n\n        on: (namespacedEvent, callback) ->\n          [event, namespace] = namespacedEvent.split(\".\")\n\n          # HACK: Here we annotate the callback function with namespace metadata\n          # This will probably lead to some strange edge cases, but should work fine\n          # for simple cases.\n          if namespace\n            callback.__PIXIE ||= {}\n            callback.__PIXIE[namespace] = true\n\n          eventCallbacks[event] ||= []\n          eventCallbacks[event].push(callback)\n\n          return self\n\nRemoves a specific event listener, or all event listeners if\nno specific listener is given.\n\nRemoves the handler coolEventHandler from the event `\"someCustomEvent\"` while\nleaving the other events intact.\n\n>     yourObject.off \"someCustomEvent\", coolEventHandler\n\nRemoves all handlers attached to `\"anotherCustomEvent\"`\n\n>     yourObject.off \"anotherCustomEvent\"\n\nRemove all handlers from the `\".Drawable\" namespace`\n\n>     yourObject.off \".Drawable\"\n\n        off: (namespacedEvent, callback) ->\n          [event, namespace] = namespacedEvent.split(\".\")\n\n          if event\n            eventCallbacks[event] ||= []\n\n            if namespace\n              # Select only the callbacks that do not have this namespace metadata\n              eventCallbacks[event] = eventCallbacks.filter (callback) ->\n                !callback.__PIXIE?[namespace]?\n\n            else\n              if callback\n                remove eventCallbacks[event], callback\n              else\n                eventCallbacks[event] = []\n          else if namespace\n            # No event given\n            # Select only the callbacks that do not have this namespace metadata\n            # for any events bound\n            for key, callbacks of eventCallbacks\n              eventCallbacks[key] = callbacks.filter (callback) ->\n                !callback.__PIXIE?[namespace]?\n\n          return self\n\nCalls all listeners attached to the specified event.\n\n>     # calls each event handler bound to \"someCustomEvent\"\n>     yourObject.trigger \"someCustomEvent\"\n\nAdditional parameters can be passed to the handlers.\n\n>     yourObject.trigger \"someEvent\", \"hello\", \"anotherParameter\"\n\n        trigger: (event, parameters...) ->\n          callbacks = eventCallbacks[event]\n\n          if callbacks\n            callbacks.forEach (callback) ->\n              callback.apply(self, parameters)\n\n          return self\n\nLegacy method aliases.\n\n      self.extend\n        bind: self.on\n        unbind: self.off\n\nHelpers\n-------\n\nRemove a value from an array.\n\n    remove = (array, value) ->\n      index = array.indexOf(value)\n\n      if index >= 0\n        array.splice(index, 1)[0]\n",
              "type": "blob"
            },
            "pixie.cson": {
              "path": "pixie.cson",
              "mode": "100644",
              "content": "entryPoint: \"README\"\nversion: \"0.1.0\"\ndependencies:\n  core: \"distri/core:v0.6.0\"\n",
              "type": "blob"
            },
            "test/bindable.coffee": {
              "path": "test/bindable.coffee",
              "mode": "100644",
              "content": "test = it\nok = assert\nequal = assert.equal\n\nBindable = require \"../README\"\n\ndescribe \"Bindable\", ->\n\n  test \"#bind and #trigger\", ->\n    o = Bindable()\n\n    o.bind(\"test\", -> ok true)\n\n    o.trigger(\"test\")\n\n  test \"Multiple bindings\", ->\n    o = Bindable()\n\n    o.bind(\"test\", -> ok true)\n    o.bind(\"test\", -> ok true)\n\n    o.trigger(\"test\")\n\n  test \"#trigger arguments\", ->\n    o = Bindable()\n\n    param1 = \"the message\"\n    param2 = 3\n\n    o.bind \"test\", (p1, p2) ->\n      equal(p1, param1)\n      equal(p2, param2)\n\n    o.trigger \"test\", param1, param2\n\n  test \"#unbind\", ->\n    o = Bindable()\n\n    callback = ->\n      ok false\n\n    o.bind \"test\", callback\n    # Unbind specific event\n    o.unbind \"test\", callback\n    o.trigger \"test\"\n\n    o.bind \"test\", callback\n    # Unbind all events\n    o.unbind \"test\"\n    o.trigger \"test\"\n\n  test \"#trigger namespace\", ->\n    o = Bindable()\n    o.bind \"test.TestNamespace\", ->\n      ok true\n\n    o.trigger \"test\"\n\n    o.unbind \".TestNamespace\"\n    o.trigger \"test\"\n\n  test \"#unbind namespaced\", ->\n    o = Bindable()\n\n    o.bind \"test.TestNamespace\", ->\n      ok true\n\n    o.trigger \"test\"\n\n    o.unbind \".TestNamespace\", ->\n    o.trigger \"test\"\n",
              "type": "blob"
            }
          },
          "distribution": {
            "README": {
              "path": "README",
              "content": "(function() {\n  var Core, remove,\n    __slice = [].slice;\n\n  Core = require(\"core\");\n\n  module.exports = function(I, self) {\n    var eventCallbacks;\n    if (I == null) {\n      I = {};\n    }\n    if (self == null) {\n      self = Core(I);\n    }\n    eventCallbacks = {};\n    self.extend({\n      on: function(namespacedEvent, callback) {\n        var event, namespace, _ref;\n        _ref = namespacedEvent.split(\".\"), event = _ref[0], namespace = _ref[1];\n        if (namespace) {\n          callback.__PIXIE || (callback.__PIXIE = {});\n          callback.__PIXIE[namespace] = true;\n        }\n        eventCallbacks[event] || (eventCallbacks[event] = []);\n        eventCallbacks[event].push(callback);\n        return self;\n      },\n      off: function(namespacedEvent, callback) {\n        var callbacks, event, key, namespace, _ref;\n        _ref = namespacedEvent.split(\".\"), event = _ref[0], namespace = _ref[1];\n        if (event) {\n          eventCallbacks[event] || (eventCallbacks[event] = []);\n          if (namespace) {\n            eventCallbacks[event] = eventCallbacks.filter(function(callback) {\n              var _ref1;\n              return ((_ref1 = callback.__PIXIE) != null ? _ref1[namespace] : void 0) == null;\n            });\n          } else {\n            if (callback) {\n              remove(eventCallbacks[event], callback);\n            } else {\n              eventCallbacks[event] = [];\n            }\n          }\n        } else if (namespace) {\n          for (key in eventCallbacks) {\n            callbacks = eventCallbacks[key];\n            eventCallbacks[key] = callbacks.filter(function(callback) {\n              var _ref1;\n              return ((_ref1 = callback.__PIXIE) != null ? _ref1[namespace] : void 0) == null;\n            });\n          }\n        }\n        return self;\n      },\n      trigger: function() {\n        var callbacks, event, parameters;\n        event = arguments[0], parameters = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n        callbacks = eventCallbacks[event];\n        if (callbacks) {\n          callbacks.forEach(function(callback) {\n            return callback.apply(self, parameters);\n          });\n        }\n        return self;\n      }\n    });\n    return self.extend({\n      bind: self.on,\n      unbind: self.off\n    });\n  };\n\n  remove = function(array, value) {\n    var index;\n    index = array.indexOf(value);\n    if (index >= 0) {\n      return array.splice(index, 1)[0];\n    }\n  };\n\n}).call(this);\n\n//# sourceURL=README.coffee",
              "type": "blob"
            },
            "pixie": {
              "path": "pixie",
              "content": "module.exports = {\"entryPoint\":\"README\",\"version\":\"0.1.0\",\"dependencies\":{\"core\":\"distri/core:v0.6.0\"}};",
              "type": "blob"
            },
            "test/bindable": {
              "path": "test/bindable",
              "content": "(function() {\n  var Bindable, equal, ok, test;\n\n  test = it;\n\n  ok = assert;\n\n  equal = assert.equal;\n\n  Bindable = require(\"../README\");\n\n  describe(\"Bindable\", function() {\n    test(\"#bind and #trigger\", function() {\n      var o;\n      o = Bindable();\n      o.bind(\"test\", function() {\n        return ok(true);\n      });\n      return o.trigger(\"test\");\n    });\n    test(\"Multiple bindings\", function() {\n      var o;\n      o = Bindable();\n      o.bind(\"test\", function() {\n        return ok(true);\n      });\n      o.bind(\"test\", function() {\n        return ok(true);\n      });\n      return o.trigger(\"test\");\n    });\n    test(\"#trigger arguments\", function() {\n      var o, param1, param2;\n      o = Bindable();\n      param1 = \"the message\";\n      param2 = 3;\n      o.bind(\"test\", function(p1, p2) {\n        equal(p1, param1);\n        return equal(p2, param2);\n      });\n      return o.trigger(\"test\", param1, param2);\n    });\n    test(\"#unbind\", function() {\n      var callback, o;\n      o = Bindable();\n      callback = function() {\n        return ok(false);\n      };\n      o.bind(\"test\", callback);\n      o.unbind(\"test\", callback);\n      o.trigger(\"test\");\n      o.bind(\"test\", callback);\n      o.unbind(\"test\");\n      return o.trigger(\"test\");\n    });\n    test(\"#trigger namespace\", function() {\n      var o;\n      o = Bindable();\n      o.bind(\"test.TestNamespace\", function() {\n        return ok(true);\n      });\n      o.trigger(\"test\");\n      o.unbind(\".TestNamespace\");\n      return o.trigger(\"test\");\n    });\n    return test(\"#unbind namespaced\", function() {\n      var o;\n      o = Bindable();\n      o.bind(\"test.TestNamespace\", function() {\n        return ok(true);\n      });\n      o.trigger(\"test\");\n      o.unbind(\".TestNamespace\", function() {});\n      return o.trigger(\"test\");\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/bindable.coffee",
              "type": "blob"
            }
          },
          "progenitor": {
            "url": "http://strd6.github.io/editor/"
          },
          "version": "0.1.0",
          "entryPoint": "README",
          "repository": {
            "id": 17189431,
            "name": "bindable",
            "full_name": "distri/bindable",
            "owner": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/distri/bindable",
            "description": "Event binding",
            "fork": false,
            "url": "https://api.github.com/repos/distri/bindable",
            "forks_url": "https://api.github.com/repos/distri/bindable/forks",
            "keys_url": "https://api.github.com/repos/distri/bindable/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/distri/bindable/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/distri/bindable/teams",
            "hooks_url": "https://api.github.com/repos/distri/bindable/hooks",
            "issue_events_url": "https://api.github.com/repos/distri/bindable/issues/events{/number}",
            "events_url": "https://api.github.com/repos/distri/bindable/events",
            "assignees_url": "https://api.github.com/repos/distri/bindable/assignees{/user}",
            "branches_url": "https://api.github.com/repos/distri/bindable/branches{/branch}",
            "tags_url": "https://api.github.com/repos/distri/bindable/tags",
            "blobs_url": "https://api.github.com/repos/distri/bindable/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/distri/bindable/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/distri/bindable/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/distri/bindable/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/distri/bindable/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/distri/bindable/languages",
            "stargazers_url": "https://api.github.com/repos/distri/bindable/stargazers",
            "contributors_url": "https://api.github.com/repos/distri/bindable/contributors",
            "subscribers_url": "https://api.github.com/repos/distri/bindable/subscribers",
            "subscription_url": "https://api.github.com/repos/distri/bindable/subscription",
            "commits_url": "https://api.github.com/repos/distri/bindable/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/distri/bindable/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/distri/bindable/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/distri/bindable/issues/comments/{number}",
            "contents_url": "https://api.github.com/repos/distri/bindable/contents/{+path}",
            "compare_url": "https://api.github.com/repos/distri/bindable/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/distri/bindable/merges",
            "archive_url": "https://api.github.com/repos/distri/bindable/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/distri/bindable/downloads",
            "issues_url": "https://api.github.com/repos/distri/bindable/issues{/number}",
            "pulls_url": "https://api.github.com/repos/distri/bindable/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/distri/bindable/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/distri/bindable/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/distri/bindable/labels{/name}",
            "releases_url": "https://api.github.com/repos/distri/bindable/releases{/id}",
            "created_at": "2014-02-25T21:50:35Z",
            "updated_at": "2014-02-25T21:50:35Z",
            "pushed_at": "2014-02-25T21:50:35Z",
            "git_url": "git://github.com/distri/bindable.git",
            "ssh_url": "git@github.com:distri/bindable.git",
            "clone_url": "https://github.com/distri/bindable.git",
            "svn_url": "https://github.com/distri/bindable",
            "homepage": null,
            "size": 0,
            "stargazers_count": 0,
            "watchers_count": 0,
            "language": null,
            "has_issues": true,
            "has_downloads": true,
            "has_wiki": true,
            "forks_count": 0,
            "mirror_url": null,
            "open_issues_count": 0,
            "forks": 0,
            "open_issues": 0,
            "watchers": 0,
            "default_branch": "master",
            "master_branch": "master",
            "permissions": {
              "admin": true,
              "push": true,
              "pull": true
            },
            "organization": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "network_count": 0,
            "subscribers_count": 2,
            "branch": "v0.1.0",
            "defaultBranch": "master"
          },
          "dependencies": {
            "core": {
              "source": {
                "LICENSE": {
                  "path": "LICENSE",
                  "mode": "100644",
                  "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
                  "type": "blob"
                },
                "README.md": {
                  "path": "README.md",
                  "mode": "100644",
                  "content": "core\n====\n\nAn object extension system.\n",
                  "type": "blob"
                },
                "core.coffee.md": {
                  "path": "core.coffee.md",
                  "mode": "100644",
                  "content": "Core\n====\n\nThe Core module is used to add extended functionality to objects without\nextending `Object.prototype` directly.\n\n    Core = (I={}, self={}) ->\n      extend self,\n\nExternal access to instance variables. Use of this property should be avoided\nin general, but can come in handy from time to time.\n\n>     #! example\n>     I =\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject = Core(I)\n>\n>     [myObject.I.r, myObject.I.g, myObject.I.b]\n\n        I: I\n\nGenerates a public jQuery style getter / setter method for each `String` argument.\n\n>     #! example\n>     myObject = Core\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject.attrAccessor \"r\", \"g\", \"b\"\n>\n>     myObject.r(254)\n\n        attrAccessor: (attrNames...) ->\n          attrNames.forEach (attrName) ->\n            self[attrName] = (newValue) ->\n              if arguments.length > 0\n                I[attrName] = newValue\n\n                return self\n              else\n                I[attrName]\n\n          return self\n\nGenerates a public jQuery style getter method for each String argument.\n\n>     #! example\n>     myObject = Core\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject.attrReader \"r\", \"g\", \"b\"\n>\n>     [myObject.r(), myObject.g(), myObject.b()]\n\n        attrReader: (attrNames...) ->\n          attrNames.forEach (attrName) ->\n            self[attrName] = ->\n              I[attrName]\n\n          return self\n\nExtends this object with methods from the passed in object. A shortcut for Object.extend(self, methods)\n\n>     I =\n>       x: 30\n>       y: 40\n>       maxSpeed: 5\n>\n>     # we are using extend to give player\n>     # additional methods that Core doesn't have\n>     player = Core(I).extend\n>       increaseSpeed: ->\n>         I.maxSpeed += 1\n>\n>     player.increaseSpeed()\n\n        extend: (objects...) ->\n          extend self, objects...\n\nIncludes a module in this object. A module is a constructor that takes two parameters, `I` and `self`\n\n>     myObject = Core()\n>     myObject.include(Bindable)\n\n>     # now you can bind handlers to functions\n>     myObject.bind \"someEvent\", ->\n>       alert(\"wow. that was easy.\")\n\n        include: (modules...) ->\n          for Module in modules\n            Module(I, self)\n\n          return self\n\n      return self\n\nHelpers\n-------\n\nExtend an object with the properties of other objects.\n\n    extend = (target, sources...) ->\n      for source in sources\n        for name of source\n          target[name] = source[name]\n\n      return target\n\nExport\n\n    module.exports = Core\n",
                  "type": "blob"
                },
                "pixie.cson": {
                  "path": "pixie.cson",
                  "mode": "100644",
                  "content": "entryPoint: \"core\"\nversion: \"0.6.0\"\n",
                  "type": "blob"
                },
                "test/core.coffee": {
                  "path": "test/core.coffee",
                  "mode": "100644",
                  "content": "Core = require \"../core\"\n\nok = assert\nequals = assert.equal\ntest = it\n\ndescribe \"Core\", ->\n\n  test \"#extend\", ->\n    o = Core()\n  \n    o.extend\n      test: \"jawsome\"\n  \n    equals o.test, \"jawsome\"\n  \n  test \"#attrAccessor\", ->\n    o = Core\n      test: \"my_val\"\n  \n    o.attrAccessor(\"test\")\n  \n    equals o.test(), \"my_val\"\n    equals o.test(\"new_val\"), o\n    equals o.test(), \"new_val\"\n  \n  test \"#attrReader\", ->\n    o = Core\n      test: \"my_val\"\n  \n    o.attrReader(\"test\")\n  \n    equals o.test(), \"my_val\"\n    equals o.test(\"new_val\"), \"my_val\"\n    equals o.test(), \"my_val\"\n  \n  test \"#include\", ->\n    o = Core\n      test: \"my_val\"\n  \n    M = (I, self) ->\n      self.attrReader \"test\"\n  \n      self.extend\n        test2: \"cool\"\n  \n    ret = o.include M\n  \n    equals ret, o, \"Should return self\"\n  \n    equals o.test(), \"my_val\"\n    equals o.test2, \"cool\"\n  \n  test \"#include multiple\", ->\n    o = Core\n      test: \"my_val\"\n  \n    M = (I, self) ->\n      self.attrReader \"test\"\n  \n      self.extend\n        test2: \"cool\"\n  \n    M2 = (I, self) ->\n      self.extend\n        test2: \"coolio\"\n  \n    o.include M, M2\n  \n    equals o.test2, \"coolio\"\n",
                  "type": "blob"
                }
              },
              "distribution": {
                "core": {
                  "path": "core",
                  "content": "(function() {\n  var Core, extend,\n    __slice = [].slice;\n\n  Core = function(I, self) {\n    if (I == null) {\n      I = {};\n    }\n    if (self == null) {\n      self = {};\n    }\n    extend(self, {\n      I: I,\n      attrAccessor: function() {\n        var attrNames;\n        attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        attrNames.forEach(function(attrName) {\n          return self[attrName] = function(newValue) {\n            if (arguments.length > 0) {\n              I[attrName] = newValue;\n              return self;\n            } else {\n              return I[attrName];\n            }\n          };\n        });\n        return self;\n      },\n      attrReader: function() {\n        var attrNames;\n        attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        attrNames.forEach(function(attrName) {\n          return self[attrName] = function() {\n            return I[attrName];\n          };\n        });\n        return self;\n      },\n      extend: function() {\n        var objects;\n        objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return extend.apply(null, [self].concat(__slice.call(objects)));\n      },\n      include: function() {\n        var Module, modules, _i, _len;\n        modules = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        for (_i = 0, _len = modules.length; _i < _len; _i++) {\n          Module = modules[_i];\n          Module(I, self);\n        }\n        return self;\n      }\n    });\n    return self;\n  };\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  module.exports = Core;\n\n}).call(this);\n\n//# sourceURL=core.coffee",
                  "type": "blob"
                },
                "pixie": {
                  "path": "pixie",
                  "content": "module.exports = {\"entryPoint\":\"core\",\"version\":\"0.6.0\"};",
                  "type": "blob"
                },
                "test/core": {
                  "path": "test/core",
                  "content": "(function() {\n  var Core, equals, ok, test;\n\n  Core = require(\"../core\");\n\n  ok = assert;\n\n  equals = assert.equal;\n\n  test = it;\n\n  describe(\"Core\", function() {\n    test(\"#extend\", function() {\n      var o;\n      o = Core();\n      o.extend({\n        test: \"jawsome\"\n      });\n      return equals(o.test, \"jawsome\");\n    });\n    test(\"#attrAccessor\", function() {\n      var o;\n      o = Core({\n        test: \"my_val\"\n      });\n      o.attrAccessor(\"test\");\n      equals(o.test(), \"my_val\");\n      equals(o.test(\"new_val\"), o);\n      return equals(o.test(), \"new_val\");\n    });\n    test(\"#attrReader\", function() {\n      var o;\n      o = Core({\n        test: \"my_val\"\n      });\n      o.attrReader(\"test\");\n      equals(o.test(), \"my_val\");\n      equals(o.test(\"new_val\"), \"my_val\");\n      return equals(o.test(), \"my_val\");\n    });\n    test(\"#include\", function() {\n      var M, o, ret;\n      o = Core({\n        test: \"my_val\"\n      });\n      M = function(I, self) {\n        self.attrReader(\"test\");\n        return self.extend({\n          test2: \"cool\"\n        });\n      };\n      ret = o.include(M);\n      equals(ret, o, \"Should return self\");\n      equals(o.test(), \"my_val\");\n      return equals(o.test2, \"cool\");\n    });\n    return test(\"#include multiple\", function() {\n      var M, M2, o;\n      o = Core({\n        test: \"my_val\"\n      });\n      M = function(I, self) {\n        self.attrReader(\"test\");\n        return self.extend({\n          test2: \"cool\"\n        });\n      };\n      M2 = function(I, self) {\n        return self.extend({\n          test2: \"coolio\"\n        });\n      };\n      o.include(M, M2);\n      return equals(o.test2, \"coolio\");\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/core.coffee",
                  "type": "blob"
                }
              },
              "progenitor": {
                "url": "http://strd6.github.io/editor/"
              },
              "version": "0.6.0",
              "entryPoint": "core",
              "repository": {
                "id": 13567517,
                "name": "core",
                "full_name": "distri/core",
                "owner": {
                  "login": "distri",
                  "id": 6005125,
                  "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
                  "gravatar_id": null,
                  "url": "https://api.github.com/users/distri",
                  "html_url": "https://github.com/distri",
                  "followers_url": "https://api.github.com/users/distri/followers",
                  "following_url": "https://api.github.com/users/distri/following{/other_user}",
                  "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
                  "organizations_url": "https://api.github.com/users/distri/orgs",
                  "repos_url": "https://api.github.com/users/distri/repos",
                  "events_url": "https://api.github.com/users/distri/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/distri/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "private": false,
                "html_url": "https://github.com/distri/core",
                "description": "An object extension system.",
                "fork": false,
                "url": "https://api.github.com/repos/distri/core",
                "forks_url": "https://api.github.com/repos/distri/core/forks",
                "keys_url": "https://api.github.com/repos/distri/core/keys{/key_id}",
                "collaborators_url": "https://api.github.com/repos/distri/core/collaborators{/collaborator}",
                "teams_url": "https://api.github.com/repos/distri/core/teams",
                "hooks_url": "https://api.github.com/repos/distri/core/hooks",
                "issue_events_url": "https://api.github.com/repos/distri/core/issues/events{/number}",
                "events_url": "https://api.github.com/repos/distri/core/events",
                "assignees_url": "https://api.github.com/repos/distri/core/assignees{/user}",
                "branches_url": "https://api.github.com/repos/distri/core/branches{/branch}",
                "tags_url": "https://api.github.com/repos/distri/core/tags",
                "blobs_url": "https://api.github.com/repos/distri/core/git/blobs{/sha}",
                "git_tags_url": "https://api.github.com/repos/distri/core/git/tags{/sha}",
                "git_refs_url": "https://api.github.com/repos/distri/core/git/refs{/sha}",
                "trees_url": "https://api.github.com/repos/distri/core/git/trees{/sha}",
                "statuses_url": "https://api.github.com/repos/distri/core/statuses/{sha}",
                "languages_url": "https://api.github.com/repos/distri/core/languages",
                "stargazers_url": "https://api.github.com/repos/distri/core/stargazers",
                "contributors_url": "https://api.github.com/repos/distri/core/contributors",
                "subscribers_url": "https://api.github.com/repos/distri/core/subscribers",
                "subscription_url": "https://api.github.com/repos/distri/core/subscription",
                "commits_url": "https://api.github.com/repos/distri/core/commits{/sha}",
                "git_commits_url": "https://api.github.com/repos/distri/core/git/commits{/sha}",
                "comments_url": "https://api.github.com/repos/distri/core/comments{/number}",
                "issue_comment_url": "https://api.github.com/repos/distri/core/issues/comments/{number}",
                "contents_url": "https://api.github.com/repos/distri/core/contents/{+path}",
                "compare_url": "https://api.github.com/repos/distri/core/compare/{base}...{head}",
                "merges_url": "https://api.github.com/repos/distri/core/merges",
                "archive_url": "https://api.github.com/repos/distri/core/{archive_format}{/ref}",
                "downloads_url": "https://api.github.com/repos/distri/core/downloads",
                "issues_url": "https://api.github.com/repos/distri/core/issues{/number}",
                "pulls_url": "https://api.github.com/repos/distri/core/pulls{/number}",
                "milestones_url": "https://api.github.com/repos/distri/core/milestones{/number}",
                "notifications_url": "https://api.github.com/repos/distri/core/notifications{?since,all,participating}",
                "labels_url": "https://api.github.com/repos/distri/core/labels{/name}",
                "releases_url": "https://api.github.com/repos/distri/core/releases{/id}",
                "created_at": "2013-10-14T17:04:33Z",
                "updated_at": "2013-12-24T00:49:21Z",
                "pushed_at": "2013-10-14T23:49:11Z",
                "git_url": "git://github.com/distri/core.git",
                "ssh_url": "git@github.com:distri/core.git",
                "clone_url": "https://github.com/distri/core.git",
                "svn_url": "https://github.com/distri/core",
                "homepage": null,
                "size": 592,
                "stargazers_count": 0,
                "watchers_count": 0,
                "language": "CoffeeScript",
                "has_issues": true,
                "has_downloads": true,
                "has_wiki": true,
                "forks_count": 0,
                "mirror_url": null,
                "open_issues_count": 0,
                "forks": 0,
                "open_issues": 0,
                "watchers": 0,
                "default_branch": "master",
                "master_branch": "master",
                "permissions": {
                  "admin": true,
                  "push": true,
                  "pull": true
                },
                "organization": {
                  "login": "distri",
                  "id": 6005125,
                  "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
                  "gravatar_id": null,
                  "url": "https://api.github.com/users/distri",
                  "html_url": "https://github.com/distri",
                  "followers_url": "https://api.github.com/users/distri/followers",
                  "following_url": "https://api.github.com/users/distri/following{/other_user}",
                  "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
                  "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
                  "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
                  "organizations_url": "https://api.github.com/users/distri/orgs",
                  "repos_url": "https://api.github.com/users/distri/repos",
                  "events_url": "https://api.github.com/users/distri/events{/privacy}",
                  "received_events_url": "https://api.github.com/users/distri/received_events",
                  "type": "Organization",
                  "site_admin": false
                },
                "network_count": 0,
                "subscribers_count": 1,
                "branch": "v0.6.0",
                "defaultBranch": "master"
              },
              "dependencies": {}
            }
          }
        },
        "core": {
          "source": {
            "LICENSE": {
              "path": "LICENSE",
              "mode": "100644",
              "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Daniel X Moore\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
              "type": "blob"
            },
            "README.md": {
              "path": "README.md",
              "mode": "100644",
              "content": "core\n====\n\nAn object extension system.\n",
              "type": "blob"
            },
            "core.coffee.md": {
              "path": "core.coffee.md",
              "mode": "100644",
              "content": "Core\n====\n\nThe Core module is used to add extended functionality to objects without\nextending `Object.prototype` directly.\n\n    Core = (I={}, self={}) ->\n      extend self,\n\nExternal access to instance variables. Use of this property should be avoided\nin general, but can come in handy from time to time.\n\n>     #! example\n>     I =\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject = Core(I)\n>\n>     [myObject.I.r, myObject.I.g, myObject.I.b]\n\n        I: I\n\nGenerates a public jQuery style getter / setter method for each `String` argument.\n\n>     #! example\n>     myObject = Core\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject.attrAccessor \"r\", \"g\", \"b\"\n>\n>     myObject.r(254)\n\n        attrAccessor: (attrNames...) ->\n          attrNames.forEach (attrName) ->\n            self[attrName] = (newValue) ->\n              if arguments.length > 0\n                I[attrName] = newValue\n\n                return self\n              else\n                I[attrName]\n\n          return self\n\nGenerates a public jQuery style getter method for each String argument.\n\n>     #! example\n>     myObject = Core\n>       r: 255\n>       g: 0\n>       b: 100\n>\n>     myObject.attrReader \"r\", \"g\", \"b\"\n>\n>     [myObject.r(), myObject.g(), myObject.b()]\n\n        attrReader: (attrNames...) ->\n          attrNames.forEach (attrName) ->\n            self[attrName] = ->\n              I[attrName]\n\n          return self\n\nExtends this object with methods from the passed in object. A shortcut for Object.extend(self, methods)\n\n>     I =\n>       x: 30\n>       y: 40\n>       maxSpeed: 5\n>\n>     # we are using extend to give player\n>     # additional methods that Core doesn't have\n>     player = Core(I).extend\n>       increaseSpeed: ->\n>         I.maxSpeed += 1\n>\n>     player.increaseSpeed()\n\n        extend: (objects...) ->\n          extend self, objects...\n\nIncludes a module in this object. A module is a constructor that takes two parameters, `I` and `self`\n\n>     myObject = Core()\n>     myObject.include(Bindable)\n\n>     # now you can bind handlers to functions\n>     myObject.bind \"someEvent\", ->\n>       alert(\"wow. that was easy.\")\n\n        include: (modules...) ->\n          for Module in modules\n            Module(I, self)\n\n          return self\n\n      return self\n\nHelpers\n-------\n\nExtend an object with the properties of other objects.\n\n    extend = (target, sources...) ->\n      for source in sources\n        for name of source\n          target[name] = source[name]\n\n      return target\n\nExport\n\n    module.exports = Core\n",
              "type": "blob"
            },
            "pixie.cson": {
              "path": "pixie.cson",
              "mode": "100644",
              "content": "entryPoint: \"core\"\nversion: \"0.6.0\"\n",
              "type": "blob"
            },
            "test/core.coffee": {
              "path": "test/core.coffee",
              "mode": "100644",
              "content": "Core = require \"../core\"\n\nok = assert\nequals = assert.equal\ntest = it\n\ndescribe \"Core\", ->\n\n  test \"#extend\", ->\n    o = Core()\n  \n    o.extend\n      test: \"jawsome\"\n  \n    equals o.test, \"jawsome\"\n  \n  test \"#attrAccessor\", ->\n    o = Core\n      test: \"my_val\"\n  \n    o.attrAccessor(\"test\")\n  \n    equals o.test(), \"my_val\"\n    equals o.test(\"new_val\"), o\n    equals o.test(), \"new_val\"\n  \n  test \"#attrReader\", ->\n    o = Core\n      test: \"my_val\"\n  \n    o.attrReader(\"test\")\n  \n    equals o.test(), \"my_val\"\n    equals o.test(\"new_val\"), \"my_val\"\n    equals o.test(), \"my_val\"\n  \n  test \"#include\", ->\n    o = Core\n      test: \"my_val\"\n  \n    M = (I, self) ->\n      self.attrReader \"test\"\n  \n      self.extend\n        test2: \"cool\"\n  \n    ret = o.include M\n  \n    equals ret, o, \"Should return self\"\n  \n    equals o.test(), \"my_val\"\n    equals o.test2, \"cool\"\n  \n  test \"#include multiple\", ->\n    o = Core\n      test: \"my_val\"\n  \n    M = (I, self) ->\n      self.attrReader \"test\"\n  \n      self.extend\n        test2: \"cool\"\n  \n    M2 = (I, self) ->\n      self.extend\n        test2: \"coolio\"\n  \n    o.include M, M2\n  \n    equals o.test2, \"coolio\"\n",
              "type": "blob"
            }
          },
          "distribution": {
            "core": {
              "path": "core",
              "content": "(function() {\n  var Core, extend,\n    __slice = [].slice;\n\n  Core = function(I, self) {\n    if (I == null) {\n      I = {};\n    }\n    if (self == null) {\n      self = {};\n    }\n    extend(self, {\n      I: I,\n      attrAccessor: function() {\n        var attrNames;\n        attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        attrNames.forEach(function(attrName) {\n          return self[attrName] = function(newValue) {\n            if (arguments.length > 0) {\n              I[attrName] = newValue;\n              return self;\n            } else {\n              return I[attrName];\n            }\n          };\n        });\n        return self;\n      },\n      attrReader: function() {\n        var attrNames;\n        attrNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        attrNames.forEach(function(attrName) {\n          return self[attrName] = function() {\n            return I[attrName];\n          };\n        });\n        return self;\n      },\n      extend: function() {\n        var objects;\n        objects = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        return extend.apply(null, [self].concat(__slice.call(objects)));\n      },\n      include: function() {\n        var Module, modules, _i, _len;\n        modules = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        for (_i = 0, _len = modules.length; _i < _len; _i++) {\n          Module = modules[_i];\n          Module(I, self);\n        }\n        return self;\n      }\n    });\n    return self;\n  };\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  module.exports = Core;\n\n}).call(this);\n\n//# sourceURL=core.coffee",
              "type": "blob"
            },
            "pixie": {
              "path": "pixie",
              "content": "module.exports = {\"entryPoint\":\"core\",\"version\":\"0.6.0\"};",
              "type": "blob"
            },
            "test/core": {
              "path": "test/core",
              "content": "(function() {\n  var Core, equals, ok, test;\n\n  Core = require(\"../core\");\n\n  ok = assert;\n\n  equals = assert.equal;\n\n  test = it;\n\n  describe(\"Core\", function() {\n    test(\"#extend\", function() {\n      var o;\n      o = Core();\n      o.extend({\n        test: \"jawsome\"\n      });\n      return equals(o.test, \"jawsome\");\n    });\n    test(\"#attrAccessor\", function() {\n      var o;\n      o = Core({\n        test: \"my_val\"\n      });\n      o.attrAccessor(\"test\");\n      equals(o.test(), \"my_val\");\n      equals(o.test(\"new_val\"), o);\n      return equals(o.test(), \"new_val\");\n    });\n    test(\"#attrReader\", function() {\n      var o;\n      o = Core({\n        test: \"my_val\"\n      });\n      o.attrReader(\"test\");\n      equals(o.test(), \"my_val\");\n      equals(o.test(\"new_val\"), \"my_val\");\n      return equals(o.test(), \"my_val\");\n    });\n    test(\"#include\", function() {\n      var M, o, ret;\n      o = Core({\n        test: \"my_val\"\n      });\n      M = function(I, self) {\n        self.attrReader(\"test\");\n        return self.extend({\n          test2: \"cool\"\n        });\n      };\n      ret = o.include(M);\n      equals(ret, o, \"Should return self\");\n      equals(o.test(), \"my_val\");\n      return equals(o.test2, \"cool\");\n    });\n    return test(\"#include multiple\", function() {\n      var M, M2, o;\n      o = Core({\n        test: \"my_val\"\n      });\n      M = function(I, self) {\n        self.attrReader(\"test\");\n        return self.extend({\n          test2: \"cool\"\n        });\n      };\n      M2 = function(I, self) {\n        return self.extend({\n          test2: \"coolio\"\n        });\n      };\n      o.include(M, M2);\n      return equals(o.test2, \"coolio\");\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/core.coffee",
              "type": "blob"
            }
          },
          "progenitor": {
            "url": "http://strd6.github.io/editor/"
          },
          "version": "0.6.0",
          "entryPoint": "core",
          "repository": {
            "id": 13567517,
            "name": "core",
            "full_name": "distri/core",
            "owner": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/distri/core",
            "description": "An object extension system.",
            "fork": false,
            "url": "https://api.github.com/repos/distri/core",
            "forks_url": "https://api.github.com/repos/distri/core/forks",
            "keys_url": "https://api.github.com/repos/distri/core/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/distri/core/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/distri/core/teams",
            "hooks_url": "https://api.github.com/repos/distri/core/hooks",
            "issue_events_url": "https://api.github.com/repos/distri/core/issues/events{/number}",
            "events_url": "https://api.github.com/repos/distri/core/events",
            "assignees_url": "https://api.github.com/repos/distri/core/assignees{/user}",
            "branches_url": "https://api.github.com/repos/distri/core/branches{/branch}",
            "tags_url": "https://api.github.com/repos/distri/core/tags",
            "blobs_url": "https://api.github.com/repos/distri/core/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/distri/core/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/distri/core/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/distri/core/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/distri/core/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/distri/core/languages",
            "stargazers_url": "https://api.github.com/repos/distri/core/stargazers",
            "contributors_url": "https://api.github.com/repos/distri/core/contributors",
            "subscribers_url": "https://api.github.com/repos/distri/core/subscribers",
            "subscription_url": "https://api.github.com/repos/distri/core/subscription",
            "commits_url": "https://api.github.com/repos/distri/core/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/distri/core/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/distri/core/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/distri/core/issues/comments/{number}",
            "contents_url": "https://api.github.com/repos/distri/core/contents/{+path}",
            "compare_url": "https://api.github.com/repos/distri/core/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/distri/core/merges",
            "archive_url": "https://api.github.com/repos/distri/core/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/distri/core/downloads",
            "issues_url": "https://api.github.com/repos/distri/core/issues{/number}",
            "pulls_url": "https://api.github.com/repos/distri/core/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/distri/core/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/distri/core/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/distri/core/labels{/name}",
            "releases_url": "https://api.github.com/repos/distri/core/releases{/id}",
            "created_at": "2013-10-14T17:04:33Z",
            "updated_at": "2013-12-24T00:49:21Z",
            "pushed_at": "2013-10-14T23:49:11Z",
            "git_url": "git://github.com/distri/core.git",
            "ssh_url": "git@github.com:distri/core.git",
            "clone_url": "https://github.com/distri/core.git",
            "svn_url": "https://github.com/distri/core",
            "homepage": null,
            "size": 592,
            "stargazers_count": 0,
            "watchers_count": 0,
            "language": "CoffeeScript",
            "has_issues": true,
            "has_downloads": true,
            "has_wiki": true,
            "forks_count": 0,
            "mirror_url": null,
            "open_issues_count": 0,
            "forks": 0,
            "open_issues": 0,
            "watchers": 0,
            "default_branch": "master",
            "master_branch": "master",
            "permissions": {
              "admin": true,
              "push": true,
              "pull": true
            },
            "organization": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "network_count": 0,
            "subscribers_count": 1,
            "branch": "v0.6.0",
            "defaultBranch": "master"
          },
          "dependencies": {}
        },
        "pixie-canvas": {
          "source": {
            "pixie.cson": {
              "path": "pixie.cson",
              "mode": "100644",
              "content": "entryPoint: \"pixie_canvas\"\nversion: \"0.9.2\"\n",
              "type": "blob"
            },
            "pixie_canvas.coffee.md": {
              "path": "pixie_canvas.coffee.md",
              "mode": "100644",
              "content": "Pixie Canvas\n============\n\nPixieCanvas provides a convenient wrapper for working with Context2d.\n\nMethods try to be as flexible as possible as to what arguments they take.\n\nNon-getter methods return `this` for method chaining.\n\n    TAU = 2 * Math.PI\n\n    module.exports = (options={}) ->\n        defaults options,\n          width: 400\n          height: 400\n          init: ->\n\n        canvas = document.createElement \"canvas\"\n        canvas.width = options.width\n        canvas.height = options.height\n\n        context = undefined\n\n        self =\n\n`clear` clears the entire canvas (or a portion of it).\n\nTo clear the entire canvas use `canvas.clear()`\n\n>     #! paint\n>     # Set up: Fill canvas with blue\n>     canvas.fill(\"blue\")\n>\n>     # Clear a portion of the canvas\n>     canvas.clear\n>       x: 50\n>       y: 50\n>       width: 50\n>       height: 50\n\n          clear: ({x, y, width, height}={}) ->\n            x ?= 0\n            y ?= 0\n            width = canvas.width unless width?\n            height = canvas.height unless height?\n\n            context.clearRect(x, y, width, height)\n\n            return this\n\nFills the entire canvas (or a specified section of it) with\nthe given color.\n\n>     #! paint\n>     # Paint the town (entire canvas) red\n>     canvas.fill \"red\"\n>\n>     # Fill a section of the canvas white (#FFF)\n>     canvas.fill\n>       x: 50\n>       y: 50\n>       width: 50\n>       height: 50\n>       color: \"#FFF\"\n\n          fill: (color={}) ->\n            unless (typeof color is \"string\") or color.channels\n              {x, y, width, height, bounds, color} = color\n\n            {x, y, width, height} = bounds if bounds\n\n            x ||= 0\n            y ||= 0\n            width = canvas.width unless width?\n            height = canvas.height unless height?\n\n            @fillColor(color)\n            context.fillRect(x, y, width, height)\n\n            return this\n\nA direct map to the Context2d draw image. `GameObject`s\nthat implement drawable will have this wrapped up nicely,\nso there is a good chance that you will not have to deal with\nit directly.\n\n>     #! paint\n>     $ \"<img>\",\n>       src: \"https://secure.gravatar.com/avatar/33117162fff8a9cf50544a604f60c045\"\n>       load: ->\n>         canvas.drawImage(this, 25, 25)\n\n          drawImage: (args...) ->\n            context.drawImage(args...)\n\n            return this\n\nDraws a circle at the specified position with the specified\nradius and color.\n\n>     #! paint\n>     # Draw a large orange circle\n>     canvas.drawCircle\n>       radius: 30\n>       position: Point(100, 75)\n>       color: \"orange\"\n>\n>     # You may also set a stroke\n>     canvas.drawCircle\n>       x: 25\n>       y: 50\n>       radius: 10\n>       color: \"blue\"\n>       stroke:\n>         color: \"red\"\n>         width: 1\n\nYou can pass in circle objects as well.\n\n>     #! paint\n>     # Create a circle object to set up the next examples\n>     circle =\n>       radius: 20\n>       x: 50\n>       y: 50\n>\n>     # Draw a given circle in yellow\n>     canvas.drawCircle\n>       circle: circle\n>       color: \"yellow\"\n>\n>     # Draw the circle in green at a different position\n>     canvas.drawCircle\n>       circle: circle\n>       position: Point(25, 75)\n>       color: \"green\"\n\nYou may set a stroke, or even pass in only a stroke to draw an unfilled circle.\n\n>     #! paint\n>     # Draw an outline circle in purple.\n>     canvas.drawCircle\n>       x: 50\n>       y: 75\n>       radius: 10\n>       stroke:\n>         color: \"purple\"\n>         width: 2\n>\n\n          drawCircle: ({x, y, radius, position, color, stroke, circle}) ->\n            {x, y, radius} = circle if circle\n            {x, y} = position if position\n\n            radius = 0 if radius < 0\n\n            context.beginPath()\n            context.arc(x, y, radius, 0, TAU, true)\n            context.closePath()\n\n            if color\n              @fillColor(color)\n              context.fill()\n\n            if stroke\n              @strokeColor(stroke.color)\n              @lineWidth(stroke.width)\n              context.stroke()\n\n            return this\n\nDraws a rectangle at the specified position with given\nwidth and height. Optionally takes a position, bounds\nand color argument.\n\n\n          drawRect: ({x, y, width, height, position, bounds, color, stroke}) ->\n            {x, y, width, height} = bounds if bounds\n            {x, y} = position if position\n\n            if color\n              @fillColor(color)\n              context.fillRect(x, y, width, height)\n\n            if stroke\n              @strokeColor(stroke.color)\n              @lineWidth(stroke.width)\n              context.strokeRect(x, y, width, height)\n\n            return @\n\n>     #! paint\n>     # Draw a red rectangle using x, y, width and height\n>     canvas.drawRect\n>       x: 50\n>       y: 50\n>       width: 50\n>       height: 50\n>       color: \"#F00\"\n\n----\n\nYou can mix and match position, witdth and height.\n\n>     #! paint\n>     canvas.drawRect\n>       position: Point(0, 0)\n>       width: 50\n>       height: 50\n>       color: \"blue\"\n>       stroke:\n>         color: \"orange\"\n>         width: 3\n\n----\n\nA bounds can be reused to draw multiple rectangles.\n\n>     #! paint\n>     bounds =\n>       x: 100\n>       y: 0\n>       width: 100\n>       height: 100\n>\n>     # Draw a purple rectangle using bounds\n>     canvas.drawRect\n>       bounds: bounds\n>       color: \"green\"\n>\n>     # Draw the outline of the same bounds, but at a different position\n>     canvas.drawRect\n>       bounds: bounds\n>       position: Point(0, 50)\n>       stroke:\n>         color: \"purple\"\n>         width: 2\n\n----\n\nDraw a line from `start` to `end`.\n\n>     #! paint\n>     # Draw a sweet diagonal\n>     canvas.drawLine\n>       start: Point(0, 0)\n>       end: Point(200, 200)\n>       color: \"purple\"\n>\n>     # Draw another sweet diagonal\n>     canvas.drawLine\n>       start: Point(200, 0)\n>       end: Point(0, 200)\n>       color: \"red\"\n>       width: 6\n>\n>     # Now draw a sweet horizontal with a direction and a length\n>     canvas.drawLine\n>       start: Point(0, 100)\n>       length: 200\n>       direction: Point(1, 0)\n>       color: \"orange\"\n\n          drawLine: ({start, end, width, color, direction, length}) ->\n            width ||= 3\n\n            if direction\n              end = direction.norm(length).add(start)\n\n            @lineWidth(width)\n            @strokeColor(color)\n\n            context.beginPath()\n            context.moveTo(start.x, start.y)\n            context.lineTo(end.x, end.y)\n            context.closePath()\n            context.stroke()\n\n            return this\n\nDraw a polygon.\n\n>     #! paint\n>     # Draw a sweet rhombus\n>     canvas.drawPoly\n>       points: [\n>         Point(50, 25)\n>         Point(75, 50)\n>         Point(50, 75)\n>         Point(25, 50)\n>       ]\n>       color: \"purple\"\n>       stroke:\n>         color: \"red\"\n>         width: 2\n\n          drawPoly: ({points, color, stroke}) ->\n            context.beginPath()\n            points.forEach (point, i) ->\n              if i == 0\n                context.moveTo(point.x, point.y)\n              else\n                context.lineTo(point.x, point.y)\n            context.lineTo points[0].x, points[0].y\n\n            if color\n              @fillColor(color)\n              context.fill()\n\n            if stroke\n              @strokeColor(stroke.color)\n              @lineWidth(stroke.width)\n              context.stroke()\n\n            return @\n\nDraw a rounded rectangle.\n\nAdapted from http://js-bits.blogspot.com/2010/07/canvas-rounded-corner-rectangles.html\n\n>     #! paint\n>     # Draw a purple rounded rectangle with a red outline\n>     canvas.drawRoundRect\n>       position: Point(25, 25)\n>       radius: 10\n>       width: 150\n>       height: 100\n>       color: \"purple\"\n>       stroke:\n>         color: \"red\"\n>         width: 2\n\n          drawRoundRect: ({x, y, width, height, radius, position, bounds, color, stroke}) ->\n            radius = 5 unless radius?\n\n            {x, y, width, height} = bounds if bounds\n            {x, y} = position if position\n\n            context.beginPath()\n            context.moveTo(x + radius, y)\n            context.lineTo(x + width - radius, y)\n            context.quadraticCurveTo(x + width, y, x + width, y + radius)\n            context.lineTo(x + width, y + height - radius)\n            context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height)\n            context.lineTo(x + radius, y + height)\n            context.quadraticCurveTo(x, y + height, x, y + height - radius)\n            context.lineTo(x, y + radius)\n            context.quadraticCurveTo(x, y, x + radius, y)\n            context.closePath()\n\n            if color\n              @fillColor(color)\n              context.fill()\n\n            if stroke\n              @lineWidth(stroke.width)\n              @strokeColor(stroke.color)\n              context.stroke()\n\n            return this\n\nDraws text on the canvas at the given position, in the given color.\nIf no color is given then the previous fill color is used.\n\n>     #! paint\n>     # Fill canvas to indicate bounds\n>     canvas.fill\n>       color: '#eee'\n>\n>     # A line to indicate the baseline\n>     canvas.drawLine\n>       start: Point(25, 50)\n>       end: Point(125, 50)\n>       color: \"#333\"\n>       width: 1\n>\n>     # Draw some text, note the position of the baseline\n>     canvas.drawText\n>       position: Point(25, 50)\n>       color: \"red\"\n>       text: \"It's dangerous to go alone\"\n\n\n          drawText: ({x, y, text, position, color, font}) ->\n            {x, y} = position if position\n\n            @fillColor(color)\n            @font(font) if font\n            context.fillText(text, x, y)\n\n            return this\n\nCenters the given text on the canvas at the given y position. An x position\nor point position can also be given in which case the text is centered at the\nx, y or position value specified.\n\n>     #! paint\n>     # Fill canvas to indicate bounds\n>     canvas.fill\n>       color: \"#eee\"\n>\n>     # Center text on the screen at y value 25\n>     canvas.centerText\n>       y: 25\n>       color: \"red\"\n>       text: \"It's dangerous to go alone\"\n>\n>     # Center text at point (75, 75)\n>     canvas.centerText\n>       position: Point(75, 75)\n>       color: \"green\"\n>       text: \"take this\"\n\n          centerText: ({text, x, y, position, color, font}) ->\n            {x, y} = position if position\n\n            x = canvas.width / 2 unless x?\n\n            textWidth = @measureText(text)\n\n            @drawText {\n              text\n              color\n              font\n              x: x - (textWidth) / 2\n              y\n            }\n\nSetting the fill color:\n\n`canvas.fillColor(\"#FF0000\")`\n\nPassing no arguments returns the fillColor:\n\n`canvas.fillColor() # => \"#FF000000\"`\n\nYou can also pass a Color object:\n\n`canvas.fillColor(Color('sky blue'))`\n\n          fillColor: (color) ->\n            if color\n              if color.channels\n                context.fillStyle = color.toString()\n              else\n                context.fillStyle = color\n\n              return @\n            else\n              return context.fillStyle\n\nSetting the stroke color:\n\n`canvas.strokeColor(\"#FF0000\")`\n\nPassing no arguments returns the strokeColor:\n\n`canvas.strokeColor() # => \"#FF0000\"`\n\nYou can also pass a Color object:\n\n`canvas.strokeColor(Color('sky blue'))`\n\n          strokeColor: (color) ->\n            if color\n              if color.channels\n                context.strokeStyle = color.toString()\n              else\n                context.strokeStyle = color\n\n              return this\n            else\n              return context.strokeStyle\n\nDetermine how wide some text is.\n\n`canvas.measureText('Hello World!') # => 55`\n\nIt may have accuracy issues depending on the font used.\n\n          measureText: (text) ->\n            context.measureText(text).width\n\nPasses this canvas to the block with the given matrix transformation\napplied. All drawing methods called within the block will draw\ninto the canvas with the transformation applied. The transformation\nis removed at the end of the block, even if the block throws an error.\n\n          withTransform: (matrix, block) ->\n            context.save()\n\n            context.transform(\n              matrix.a,\n              matrix.b,\n              matrix.c,\n              matrix.d,\n              matrix.tx,\n              matrix.ty\n            )\n\n            try\n              block(this)\n            finally\n              context.restore()\n\n            return this\n\nStraight proxy to context `putImageData` method.\n\n          putImageData: (args...) ->\n            context.putImageData(args...)\n\n            return this\n\nContext getter.\n\n          context: ->\n            context\n\nGetter for the actual html canvas element.\n\n          element: ->\n            canvas\n\nStraight proxy to context pattern creation.\n\n          createPattern: (image, repitition) ->\n            context.createPattern(image, repitition)\n\nSet a clip rectangle.\n\n          clip: (x, y, width, height) ->\n            context.beginPath()\n            context.rect(x, y, width, height)\n            context.clip()\n\n            return this\n\nGenerate accessors that get properties from the context object.\n\n        contextAttrAccessor = (attrs...) ->\n          attrs.forEach (attr) ->\n            self[attr] = (newVal) ->\n              if newVal?\n                context[attr] = newVal\n                return @\n              else\n                context[attr]\n\n        contextAttrAccessor(\n          \"font\",\n          \"globalAlpha\",\n          \"globalCompositeOperation\",\n          \"lineWidth\",\n          \"textAlign\",\n        )\n\nGenerate accessors that get properties from the canvas object.\n\n        canvasAttrAccessor = (attrs...) ->\n          attrs.forEach (attr) ->\n            self[attr] = (newVal) ->\n              if newVal?\n                canvas[attr] = newVal\n                return @\n              else\n                canvas[attr]\n\n        canvasAttrAccessor(\n          \"height\",\n          \"width\",\n        )\n\n        context = canvas.getContext('2d')\n\n        options.init(self)\n\n        return self\n\nHelpers\n-------\n\nFill in default properties for an object, setting them only if they are not\nalready present.\n\n    defaults = (target, objects...) ->\n      for object in objects\n        for name of object\n          unless target.hasOwnProperty(name)\n            target[name] = object[name]\n\n      return target\n\nInteractive Examples\n--------------------\n\n>     #! setup\n>     Canvas = require \"/pixie_canvas\"\n>\n>     window.Point ?= (x, y) ->\n>       x: x\n>       y: y\n>\n>     Interactive.register \"paint\", ({source, runtimeElement}) ->\n>       canvas = Canvas\n>         width: 400\n>         height: 200\n>\n>       code = CoffeeScript.compile(source)\n>\n>       runtimeElement.empty().append canvas.element()\n>       Function(\"canvas\", code)(canvas)\n",
              "type": "blob"
            },
            "test/test.coffee": {
              "path": "test/test.coffee",
              "mode": "100644",
              "content": "Canvas = require \"../pixie_canvas\"\n\ndescribe \"pixie canvas\", ->\n  it \"Should create a canvas\", ->\n    canvas = Canvas\n      width: 400\n      height: 150\n\n    assert canvas\n\n    assert canvas.width() is 400\n",
              "type": "blob"
            }
          },
          "distribution": {
            "pixie": {
              "path": "pixie",
              "content": "module.exports = {\"entryPoint\":\"pixie_canvas\",\"version\":\"0.9.2\"};",
              "type": "blob"
            },
            "pixie_canvas": {
              "path": "pixie_canvas",
              "content": "(function() {\n  var TAU, defaults,\n    __slice = [].slice;\n\n  TAU = 2 * Math.PI;\n\n  module.exports = function(options) {\n    var canvas, canvasAttrAccessor, context, contextAttrAccessor, self;\n    if (options == null) {\n      options = {};\n    }\n    defaults(options, {\n      width: 400,\n      height: 400,\n      init: function() {}\n    });\n    canvas = document.createElement(\"canvas\");\n    canvas.width = options.width;\n    canvas.height = options.height;\n    context = void 0;\n    self = {\n      clear: function(_arg) {\n        var height, width, x, y, _ref;\n        _ref = _arg != null ? _arg : {}, x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height;\n        if (x == null) {\n          x = 0;\n        }\n        if (y == null) {\n          y = 0;\n        }\n        if (width == null) {\n          width = canvas.width;\n        }\n        if (height == null) {\n          height = canvas.height;\n        }\n        context.clearRect(x, y, width, height);\n        return this;\n      },\n      fill: function(color) {\n        var bounds, height, width, x, y, _ref;\n        if (color == null) {\n          color = {};\n        }\n        if (!((typeof color === \"string\") || color.channels)) {\n          _ref = color, x = _ref.x, y = _ref.y, width = _ref.width, height = _ref.height, bounds = _ref.bounds, color = _ref.color;\n        }\n        if (bounds) {\n          x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;\n        }\n        x || (x = 0);\n        y || (y = 0);\n        if (width == null) {\n          width = canvas.width;\n        }\n        if (height == null) {\n          height = canvas.height;\n        }\n        this.fillColor(color);\n        context.fillRect(x, y, width, height);\n        return this;\n      },\n      drawImage: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        context.drawImage.apply(context, args);\n        return this;\n      },\n      drawCircle: function(_arg) {\n        var circle, color, position, radius, stroke, x, y;\n        x = _arg.x, y = _arg.y, radius = _arg.radius, position = _arg.position, color = _arg.color, stroke = _arg.stroke, circle = _arg.circle;\n        if (circle) {\n          x = circle.x, y = circle.y, radius = circle.radius;\n        }\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        if (radius < 0) {\n          radius = 0;\n        }\n        context.beginPath();\n        context.arc(x, y, radius, 0, TAU, true);\n        context.closePath();\n        if (color) {\n          this.fillColor(color);\n          context.fill();\n        }\n        if (stroke) {\n          this.strokeColor(stroke.color);\n          this.lineWidth(stroke.width);\n          context.stroke();\n        }\n        return this;\n      },\n      drawRect: function(_arg) {\n        var bounds, color, height, position, stroke, width, x, y;\n        x = _arg.x, y = _arg.y, width = _arg.width, height = _arg.height, position = _arg.position, bounds = _arg.bounds, color = _arg.color, stroke = _arg.stroke;\n        if (bounds) {\n          x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;\n        }\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        if (color) {\n          this.fillColor(color);\n          context.fillRect(x, y, width, height);\n        }\n        if (stroke) {\n          this.strokeColor(stroke.color);\n          this.lineWidth(stroke.width);\n          context.strokeRect(x, y, width, height);\n        }\n        return this;\n      },\n      drawLine: function(_arg) {\n        var color, direction, end, length, start, width;\n        start = _arg.start, end = _arg.end, width = _arg.width, color = _arg.color, direction = _arg.direction, length = _arg.length;\n        width || (width = 3);\n        if (direction) {\n          end = direction.norm(length).add(start);\n        }\n        this.lineWidth(width);\n        this.strokeColor(color);\n        context.beginPath();\n        context.moveTo(start.x, start.y);\n        context.lineTo(end.x, end.y);\n        context.closePath();\n        context.stroke();\n        return this;\n      },\n      drawPoly: function(_arg) {\n        var color, points, stroke;\n        points = _arg.points, color = _arg.color, stroke = _arg.stroke;\n        context.beginPath();\n        points.forEach(function(point, i) {\n          if (i === 0) {\n            return context.moveTo(point.x, point.y);\n          } else {\n            return context.lineTo(point.x, point.y);\n          }\n        });\n        context.lineTo(points[0].x, points[0].y);\n        if (color) {\n          this.fillColor(color);\n          context.fill();\n        }\n        if (stroke) {\n          this.strokeColor(stroke.color);\n          this.lineWidth(stroke.width);\n          context.stroke();\n        }\n        return this;\n      },\n      drawRoundRect: function(_arg) {\n        var bounds, color, height, position, radius, stroke, width, x, y;\n        x = _arg.x, y = _arg.y, width = _arg.width, height = _arg.height, radius = _arg.radius, position = _arg.position, bounds = _arg.bounds, color = _arg.color, stroke = _arg.stroke;\n        if (radius == null) {\n          radius = 5;\n        }\n        if (bounds) {\n          x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;\n        }\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        context.beginPath();\n        context.moveTo(x + radius, y);\n        context.lineTo(x + width - radius, y);\n        context.quadraticCurveTo(x + width, y, x + width, y + radius);\n        context.lineTo(x + width, y + height - radius);\n        context.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n        context.lineTo(x + radius, y + height);\n        context.quadraticCurveTo(x, y + height, x, y + height - radius);\n        context.lineTo(x, y + radius);\n        context.quadraticCurveTo(x, y, x + radius, y);\n        context.closePath();\n        if (color) {\n          this.fillColor(color);\n          context.fill();\n        }\n        if (stroke) {\n          this.lineWidth(stroke.width);\n          this.strokeColor(stroke.color);\n          context.stroke();\n        }\n        return this;\n      },\n      drawText: function(_arg) {\n        var color, font, position, text, x, y;\n        x = _arg.x, y = _arg.y, text = _arg.text, position = _arg.position, color = _arg.color, font = _arg.font;\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        this.fillColor(color);\n        if (font) {\n          this.font(font);\n        }\n        context.fillText(text, x, y);\n        return this;\n      },\n      centerText: function(_arg) {\n        var color, font, position, text, textWidth, x, y;\n        text = _arg.text, x = _arg.x, y = _arg.y, position = _arg.position, color = _arg.color, font = _arg.font;\n        if (position) {\n          x = position.x, y = position.y;\n        }\n        if (x == null) {\n          x = canvas.width / 2;\n        }\n        textWidth = this.measureText(text);\n        return this.drawText({\n          text: text,\n          color: color,\n          font: font,\n          x: x - textWidth / 2,\n          y: y\n        });\n      },\n      fillColor: function(color) {\n        if (color) {\n          if (color.channels) {\n            context.fillStyle = color.toString();\n          } else {\n            context.fillStyle = color;\n          }\n          return this;\n        } else {\n          return context.fillStyle;\n        }\n      },\n      strokeColor: function(color) {\n        if (color) {\n          if (color.channels) {\n            context.strokeStyle = color.toString();\n          } else {\n            context.strokeStyle = color;\n          }\n          return this;\n        } else {\n          return context.strokeStyle;\n        }\n      },\n      measureText: function(text) {\n        return context.measureText(text).width;\n      },\n      withTransform: function(matrix, block) {\n        context.save();\n        context.transform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);\n        try {\n          block(this);\n        } finally {\n          context.restore();\n        }\n        return this;\n      },\n      putImageData: function() {\n        var args;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        context.putImageData.apply(context, args);\n        return this;\n      },\n      context: function() {\n        return context;\n      },\n      element: function() {\n        return canvas;\n      },\n      createPattern: function(image, repitition) {\n        return context.createPattern(image, repitition);\n      },\n      clip: function(x, y, width, height) {\n        context.beginPath();\n        context.rect(x, y, width, height);\n        context.clip();\n        return this;\n      }\n    };\n    contextAttrAccessor = function() {\n      var attrs;\n      attrs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return attrs.forEach(function(attr) {\n        return self[attr] = function(newVal) {\n          if (newVal != null) {\n            context[attr] = newVal;\n            return this;\n          } else {\n            return context[attr];\n          }\n        };\n      });\n    };\n    contextAttrAccessor(\"font\", \"globalAlpha\", \"globalCompositeOperation\", \"lineWidth\", \"textAlign\");\n    canvasAttrAccessor = function() {\n      var attrs;\n      attrs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      return attrs.forEach(function(attr) {\n        return self[attr] = function(newVal) {\n          if (newVal != null) {\n            canvas[attr] = newVal;\n            return this;\n          } else {\n            return canvas[attr];\n          }\n        };\n      });\n    };\n    canvasAttrAccessor(\"height\", \"width\");\n    context = canvas.getContext('2d');\n    options.init(self);\n    return self;\n  };\n\n  defaults = function() {\n    var name, object, objects, target, _i, _len;\n    target = arguments[0], objects = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = objects.length; _i < _len; _i++) {\n      object = objects[_i];\n      for (name in object) {\n        if (!target.hasOwnProperty(name)) {\n          target[name] = object[name];\n        }\n      }\n    }\n    return target;\n  };\n\n}).call(this);\n\n//# sourceURL=pixie_canvas.coffee",
              "type": "blob"
            },
            "test/test": {
              "path": "test/test",
              "content": "(function() {\n  var Canvas;\n\n  Canvas = require(\"../pixie_canvas\");\n\n  describe(\"pixie canvas\", function() {\n    return it(\"Should create a canvas\", function() {\n      var canvas;\n      canvas = Canvas({\n        width: 400,\n        height: 150\n      });\n      assert(canvas);\n      return assert(canvas.width() === 400);\n    });\n  });\n\n}).call(this);\n\n//# sourceURL=test/test.coffee",
              "type": "blob"
            }
          },
          "progenitor": {
            "url": "http://strd6.github.io/editor/"
          },
          "version": "0.9.2",
          "entryPoint": "pixie_canvas",
          "repository": {
            "id": 12096899,
            "name": "pixie-canvas",
            "full_name": "distri/pixie-canvas",
            "owner": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "private": false,
            "html_url": "https://github.com/distri/pixie-canvas",
            "description": "A pretty ok HTML5 canvas wrapper",
            "fork": false,
            "url": "https://api.github.com/repos/distri/pixie-canvas",
            "forks_url": "https://api.github.com/repos/distri/pixie-canvas/forks",
            "keys_url": "https://api.github.com/repos/distri/pixie-canvas/keys{/key_id}",
            "collaborators_url": "https://api.github.com/repos/distri/pixie-canvas/collaborators{/collaborator}",
            "teams_url": "https://api.github.com/repos/distri/pixie-canvas/teams",
            "hooks_url": "https://api.github.com/repos/distri/pixie-canvas/hooks",
            "issue_events_url": "https://api.github.com/repos/distri/pixie-canvas/issues/events{/number}",
            "events_url": "https://api.github.com/repos/distri/pixie-canvas/events",
            "assignees_url": "https://api.github.com/repos/distri/pixie-canvas/assignees{/user}",
            "branches_url": "https://api.github.com/repos/distri/pixie-canvas/branches{/branch}",
            "tags_url": "https://api.github.com/repos/distri/pixie-canvas/tags",
            "blobs_url": "https://api.github.com/repos/distri/pixie-canvas/git/blobs{/sha}",
            "git_tags_url": "https://api.github.com/repos/distri/pixie-canvas/git/tags{/sha}",
            "git_refs_url": "https://api.github.com/repos/distri/pixie-canvas/git/refs{/sha}",
            "trees_url": "https://api.github.com/repos/distri/pixie-canvas/git/trees{/sha}",
            "statuses_url": "https://api.github.com/repos/distri/pixie-canvas/statuses/{sha}",
            "languages_url": "https://api.github.com/repos/distri/pixie-canvas/languages",
            "stargazers_url": "https://api.github.com/repos/distri/pixie-canvas/stargazers",
            "contributors_url": "https://api.github.com/repos/distri/pixie-canvas/contributors",
            "subscribers_url": "https://api.github.com/repos/distri/pixie-canvas/subscribers",
            "subscription_url": "https://api.github.com/repos/distri/pixie-canvas/subscription",
            "commits_url": "https://api.github.com/repos/distri/pixie-canvas/commits{/sha}",
            "git_commits_url": "https://api.github.com/repos/distri/pixie-canvas/git/commits{/sha}",
            "comments_url": "https://api.github.com/repos/distri/pixie-canvas/comments{/number}",
            "issue_comment_url": "https://api.github.com/repos/distri/pixie-canvas/issues/comments/{number}",
            "contents_url": "https://api.github.com/repos/distri/pixie-canvas/contents/{+path}",
            "compare_url": "https://api.github.com/repos/distri/pixie-canvas/compare/{base}...{head}",
            "merges_url": "https://api.github.com/repos/distri/pixie-canvas/merges",
            "archive_url": "https://api.github.com/repos/distri/pixie-canvas/{archive_format}{/ref}",
            "downloads_url": "https://api.github.com/repos/distri/pixie-canvas/downloads",
            "issues_url": "https://api.github.com/repos/distri/pixie-canvas/issues{/number}",
            "pulls_url": "https://api.github.com/repos/distri/pixie-canvas/pulls{/number}",
            "milestones_url": "https://api.github.com/repos/distri/pixie-canvas/milestones{/number}",
            "notifications_url": "https://api.github.com/repos/distri/pixie-canvas/notifications{?since,all,participating}",
            "labels_url": "https://api.github.com/repos/distri/pixie-canvas/labels{/name}",
            "releases_url": "https://api.github.com/repos/distri/pixie-canvas/releases{/id}",
            "created_at": "2013-08-14T01:15:34Z",
            "updated_at": "2013-11-29T20:54:07Z",
            "pushed_at": "2013-11-29T20:54:07Z",
            "git_url": "git://github.com/distri/pixie-canvas.git",
            "ssh_url": "git@github.com:distri/pixie-canvas.git",
            "clone_url": "https://github.com/distri/pixie-canvas.git",
            "svn_url": "https://github.com/distri/pixie-canvas",
            "homepage": null,
            "size": 664,
            "stargazers_count": 0,
            "watchers_count": 0,
            "language": "CoffeeScript",
            "has_issues": true,
            "has_downloads": true,
            "has_wiki": true,
            "forks_count": 0,
            "mirror_url": null,
            "open_issues_count": 1,
            "forks": 0,
            "open_issues": 1,
            "watchers": 0,
            "default_branch": "master",
            "master_branch": "master",
            "permissions": {
              "admin": true,
              "push": true,
              "pull": true
            },
            "organization": {
              "login": "distri",
              "id": 6005125,
              "avatar_url": "https://identicons.github.com/f90c81ffc1498e260c820082f2e7ca5f.png",
              "gravatar_id": null,
              "url": "https://api.github.com/users/distri",
              "html_url": "https://github.com/distri",
              "followers_url": "https://api.github.com/users/distri/followers",
              "following_url": "https://api.github.com/users/distri/following{/other_user}",
              "gists_url": "https://api.github.com/users/distri/gists{/gist_id}",
              "starred_url": "https://api.github.com/users/distri/starred{/owner}{/repo}",
              "subscriptions_url": "https://api.github.com/users/distri/subscriptions",
              "organizations_url": "https://api.github.com/users/distri/orgs",
              "repos_url": "https://api.github.com/users/distri/repos",
              "events_url": "https://api.github.com/users/distri/events{/privacy}",
              "received_events_url": "https://api.github.com/users/distri/received_events",
              "type": "Organization",
              "site_admin": false
            },
            "network_count": 0,
            "subscribers_count": 1,
            "branch": "v0.9.2",
            "publishBranch": "gh-pages"
          },
          "dependencies": {}
        }
      }
    },
    "observable": {
      "source": {
        "LICENSE": {
          "path": "LICENSE",
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 distri\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
          "mode": "100644",
          "type": "blob"
        },
        "README.md": {
          "path": "README.md",
          "content": "[![Build Status](https://travis-ci.org/distri/observable.svg?branch=npm)](https://travis-ci.org/distri/observable)\n\nObservable\n==========\n\nInstallation\n------------\n\nNode\n\n    npm install o_0\n\nUsage\n-----\n\n    Observable = require \"o_0\"\n\nGet notified when the value changes.\n\n    observable = Observable 5\n\n    observable() # 5\n\n    observable.observe (newValue) ->\n      console.log newValue\n\n    observable 10 # logs 10 to console\n\nArrays\n------\n\nProxy array methods.\n\n    observable = Observable [1, 2, 3]\n\n    observable.forEach (value) ->\n      # 1, 2, 3\n\nFunctions\n---------\n\nAutomagically compute dependencies for observable functions.\n\n    firstName = Observable \"Duder\"\n    lastName = Observable \"Man\"\n\n    o = Observable ->\n      \"#{firstName()} #{lastName()}\"\n\n    o.observe (newValue) ->\n      assert.equal newValue, \"Duder Bro\"\n\n    lastName \"Bro\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "main.coffee.md": {
          "path": "main.coffee.md",
          "content": "Observable\n==========\n\n`Observable` allows for observing arrays, functions, and objects.\n\nFunction dependencies are automagically observed.\n\nStandard array methods are proxied through to the underlying array.\n\n    Observable = (value, context) ->\n\nReturn the object if it is already an observable object.\n\n      return value if typeof value?.observe is \"function\"\n\nMaintain a set of listeners to observe changes and provide a helper to notify each observer.\n\n      listeners = []\n\n      notify = (newValue) ->\n        copy(listeners).forEach (listener) ->\n          listener(newValue)\n\nOur observable function is stored as a reference to `self`.\n\nIf `value` is a function compute dependencies and listen to observables that it depends on.\n\n      if typeof value is 'function'\n        fn = value\n\nOur return function is a function that holds only a cached value which is updated\nwhen it's dependencies change.\n\nThe `magicDependency` call is so other functions can depend on this computed function the\nsame way we depend on other types of observables.\n\n        self = ->\n          # Automagic dependency observation\n          magicDependency(self)\n\n          return value\n\n        self.each = (args...) ->\n          magicDependency(self)\n\n          splat(value).forEach(args...)\n\n        changed = ->\n          value = computeDependencies(self, fn, changed, context)\n          notify(value)\n\n        value = computeDependencies(self, fn, changed, context)\n\n      else\n\nWhen called with zero arguments it is treated as a getter. When called with one argument it is treated as a setter.\n\nChanges to the value will trigger notifications.\n\nThe value is always returned.\n\n        self = (newValue) ->\n          if arguments.length > 0\n            if value != newValue\n              value = newValue\n\n              notify(newValue)\n          else\n            # Automagic dependency observation\n            magicDependency(self)\n\n          return value\n\nThis `each` iterator is similar to [the Maybe monad](http://en.wikipedia.org/wiki/Monad_&#40;functional_programming&#41;#The_Maybe_monad) in that our observable may contain a single value or nothing at all.\n\n      self.each = (args...) ->\n        magicDependency(self)\n\n        if value?\n          [value].forEach(args...)\n\nIf the value is an array then proxy array methods and add notifications to mutation events.\n\n      if Array.isArray(value)\n        [\n          \"concat\"\n          \"every\"\n          \"filter\"\n          \"forEach\"\n          \"indexOf\"\n          \"join\"\n          \"lastIndexOf\"\n          \"map\"\n          \"reduce\"\n          \"reduceRight\"\n          \"slice\"\n          \"some\"\n        ].forEach (method) ->\n          self[method] = (args...) ->\n            magicDependency(self)\n            value[method](args...)\n\n        [\n          \"pop\"\n          \"push\"\n          \"reverse\"\n          \"shift\"\n          \"splice\"\n          \"sort\"\n          \"unshift\"\n        ].forEach (method) ->\n          self[method] = (args...) ->\n            notifyReturning value[method](args...)\n\n        notifyReturning = (returnValue) ->\n          notify(value)\n\n          return returnValue\n\nAdd some extra helpful methods to array observables.\n\n        extend self,\n          each: (args...) ->\n            self.forEach(args...)\n\n            return self\n\nRemove an element from the array and notify observers of changes.\n\n          remove: (object) ->\n            index = value.indexOf(object)\n\n            if index >= 0\n              notifyReturning value.splice(index, 1)[0]\n\n          get: (index) ->\n            magicDependency(self)\n            value[index]\n\n          first: ->\n            magicDependency(self)\n            value[0]\n\n          last: ->\n            magicDependency(self)\n            value[value.length-1]\n\n          size: ->\n            magicDependency(self)\n            value.length\n\n      extend self,\n        listeners: listeners\n\n        observe: (listener) ->\n          listeners.push listener\n\n        stopObserving: (fn) ->\n          remove listeners, fn\n\n        toggle: ->\n          self !value\n\n        increment: (n) ->\n          self value + n\n\n        decrement: (n) ->\n          self value - n\n\n        toString: ->\n          \"Observable(#{value})\"\n\n      return self\n\n    Observable.concat = (args...) ->\n      args = Observable(args)\n\n      o = Observable ->\n        flatten args.map(splat)\n\n      o.push = args.push\n\n      return o\n\nExport `Observable`\n\n    module.exports = Observable\n\nAppendix\n--------\n\nThe extend method adds one objects properties to another.\n\n    extend = (target, sources...) ->\n      for source in sources\n        for name of source\n          target[name] = source[name]\n\n      return target\n\nSuper hax for computing dependencies. This needs to be a shared global so that\ndifferent bundled versions of observable libraries can interoperate.\n\n    global.OBSERVABLE_ROOT_HACK = []\n\n    autoDeps = ->\n      last(global.OBSERVABLE_ROOT_HACK)\n\n    magicDependency = (self) ->\n      if observerStack = autoDeps()\n        observerStack.push self\n\n    withBase = (self, update, fn) ->\n      global.OBSERVABLE_ROOT_HACK.push(deps = [])\n\n      try\n        value = fn()\n        self._deps?.forEach (observable) ->\n          observable.stopObserving update\n\n        self._deps = deps\n\n        deps.forEach (observable) ->\n          observable.observe update\n      finally\n        global.OBSERVABLE_ROOT_HACK.pop()\n\n      return value\n\nAutomagically compute dependencies.\n\n    computeDependencies = (self, fn, update, context) ->\n      withBase self, update, ->\n        fn.call(context)\n\nRemove a value from an array.\n\n    remove = (array, value) ->\n      index = array.indexOf(value)\n\n      if index >= 0\n        array.splice(index, 1)[0]\n\n    copy = (array) ->\n      array.concat([])\n\n    get = (arg) ->\n      if typeof arg is \"function\"\n        arg()\n      else\n        arg\n\n    splat = (item) ->\n      results = []\n\n      if typeof item.forEach is \"function\"\n        item.forEach (i) ->\n          results.push i\n      else\n        result = get item\n\n        results.push result if result?\n\n      results\n\n    last = (array) ->\n      array[array.length - 1]\n\n    flatten = (array) ->\n      array.reduce (a, b) ->\n        a.concat(b)\n      , []\n",
          "mode": "100644",
          "type": "blob"
        },
        "pixie.cson": {
          "path": "pixie.cson",
          "content": "version: \"0.3.1\"\n",
          "mode": "100644",
          "type": "blob"
        },
        "test/observable.coffee": {
          "path": "test/observable.coffee",
          "content": "global.Observable = require \"../main\"\n\ndescribe 'Observable', ->\n  it 'should create an observable for an object', ->\n    n = 5\n\n    observable = Observable(n)\n\n    assert.equal(observable(), n)\n\n  it 'should fire events when setting', ->\n    string = \"yolo\"\n\n    observable = Observable(string)\n    observable.observe (newValue) ->\n      assert.equal newValue, \"4life\"\n\n    observable(\"4life\")\n\n  it 'should be idempotent', ->\n    o = Observable(5)\n\n    assert.equal o, Observable(o)\n\n  describe \"#each\", ->\n    it \"should be invoked once if there is an observable\", ->\n      o = Observable(5)\n      called = 0\n\n      o.each (value) ->\n        called += 1\n        assert.equal value, 5\n\n      assert.equal called, 1\n\n    it \"should not be invoked if observable is null\", ->\n      o = Observable(null)\n      called = 0\n\n      o.each (value) ->\n        called += 1\n\n      assert.equal called, 0\n\n  it \"should allow for stopping observation\", ->\n    observable = Observable(\"string\")\n\n    called = 0\n    fn = (newValue) ->\n      called += 1\n      assert.equal newValue, \"4life\"\n\n    observable.observe fn\n\n    observable(\"4life\")\n\n    observable.stopObserving fn\n\n    observable(\"wat\")\n\n    assert.equal called, 1\n\n  it \"should increment\", ->\n    observable = Observable 1\n\n    observable.increment(5)\n\n    assert.equal observable(), 6\n\n  it \"should decremnet\", ->\n    observable = Observable 1\n\n    observable.decrement 5\n\n    assert.equal observable(), -4\n\n  it \"should toggle\", ->\n    observable = Observable false\n\n    observable.toggle()\n    assert.equal observable(), true\n\n    observable.toggle()\n    assert.equal observable(), false\n\n  it \"should trigger when toggling\", (done) ->\n    observable = Observable true\n    observable.observe (v) ->\n      assert.equal v, false\n      done()\n\n    observable.toggle()\n\ndescribe \"Observable Array\", ->\n  it \"should proxy array methods\", ->\n    o = Observable [5]\n\n    o.map (n) ->\n      assert.equal n, 5\n\n  it \"should notify on mutation methods\", (done) ->\n    o = Observable []\n\n    o.observe (newValue) ->\n      assert.equal newValue[0], 1\n\n    o.push 1\n\n    done()\n\n  it \"should have an each method\", ->\n    o = Observable []\n\n    assert o.each\n\n  it \"#get\", ->\n    o = Observable [0, 1, 2, 3]\n\n    assert.equal o.get(2), 2\n\n  it \"#first\", ->\n    o = Observable [0, 1, 2, 3]\n\n    assert.equal o.first(), 0\n\n  it \"#last\", ->\n    o = Observable [0, 1, 2, 3]\n\n    assert.equal o.last(), 3\n\n  it \"#remove\", (done) ->\n    o = Observable [0, 1, 2, 3]\n\n    o.observe (newValue) ->\n      assert.equal newValue.length, 3\n      setTimeout ->\n        done()\n      , 0\n\n    assert.equal o.remove(2), 2\n\n  # TODO: This looks like it might be impossible\n  it \"should proxy the length property\"\n\ndescribe \"Observable functions\", ->\n  it \"should compute dependencies\", (done) ->\n    firstName = Observable \"Duder\"\n    lastName = Observable \"Man\"\n\n    o = Observable ->\n      \"#{firstName()} #{lastName()}\"\n\n    o.observe (newValue) ->\n      assert.equal newValue, \"Duder Bro\"\n\n      done()\n\n    lastName \"Bro\"\n\n  it \"should compute array#get as a dependency\", ->\n    observableArray = Observable [0, 1, 2]\n\n    observableFn = Observable ->\n      observableArray.get(0)\n\n    assert.equal observableFn(), 0\n\n    observableArray([5])\n\n    assert.equal observableFn(), 5\n\n  it \"should compute array#first as a dependency\", ->\n    observableArray = Observable [0, 1, 2]\n\n    observableFn = Observable ->\n      observableArray.first() + 1\n\n    assert.equal observableFn(), 1\n\n    observableArray([5])\n\n    assert.equal observableFn(), 6\n\n  it \"should compute array#last as a dependency\", ->\n    observableArray = Observable [0, 1, 2]\n\n    observableFn = Observable ->\n      observableArray.last()\n\n    assert.equal observableFn(), 2\n\n    observableArray.pop()\n\n    assert.equal observableFn(), 1\n\n    observableArray([5])\n\n    assert.equal observableFn(), 5\n\n  it \"should compute array#size as a dependency\", ->\n    observableArray = Observable [0, 1, 2]\n\n    observableFn = Observable ->\n      observableArray.size() * 2\n\n    assert.equal observableFn(), 6\n\n    observableArray.pop()\n    assert.equal observableFn(), 4\n    observableArray.shift()\n    assert.equal observableFn(), 2\n\n  it \"should allow double nesting\", (done) ->\n    bottom = Observable \"rad\"\n    middle = Observable ->\n      bottom()\n    top = Observable ->\n      middle()\n\n    top.observe (newValue) ->\n      assert.equal newValue, \"wat\"\n      assert.equal top(), newValue\n      assert.equal middle(), newValue\n\n      done()\n\n    bottom(\"wat\")\n\n  it \"should work with dynamic dependencies\", ->\n    observableArray = Observable []\n\n    dynamicObservable = Observable ->\n      observableArray.filter (item) ->\n        item.age() > 3\n\n    assert.equal dynamicObservable().length, 0\n\n    observableArray.push\n      age: Observable 1\n\n    observableArray()[0].age 5\n    assert.equal dynamicObservable().length, 1\n\n  it \"should work with context\", ->\n    model =\n      a: Observable \"Hello\"\n      b: Observable \"there\"\n\n    model.c = Observable ->\n      \"#{@a()} #{@b()}\"\n    , model\n\n    assert.equal model.c(), \"Hello there\"\n\n    model.b \"world\"\n\n    assert.equal model.c(), \"Hello world\"\n\n  it \"should be ok even if the function throws an exception\", ->\n    assert.throws ->\n      t = Observable ->\n        throw \"wat\"\n\n    # TODO: Should be able to find a test case that is affected by this rather that\n    # checking it directly\n    assert.equal global.OBSERVABLE_ROOT_HACK.length, 0\n\n  it \"should have an each method\", ->\n    o = Observable ->\n\n    assert o.each\n\n  it \"should not invoke when returning undefined\", ->\n    o = Observable ->\n\n    o.each ->\n      assert false\n\n  it \"should invoke when returning any defined value\", (done) ->\n    o = Observable -> 5\n\n    o.each (n) ->\n      assert.equal n, 5\n      done()\n\n  it \"should work on an array dependency\", ->\n    oA = Observable [1, 2, 3]\n\n    o = Observable ->\n      oA()[0]\n\n    last = Observable ->\n      oA()[oA().length-1]\n\n    assert.equal o(), 1\n\n    oA.unshift 0\n\n    assert.equal o(), 0\n\n    oA.push 4\n\n    assert.equal last(), 4, \"Last should be 4\"\n\n  it \"should work with multiple dependencies\", ->\n    letter = Observable \"A\"\n    checked = ->\n      l = letter()\n      @name().indexOf(l) is 0\n\n    first = {name: Observable(\"Andrew\")}\n    first.checked = Observable checked, first\n\n    second = {name: Observable(\"Benjamin\")}\n    second.checked = Observable checked, second\n\n    assert.equal first.checked(), true\n    assert.equal second.checked(), false\n\n    assert.equal letter.listeners.length, 2\n\n    letter \"B\"\n\n    assert.equal first.checked(), false\n    assert.equal second.checked(), true\n\n  it \"should work with nested observable construction\", ->\n    gen = Observable ->\n      Observable \"Duder\"\n\n    o = gen()\n\n    assert.equal o(), \"Duder\"\n\n    o(\"wat\")\n\n    assert.equal o(), \"wat\"\n\n  describe \"Scoping\", ->\n    it \"should be scoped to optional context\", (done) ->\n      model =\n        firstName: Observable \"Duder\"\n        lastName: Observable \"Man\"\n\n      model.name = Observable ->\n        \"#{@firstName()} #{@lastName()}\"\n      , model\n\n      model.name.observe (newValue) ->\n        assert.equal newValue, \"Duder Bro\"\n\n        done()\n\n      model.lastName \"Bro\"\n\n  describe \"concat\", ->\n    it \"should return an observable array that changes based on changes in inputs\", ->\n      numbers = Observable [1, 2, 3]\n      letters = Observable [\"a\", \"b\", \"c\"]\n      item = Observable({})\n      nullable = Observable null\n\n      observableArray = Observable.concat numbers, \"literal\", letters, item, nullable\n\n      assert.equal observableArray().length, 3 + 1 + 3 + 1\n\n      assert.equal observableArray()[0], 1\n      assert.equal observableArray()[3], \"literal\"\n      assert.equal observableArray()[4], \"a\"\n      assert.equal observableArray()[7], item()\n\n      numbers.push 4\n\n      assert.equal observableArray().length, 9\n\n      nullable \"cool\"\n\n      assert.equal observableArray().length, 10\n\n    it \"should work with observable functions that return arrays\", ->\n      item = Observable(\"wat\")\n\n      computedArray = Observable ->\n        [item()]\n\n      observableArray = Observable.concat computedArray, computedArray\n\n      assert.equal observableArray().length, 2\n\n      assert.equal observableArray()[1], \"wat\"\n\n      item \"yolo\"\n\n      assert.equal observableArray()[1], \"yolo\"\n\n    it \"should have a push method\", ->\n      observableArray = Observable.concat()\n\n      observable = Observable \"hey\"\n\n      observableArray.push observable\n\n      assert.equal observableArray()[0], \"hey\"\n\n      observable \"wat\"\n\n      assert.equal observableArray()[0], \"wat\"\n\n      observableArray.push \"cool\"\n      observableArray.push \"radical\"\n\n      assert.equal observableArray().length, 3\n\n    it \"should be observable\", (done) ->\n      observableArray = Observable.concat()\n\n      observableArray.observe (items) ->\n        assert.equal items.length, 3\n        done()\n\n      observableArray.push [\"A\", \"B\", \"C\"]\n\n    it \"should have an each method\", ->\n      observableArray = Observable.concat([\"A\", \"B\", \"C\"])\n\n      n = 0\n      observableArray.each () ->\n        n += 1\n\n      assert.equal n, 3\n",
          "mode": "100644",
          "type": "blob"
        }
      },
      "distribution": {
        "main": {
          "path": "main",
          "content": "(function() {\n  var Observable, autoDeps, computeDependencies, copy, extend, flatten, get, last, magicDependency, remove, splat, withBase,\n    __slice = [].slice;\n\n  Observable = function(value, context) {\n    var changed, fn, listeners, notify, notifyReturning, self;\n    if (typeof (value != null ? value.observe : void 0) === \"function\") {\n      return value;\n    }\n    listeners = [];\n    notify = function(newValue) {\n      return copy(listeners).forEach(function(listener) {\n        return listener(newValue);\n      });\n    };\n    if (typeof value === 'function') {\n      fn = value;\n      self = function() {\n        magicDependency(self);\n        return value;\n      };\n      self.each = function() {\n        var args, _ref;\n        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n        magicDependency(self);\n        return (_ref = splat(value)).forEach.apply(_ref, args);\n      };\n      changed = function() {\n        value = computeDependencies(self, fn, changed, context);\n        return notify(value);\n      };\n      value = computeDependencies(self, fn, changed, context);\n    } else {\n      self = function(newValue) {\n        if (arguments.length > 0) {\n          if (value !== newValue) {\n            value = newValue;\n            notify(newValue);\n          }\n        } else {\n          magicDependency(self);\n        }\n        return value;\n      };\n    }\n    self.each = function() {\n      var args, _ref;\n      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n      magicDependency(self);\n      if (value != null) {\n        return (_ref = [value]).forEach.apply(_ref, args);\n      }\n    };\n    if (Array.isArray(value)) {\n      [\"concat\", \"every\", \"filter\", \"forEach\", \"indexOf\", \"join\", \"lastIndexOf\", \"map\", \"reduce\", \"reduceRight\", \"slice\", \"some\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          magicDependency(self);\n          return value[method].apply(value, args);\n        };\n      });\n      [\"pop\", \"push\", \"reverse\", \"shift\", \"splice\", \"sort\", \"unshift\"].forEach(function(method) {\n        return self[method] = function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          return notifyReturning(value[method].apply(value, args));\n        };\n      });\n      notifyReturning = function(returnValue) {\n        notify(value);\n        return returnValue;\n      };\n      extend(self, {\n        each: function() {\n          var args;\n          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n          self.forEach.apply(self, args);\n          return self;\n        },\n        remove: function(object) {\n          var index;\n          index = value.indexOf(object);\n          if (index >= 0) {\n            return notifyReturning(value.splice(index, 1)[0]);\n          }\n        },\n        get: function(index) {\n          magicDependency(self);\n          return value[index];\n        },\n        first: function() {\n          magicDependency(self);\n          return value[0];\n        },\n        last: function() {\n          magicDependency(self);\n          return value[value.length - 1];\n        },\n        size: function() {\n          magicDependency(self);\n          return value.length;\n        }\n      });\n    }\n    extend(self, {\n      listeners: listeners,\n      observe: function(listener) {\n        return listeners.push(listener);\n      },\n      stopObserving: function(fn) {\n        return remove(listeners, fn);\n      },\n      toggle: function() {\n        return self(!value);\n      },\n      increment: function(n) {\n        return self(value + n);\n      },\n      decrement: function(n) {\n        return self(value - n);\n      },\n      toString: function() {\n        return \"Observable(\" + value + \")\";\n      }\n    });\n    return self;\n  };\n\n  Observable.concat = function() {\n    var args, o;\n    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];\n    args = Observable(args);\n    o = Observable(function() {\n      return flatten(args.map(splat));\n    });\n    o.push = args.push;\n    return o;\n  };\n\n  module.exports = Observable;\n\n  extend = function() {\n    var name, source, sources, target, _i, _len;\n    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    for (_i = 0, _len = sources.length; _i < _len; _i++) {\n      source = sources[_i];\n      for (name in source) {\n        target[name] = source[name];\n      }\n    }\n    return target;\n  };\n\n  global.OBSERVABLE_ROOT_HACK = [];\n\n  autoDeps = function() {\n    return last(global.OBSERVABLE_ROOT_HACK);\n  };\n\n  magicDependency = function(self) {\n    var observerStack;\n    if (observerStack = autoDeps()) {\n      return observerStack.push(self);\n    }\n  };\n\n  withBase = function(self, update, fn) {\n    var deps, value, _ref;\n    global.OBSERVABLE_ROOT_HACK.push(deps = []);\n    try {\n      value = fn();\n      if ((_ref = self._deps) != null) {\n        _ref.forEach(function(observable) {\n          return observable.stopObserving(update);\n        });\n      }\n      self._deps = deps;\n      deps.forEach(function(observable) {\n        return observable.observe(update);\n      });\n    } finally {\n      global.OBSERVABLE_ROOT_HACK.pop();\n    }\n    return value;\n  };\n\n  computeDependencies = function(self, fn, update, context) {\n    return withBase(self, update, function() {\n      return fn.call(context);\n    });\n  };\n\n  remove = function(array, value) {\n    var index;\n    index = array.indexOf(value);\n    if (index >= 0) {\n      return array.splice(index, 1)[0];\n    }\n  };\n\n  copy = function(array) {\n    return array.concat([]);\n  };\n\n  get = function(arg) {\n    if (typeof arg === \"function\") {\n      return arg();\n    } else {\n      return arg;\n    }\n  };\n\n  splat = function(item) {\n    var result, results;\n    results = [];\n    if (typeof item.forEach === \"function\") {\n      item.forEach(function(i) {\n        return results.push(i);\n      });\n    } else {\n      result = get(item);\n      if (result != null) {\n        results.push(result);\n      }\n    }\n    return results;\n  };\n\n  last = function(array) {\n    return array[array.length - 1];\n  };\n\n  flatten = function(array) {\n    return array.reduce(function(a, b) {\n      return a.concat(b);\n    }, []);\n  };\n\n}).call(this);\n",
          "type": "blob"
        },
        "pixie": {
          "path": "pixie",
          "content": "module.exports = {\"version\":\"0.3.1\"};",
          "type": "blob"
        },
        "test/observable": {
          "path": "test/observable",
          "content": "(function() {\n  global.Observable = require(\"../main\");\n\n  describe('Observable', function() {\n    it('should create an observable for an object', function() {\n      var n, observable;\n      n = 5;\n      observable = Observable(n);\n      return assert.equal(observable(), n);\n    });\n    it('should fire events when setting', function() {\n      var observable, string;\n      string = \"yolo\";\n      observable = Observable(string);\n      observable.observe(function(newValue) {\n        return assert.equal(newValue, \"4life\");\n      });\n      return observable(\"4life\");\n    });\n    it('should be idempotent', function() {\n      var o;\n      o = Observable(5);\n      return assert.equal(o, Observable(o));\n    });\n    describe(\"#each\", function() {\n      it(\"should be invoked once if there is an observable\", function() {\n        var called, o;\n        o = Observable(5);\n        called = 0;\n        o.each(function(value) {\n          called += 1;\n          return assert.equal(value, 5);\n        });\n        return assert.equal(called, 1);\n      });\n      return it(\"should not be invoked if observable is null\", function() {\n        var called, o;\n        o = Observable(null);\n        called = 0;\n        o.each(function(value) {\n          return called += 1;\n        });\n        return assert.equal(called, 0);\n      });\n    });\n    it(\"should allow for stopping observation\", function() {\n      var called, fn, observable;\n      observable = Observable(\"string\");\n      called = 0;\n      fn = function(newValue) {\n        called += 1;\n        return assert.equal(newValue, \"4life\");\n      };\n      observable.observe(fn);\n      observable(\"4life\");\n      observable.stopObserving(fn);\n      observable(\"wat\");\n      return assert.equal(called, 1);\n    });\n    it(\"should increment\", function() {\n      var observable;\n      observable = Observable(1);\n      observable.increment(5);\n      return assert.equal(observable(), 6);\n    });\n    it(\"should decremnet\", function() {\n      var observable;\n      observable = Observable(1);\n      observable.decrement(5);\n      return assert.equal(observable(), -4);\n    });\n    it(\"should toggle\", function() {\n      var observable;\n      observable = Observable(false);\n      observable.toggle();\n      assert.equal(observable(), true);\n      observable.toggle();\n      return assert.equal(observable(), false);\n    });\n    return it(\"should trigger when toggling\", function(done) {\n      var observable;\n      observable = Observable(true);\n      observable.observe(function(v) {\n        assert.equal(v, false);\n        return done();\n      });\n      return observable.toggle();\n    });\n  });\n\n  describe(\"Observable Array\", function() {\n    it(\"should proxy array methods\", function() {\n      var o;\n      o = Observable([5]);\n      return o.map(function(n) {\n        return assert.equal(n, 5);\n      });\n    });\n    it(\"should notify on mutation methods\", function(done) {\n      var o;\n      o = Observable([]);\n      o.observe(function(newValue) {\n        return assert.equal(newValue[0], 1);\n      });\n      o.push(1);\n      return done();\n    });\n    it(\"should have an each method\", function() {\n      var o;\n      o = Observable([]);\n      return assert(o.each);\n    });\n    it(\"#get\", function() {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      return assert.equal(o.get(2), 2);\n    });\n    it(\"#first\", function() {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      return assert.equal(o.first(), 0);\n    });\n    it(\"#last\", function() {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      return assert.equal(o.last(), 3);\n    });\n    it(\"#remove\", function(done) {\n      var o;\n      o = Observable([0, 1, 2, 3]);\n      o.observe(function(newValue) {\n        assert.equal(newValue.length, 3);\n        return setTimeout(function() {\n          return done();\n        }, 0);\n      });\n      return assert.equal(o.remove(2), 2);\n    });\n    return it(\"should proxy the length property\");\n  });\n\n  describe(\"Observable functions\", function() {\n    it(\"should compute dependencies\", function(done) {\n      var firstName, lastName, o;\n      firstName = Observable(\"Duder\");\n      lastName = Observable(\"Man\");\n      o = Observable(function() {\n        return \"\" + (firstName()) + \" \" + (lastName());\n      });\n      o.observe(function(newValue) {\n        assert.equal(newValue, \"Duder Bro\");\n        return done();\n      });\n      return lastName(\"Bro\");\n    });\n    it(\"should compute array#get as a dependency\", function() {\n      var observableArray, observableFn;\n      observableArray = Observable([0, 1, 2]);\n      observableFn = Observable(function() {\n        return observableArray.get(0);\n      });\n      assert.equal(observableFn(), 0);\n      observableArray([5]);\n      return assert.equal(observableFn(), 5);\n    });\n    it(\"should compute array#first as a dependency\", function() {\n      var observableArray, observableFn;\n      observableArray = Observable([0, 1, 2]);\n      observableFn = Observable(function() {\n        return observableArray.first() + 1;\n      });\n      assert.equal(observableFn(), 1);\n      observableArray([5]);\n      return assert.equal(observableFn(), 6);\n    });\n    it(\"should compute array#last as a dependency\", function() {\n      var observableArray, observableFn;\n      observableArray = Observable([0, 1, 2]);\n      observableFn = Observable(function() {\n        return observableArray.last();\n      });\n      assert.equal(observableFn(), 2);\n      observableArray.pop();\n      assert.equal(observableFn(), 1);\n      observableArray([5]);\n      return assert.equal(observableFn(), 5);\n    });\n    it(\"should compute array#size as a dependency\", function() {\n      var observableArray, observableFn;\n      observableArray = Observable([0, 1, 2]);\n      observableFn = Observable(function() {\n        return observableArray.size() * 2;\n      });\n      assert.equal(observableFn(), 6);\n      observableArray.pop();\n      assert.equal(observableFn(), 4);\n      observableArray.shift();\n      return assert.equal(observableFn(), 2);\n    });\n    it(\"should allow double nesting\", function(done) {\n      var bottom, middle, top;\n      bottom = Observable(\"rad\");\n      middle = Observable(function() {\n        return bottom();\n      });\n      top = Observable(function() {\n        return middle();\n      });\n      top.observe(function(newValue) {\n        assert.equal(newValue, \"wat\");\n        assert.equal(top(), newValue);\n        assert.equal(middle(), newValue);\n        return done();\n      });\n      return bottom(\"wat\");\n    });\n    it(\"should work with dynamic dependencies\", function() {\n      var dynamicObservable, observableArray;\n      observableArray = Observable([]);\n      dynamicObservable = Observable(function() {\n        return observableArray.filter(function(item) {\n          return item.age() > 3;\n        });\n      });\n      assert.equal(dynamicObservable().length, 0);\n      observableArray.push({\n        age: Observable(1)\n      });\n      observableArray()[0].age(5);\n      return assert.equal(dynamicObservable().length, 1);\n    });\n    it(\"should work with context\", function() {\n      var model;\n      model = {\n        a: Observable(\"Hello\"),\n        b: Observable(\"there\")\n      };\n      model.c = Observable(function() {\n        return \"\" + (this.a()) + \" \" + (this.b());\n      }, model);\n      assert.equal(model.c(), \"Hello there\");\n      model.b(\"world\");\n      return assert.equal(model.c(), \"Hello world\");\n    });\n    it(\"should be ok even if the function throws an exception\", function() {\n      assert.throws(function() {\n        var t;\n        return t = Observable(function() {\n          throw \"wat\";\n        });\n      });\n      return assert.equal(global.OBSERVABLE_ROOT_HACK.length, 0);\n    });\n    it(\"should have an each method\", function() {\n      var o;\n      o = Observable(function() {});\n      return assert(o.each);\n    });\n    it(\"should not invoke when returning undefined\", function() {\n      var o;\n      o = Observable(function() {});\n      return o.each(function() {\n        return assert(false);\n      });\n    });\n    it(\"should invoke when returning any defined value\", function(done) {\n      var o;\n      o = Observable(function() {\n        return 5;\n      });\n      return o.each(function(n) {\n        assert.equal(n, 5);\n        return done();\n      });\n    });\n    it(\"should work on an array dependency\", function() {\n      var last, o, oA;\n      oA = Observable([1, 2, 3]);\n      o = Observable(function() {\n        return oA()[0];\n      });\n      last = Observable(function() {\n        return oA()[oA().length - 1];\n      });\n      assert.equal(o(), 1);\n      oA.unshift(0);\n      assert.equal(o(), 0);\n      oA.push(4);\n      return assert.equal(last(), 4, \"Last should be 4\");\n    });\n    it(\"should work with multiple dependencies\", function() {\n      var checked, first, letter, second;\n      letter = Observable(\"A\");\n      checked = function() {\n        var l;\n        l = letter();\n        return this.name().indexOf(l) === 0;\n      };\n      first = {\n        name: Observable(\"Andrew\")\n      };\n      first.checked = Observable(checked, first);\n      second = {\n        name: Observable(\"Benjamin\")\n      };\n      second.checked = Observable(checked, second);\n      assert.equal(first.checked(), true);\n      assert.equal(second.checked(), false);\n      assert.equal(letter.listeners.length, 2);\n      letter(\"B\");\n      assert.equal(first.checked(), false);\n      return assert.equal(second.checked(), true);\n    });\n    it(\"should work with nested observable construction\", function() {\n      var gen, o;\n      gen = Observable(function() {\n        return Observable(\"Duder\");\n      });\n      o = gen();\n      assert.equal(o(), \"Duder\");\n      o(\"wat\");\n      return assert.equal(o(), \"wat\");\n    });\n    describe(\"Scoping\", function() {\n      return it(\"should be scoped to optional context\", function(done) {\n        var model;\n        model = {\n          firstName: Observable(\"Duder\"),\n          lastName: Observable(\"Man\")\n        };\n        model.name = Observable(function() {\n          return \"\" + (this.firstName()) + \" \" + (this.lastName());\n        }, model);\n        model.name.observe(function(newValue) {\n          assert.equal(newValue, \"Duder Bro\");\n          return done();\n        });\n        return model.lastName(\"Bro\");\n      });\n    });\n    return describe(\"concat\", function() {\n      it(\"should return an observable array that changes based on changes in inputs\", function() {\n        var item, letters, nullable, numbers, observableArray;\n        numbers = Observable([1, 2, 3]);\n        letters = Observable([\"a\", \"b\", \"c\"]);\n        item = Observable({});\n        nullable = Observable(null);\n        observableArray = Observable.concat(numbers, \"literal\", letters, item, nullable);\n        assert.equal(observableArray().length, 3 + 1 + 3 + 1);\n        assert.equal(observableArray()[0], 1);\n        assert.equal(observableArray()[3], \"literal\");\n        assert.equal(observableArray()[4], \"a\");\n        assert.equal(observableArray()[7], item());\n        numbers.push(4);\n        assert.equal(observableArray().length, 9);\n        nullable(\"cool\");\n        return assert.equal(observableArray().length, 10);\n      });\n      it(\"should work with observable functions that return arrays\", function() {\n        var computedArray, item, observableArray;\n        item = Observable(\"wat\");\n        computedArray = Observable(function() {\n          return [item()];\n        });\n        observableArray = Observable.concat(computedArray, computedArray);\n        assert.equal(observableArray().length, 2);\n        assert.equal(observableArray()[1], \"wat\");\n        item(\"yolo\");\n        return assert.equal(observableArray()[1], \"yolo\");\n      });\n      it(\"should have a push method\", function() {\n        var observable, observableArray;\n        observableArray = Observable.concat();\n        observable = Observable(\"hey\");\n        observableArray.push(observable);\n        assert.equal(observableArray()[0], \"hey\");\n        observable(\"wat\");\n        assert.equal(observableArray()[0], \"wat\");\n        observableArray.push(\"cool\");\n        observableArray.push(\"radical\");\n        return assert.equal(observableArray().length, 3);\n      });\n      it(\"should be observable\", function(done) {\n        var observableArray;\n        observableArray = Observable.concat();\n        observableArray.observe(function(items) {\n          assert.equal(items.length, 3);\n          return done();\n        });\n        return observableArray.push([\"A\", \"B\", \"C\"]);\n      });\n      return it(\"should have an each method\", function() {\n        var n, observableArray;\n        observableArray = Observable.concat([\"A\", \"B\", \"C\"]);\n        n = 0;\n        observableArray.each(function() {\n          return n += 1;\n        });\n        return assert.equal(n, 3);\n      });\n    });\n  });\n\n}).call(this);\n",
          "type": "blob"
        }
      },
      "progenitor": {
        "url": "http://www.danielx.net/editor/"
      },
      "version": "0.3.1",
      "entryPoint": "main",
      "repository": {
        "branch": "v0.3.1",
        "default_branch": "master",
        "full_name": "distri/observable",
        "homepage": "http://observable.us",
        "description": "",
        "html_url": "https://github.com/distri/observable",
        "url": "https://api.github.com/repos/distri/observable",
        "publishBranch": "gh-pages"
      },
      "dependencies": {}
    }
  }
});